using System;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using LinqToSalesforce;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Linq;

namespace LinqToSalesforce
{
    public class PickAccountTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountTypeConverter))]
    public class PickAccountType
    {
        public static readonly string  Prospect = "Prospect"; 
        public static readonly string  CustomerDirect = "Customer - Direct"; 
        public static readonly string  CustomerChannel = "Customer - Channel"; 
        public static readonly string  ChannelPartnerReseller = "Channel Partner / Reseller"; 
        public static readonly string  InstallationPartner = "Installation Partner"; 
        public static readonly string  TechnologyPartner = "Technology Partner"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountType(string s)
        {
            return new PickAccountType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountType Parse(string text) => text;

        

    }
    public class PickAccountIndustryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountIndustry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountIndustry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountIndustryConverter))]
    public class PickAccountIndustry
    {
        public static readonly string  Agriculture = "Agriculture"; 
        public static readonly string  Apparel = "Apparel"; 
        public static readonly string  Banking = "Banking"; 
        public static readonly string  Biotechnology = "Biotechnology"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Communications = "Communications"; 
        public static readonly string  Construction = "Construction"; 
        public static readonly string  Consulting = "Consulting"; 
        public static readonly string  Education = "Education"; 
        public static readonly string  Electronics = "Electronics"; 
        public static readonly string  Energy = "Energy"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Entertainment = "Entertainment"; 
        public static readonly string  Environmental = "Environmental"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  FoodBeverage = "Food & Beverage"; 
        public static readonly string  Government = "Government"; 
        public static readonly string  Healthcare = "Healthcare"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Insurance = "Insurance"; 
        public static readonly string  Machinery = "Machinery"; 
        public static readonly string  Manufacturing = "Manufacturing"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  NotForProfit = "Not For Profit"; 
        public static readonly string  Recreation = "Recreation"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  Shipping = "Shipping"; 
        public static readonly string  Technology = "Technology"; 
        public static readonly string  Telecommunications = "Telecommunications"; 
        public static readonly string  Transportation = "Transportation"; 
        public static readonly string  Utilities = "Utilities"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountIndustry o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountIndustry(string s)
        {
            return new PickAccountIndustry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountIndustry Parse(string text) => text;

        

    }
    public class PickAccountOwnershipConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountOwnership)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountOwnership {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountOwnershipConverter))]
    public class PickAccountOwnership
    {
        public static readonly string  Public = "Public"; 
        public static readonly string  Private = "Private"; 
        public static readonly string  Subsidiary = "Subsidiary"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountOwnership o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountOwnership(string s)
        {
            return new PickAccountOwnership {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountOwnership Parse(string text) => text;

        

    }
    public class PickAccountRatingConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountRating)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountRating {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountRatingConverter))]
    public class PickAccountRating
    {
        public static readonly string  Hot = "Hot"; 
        public static readonly string  Warm = "Warm"; 
        public static readonly string  Cold = "Cold"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountRating o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountRating(string s)
        {
            return new PickAccountRating {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountRating Parse(string text) => text;

        

    }
    public class PickAccountCleanStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCleanStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCleanStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCleanStatusConverter))]
    public class PickAccountCleanStatus
    {
        public static readonly string  Matched = "Matched"; 
        public static readonly string  Different = "Different"; 
        public static readonly string  Acknowledged = "Acknowledged"; 
        public static readonly string  NotFound = "NotFound"; 
        public static readonly string  Inactive = "Inactive"; 
        public static readonly string  Pending = "Pending"; 
        public static readonly string  SelectMatch = "SelectMatch"; 
        public static readonly string  Skipped = "Skipped"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCleanStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCleanStatus(string s)
        {
            return new PickAccountCleanStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCleanStatus Parse(string text) => text;

        

    }
    public class PickAccountAccountSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountAccountSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountAccountSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountAccountSourceConverter))]
    public class PickAccountAccountSource
    {
        public static readonly string  Web = "Web"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountAccountSource o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountAccountSource(string s)
        {
            return new PickAccountAccountSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountAccountSource Parse(string text) => text;

        

    }
    public class PickAccountCustomerPriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCustomerPriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCustomerPriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCustomerPriorityConverter))]
    public class PickAccountCustomerPriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Low = "Low"; 
        public static readonly string  Medium = "Medium"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCustomerPriority o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCustomerPriority(string s)
        {
            return new PickAccountCustomerPriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCustomerPriority Parse(string text) => text;

        

    }
    public class PickAccountSLAConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountSLA)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountSLA {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountSLAConverter))]
    public class PickAccountSLA
    {
        public static readonly string  Gold = "Gold"; 
        public static readonly string  Silver = "Silver"; 
        public static readonly string  Platinum = "Platinum"; 
        public static readonly string  Bronze = "Bronze"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountSLA o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountSLA(string s)
        {
            return new PickAccountSLA {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountSLA Parse(string text) => text;

        

    }
    public class PickAccountActiveConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountActive)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountActive {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountActiveConverter))]
    public class PickAccountActive
    {
        public static readonly string  No = "No"; 
        public static readonly string  Yes = "Yes"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountActive o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountActive(string s)
        {
            return new PickAccountActive {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountActive Parse(string text) => text;

        

    }
    public class PickAccountUpsellOpportunityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountUpsellOpportunity)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountUpsellOpportunity {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountUpsellOpportunityConverter))]
    public class PickAccountUpsellOpportunity
    {
        public static readonly string  Maybe = "Maybe"; 
        public static readonly string  No = "No"; 
        public static readonly string  Yes = "Yes"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountUpsellOpportunity o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountUpsellOpportunity(string s)
        {
            return new PickAccountUpsellOpportunity {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountUpsellOpportunity Parse(string text) => text;

        

    }
    public class PickAccountActivityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountActivityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountActivityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountActivityTypeConverter))]
    public class PickAccountActivityType
    {
        public static readonly string  Buyer = "Buyer"; 
        public static readonly string  Vendor = "Vendor"; 
        public static readonly string  Manufacturer = "Manufacturer"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountActivityType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountActivityType(string s)
        {
            return new PickAccountActivityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountActivityType Parse(string text) => text;

        

    }
    public class PickAccountCleanInfoIndustryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCleanInfoIndustry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCleanInfoIndustry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCleanInfoIndustryConverter))]
    public class PickAccountCleanInfoIndustry
    {
        public static readonly string  Agriculture = "Agriculture"; 
        public static readonly string  Apparel = "Apparel"; 
        public static readonly string  Banking = "Banking"; 
        public static readonly string  Biotechnology = "Biotechnology"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Communications = "Communications"; 
        public static readonly string  Construction = "Construction"; 
        public static readonly string  Consulting = "Consulting"; 
        public static readonly string  Education = "Education"; 
        public static readonly string  Electronics = "Electronics"; 
        public static readonly string  Energy = "Energy"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Entertainment = "Entertainment"; 
        public static readonly string  Environmental = "Environmental"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  FoodBeverage = "Food & Beverage"; 
        public static readonly string  Government = "Government"; 
        public static readonly string  Healthcare = "Healthcare"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Insurance = "Insurance"; 
        public static readonly string  Machinery = "Machinery"; 
        public static readonly string  Manufacturing = "Manufacturing"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  NotForProfit = "Not For Profit"; 
        public static readonly string  Recreation = "Recreation"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  Shipping = "Shipping"; 
        public static readonly string  Technology = "Technology"; 
        public static readonly string  Telecommunications = "Telecommunications"; 
        public static readonly string  Transportation = "Transportation"; 
        public static readonly string  Utilities = "Utilities"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCleanInfoIndustry o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCleanInfoIndustry(string s)
        {
            return new PickAccountCleanInfoIndustry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCleanInfoIndustry Parse(string text) => text;

        

    }
    public class PickAccountCleanInfoOwnershipConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCleanInfoOwnership)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCleanInfoOwnership {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCleanInfoOwnershipConverter))]
    public class PickAccountCleanInfoOwnership
    {
        public static readonly string  Public = "Public"; 
        public static readonly string  Private = "Private"; 
        public static readonly string  Subsidiary = "Subsidiary"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCleanInfoOwnership o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCleanInfoOwnership(string s)
        {
            return new PickAccountCleanInfoOwnership {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCleanInfoOwnership Parse(string text) => text;

        

    }
    public class PickAccountCleanInfoCompanyStatusDataDotComConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountCleanInfoCompanyStatusDataDotCom)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountCleanInfoCompanyStatusDataDotCom {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountCleanInfoCompanyStatusDataDotComConverter))]
    public class PickAccountCleanInfoCompanyStatusDataDotCom
    {
        public static readonly string  IsActiveCompanyDataDotCom = "IsActiveCompanyDataDotCom"; 
        public static readonly string  IsInactiveCompanyDataDotCom = "IsInactiveCompanyDataDotCom"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountCleanInfoCompanyStatusDataDotCom o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountCleanInfoCompanyStatusDataDotCom(string s)
        {
            return new PickAccountCleanInfoCompanyStatusDataDotCom {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountCleanInfoCompanyStatusDataDotCom Parse(string text) => text;

        

    }
    public class PickAccountContactRoleRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountContactRoleRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountContactRoleRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountContactRoleRoleConverter))]
    public class PickAccountContactRoleRole
    {
        public static readonly string  BusinessUser = "Business User"; 
        public static readonly string  DecisionMaker = "Decision Maker"; 
        public static readonly string  EconomicBuyer = "Economic Buyer"; 
        public static readonly string  EconomicDecisionMaker = "Economic Decision Maker"; 
        public static readonly string  Evaluator = "Evaluator"; 
        public static readonly string  ExecutiveSponsor = "Executive Sponsor"; 
        public static readonly string  Influencer = "Influencer"; 
        public static readonly string  TechnicalBuyer = "Technical Buyer"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountContactRoleRole o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountContactRoleRole(string s)
        {
            return new PickAccountContactRoleRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountContactRoleRole Parse(string text) => text;

        

    }
    public class PickAccountFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountFeedTypeConverter))]
    public class PickAccountFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountFeedType(string s)
        {
            return new PickAccountFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountFeedType Parse(string text) => text;

        

    }
    public class PickAccountHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountHistoryFieldConverter))]
    public class PickAccountHistoryField
    {
        public static readonly string  accountMerged = "accountMerged"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  TextName = "TextName"; 
        public static readonly string  AccountNumber = "AccountNumber"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Site = "Site"; 
        public static readonly string  AccountSource = "AccountSource"; 
        public static readonly string  Activec = "Active__c"; 
        public static readonly string  ActivityTypec = "ActivityType__c"; 
        public static readonly string  AnnualRevenue = "AnnualRevenue"; 
        public static readonly string  BillingAddress = "BillingAddress"; 
        public static readonly string  BillingCity = "BillingCity"; 
        public static readonly string  BillingCountry = "BillingCountry"; 
        public static readonly string  BillingGeocodeAccuracy = "BillingGeocodeAccuracy"; 
        public static readonly string  BillingLatitude = "BillingLatitude"; 
        public static readonly string  BillingLongitude = "BillingLongitude"; 
        public static readonly string  BillingState = "BillingState"; 
        public static readonly string  BillingStreet = "BillingStreet"; 
        public static readonly string  BillingPostalCode = "BillingPostalCode"; 
        public static readonly string  CleanStatus = "CleanStatus"; 
        public static readonly string  created = "created"; 
        public static readonly string  accountCreatedFromLead = "accountCreatedFromLead"; 
        public static readonly string  CustomerPriorityc = "CustomerPriority__c"; 
        public static readonly string  DandbCompany = "DandbCompany"; 
        public static readonly string  Jigsaw = "Jigsaw"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  DunsNumber = "DunsNumber"; 
        public static readonly string  NumberOfEmployees = "NumberOfEmployees"; 
        public static readonly string  Fax = "Fax"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  Industry = "Industry"; 
        public static readonly string  accountUpdatedByLead = "accountUpdatedByLead"; 
        public static readonly string  personAccountUpdatedByLead = "personAccountUpdatedByLead"; 
        public static readonly string  NaicsCode = "NaicsCode"; 
        public static readonly string  NaicsDesc = "NaicsDesc"; 
        public static readonly string  NumberBugc = "NumberBug__c"; 
        public static readonly string  NumberofLocationsc = "NumberofLocations__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Ownership = "Ownership"; 
        public static readonly string  Parent = "Parent"; 
        public static readonly string  Phone = "Phone"; 
        public static readonly string  Rating = "Rating"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  ShippingAddress = "ShippingAddress"; 
        public static readonly string  ShippingCity = "ShippingCity"; 
        public static readonly string  ShippingCountry = "ShippingCountry"; 
        public static readonly string  ShippingGeocodeAccuracy = "ShippingGeocodeAccuracy"; 
        public static readonly string  ShippingLatitude = "ShippingLatitude"; 
        public static readonly string  ShippingLongitude = "ShippingLongitude"; 
        public static readonly string  ShippingState = "ShippingState"; 
        public static readonly string  ShippingStreet = "ShippingStreet"; 
        public static readonly string  ShippingPostalCode = "ShippingPostalCode"; 
        public static readonly string  Sic = "Sic"; 
        public static readonly string  SicDesc = "SicDesc"; 
        public static readonly string  SLAc = "SLA__c"; 
        public static readonly string  SLAExpirationDatec = "SLAExpirationDate__c"; 
        public static readonly string  SLASerialNumberc = "SLASerialNumber__c"; 
        public static readonly string  TickerSymbol = "TickerSymbol"; 
        public static readonly string  Tradestyle = "Tradestyle"; 
        public static readonly string  Type = "Type"; 
        public static readonly string  UpsellOpportunityc = "UpsellOpportunity__c"; 
        public static readonly string  Website = "Website"; 
        public static readonly string  YearStarted = "YearStarted"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountHistoryField(string s)
        {
            return new PickAccountHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountHistoryField Parse(string text) => text;

        

    }
    public class PickAccountPartnerRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountPartnerRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountPartnerRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountPartnerRoleConverter))]
    public class PickAccountPartnerRole
    {
        public static readonly string  SystemIntegrator = "System Integrator"; 
        public static readonly string  Agency = "Agency"; 
        public static readonly string  Advertiser = "Advertiser"; 
        public static readonly string  VARReseller = "VAR/Reseller"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  Developer = "Developer"; 
        public static readonly string  Broker = "Broker"; 
        public static readonly string  Lender = "Lender"; 
        public static readonly string  Supplier = "Supplier"; 
        public static readonly string  Institution = "Institution"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  Dealer = "Dealer"; 
        public static readonly string  Consultant = "Consultant"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountPartnerRole o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountPartnerRole(string s)
        {
            return new PickAccountPartnerRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountPartnerRole Parse(string text) => text;

        

    }
    public class PickAccountShareAccountAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShareAccountAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShareAccountAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShareAccountAccessLevelConverter))]
    public class PickAccountShareAccountAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShareAccountAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShareAccountAccessLevel(string s)
        {
            return new PickAccountShareAccountAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShareAccountAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountShareOpportunityAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShareOpportunityAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShareOpportunityAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShareOpportunityAccessLevelConverter))]
    public class PickAccountShareOpportunityAccessLevel
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShareOpportunityAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShareOpportunityAccessLevel(string s)
        {
            return new PickAccountShareOpportunityAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShareOpportunityAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountShareCaseAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShareCaseAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShareCaseAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShareCaseAccessLevelConverter))]
    public class PickAccountShareCaseAccessLevel
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShareCaseAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShareCaseAccessLevel(string s)
        {
            return new PickAccountShareCaseAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShareCaseAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountShareContactAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShareContactAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShareContactAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShareContactAccessLevelConverter))]
    public class PickAccountShareContactAccessLevel
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShareContactAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShareContactAccessLevel(string s)
        {
            return new PickAccountShareContactAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShareContactAccessLevel Parse(string text) => text;

        

    }
    public class PickAccountShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAccountShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAccountShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAccountShareRowCauseConverter))]
    public class PickAccountShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAccountShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickAccountShareRowCause(string s)
        {
            return new PickAccountShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAccountShareRowCause Parse(string text) => text;

        

    }
    public class PickActivityHistoryStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryStatusConverter))]
    public class PickActivityHistoryStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Waitingonsomeoneelse = "Waiting on someone else"; 
        public static readonly string  Deferred = "Deferred"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryStatus(string s)
        {
            return new PickActivityHistoryStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryStatus Parse(string text) => text;

        

    }
    public class PickActivityHistoryPriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryPriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryPriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryPriorityConverter))]
    public class PickActivityHistoryPriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Normal = "Normal"; 
        public static readonly string  Low = "Low"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryPriority o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryPriority(string s)
        {
            return new PickActivityHistoryPriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryPriority Parse(string text) => text;

        

    }
    public class PickActivityHistoryActivityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryActivityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryActivityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryActivityTypeConverter))]
    public class PickActivityHistoryActivityType
    {
        public static readonly string  Call = "Call"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Meeting = "Meeting"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryActivityType o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryActivityType(string s)
        {
            return new PickActivityHistoryActivityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryActivityType Parse(string text) => text;

        

    }
    public class PickActivityHistoryCallTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickActivityHistoryCallType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickActivityHistoryCallType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickActivityHistoryCallTypeConverter))]
    public class PickActivityHistoryCallType
    {
        public static readonly string  Internal = "Internal"; 
        public static readonly string  Inbound = "Inbound"; 
        public static readonly string  Outbound = "Outbound"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickActivityHistoryCallType o)
        {
            return o.Value;
        }

        public static implicit operator PickActivityHistoryCallType(string s)
        {
            return new PickActivityHistoryCallType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickActivityHistoryCallType Parse(string text) => text;

        

    }
    public class PickApexClassStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexClassStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexClassStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexClassStatusConverter))]
    public class PickApexClassStatus
    {
        public static readonly string  Inactive = "Inactive"; 
        public static readonly string  Active = "Active"; 
        public static readonly string  Deleted = "Deleted"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexClassStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickApexClassStatus(string s)
        {
            return new PickApexClassStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexClassStatus Parse(string text) => text;

        

    }
    public class PickApexComponentControllerTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexComponentControllerType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexComponentControllerType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexComponentControllerTypeConverter))]
    public class PickApexComponentControllerType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _4 = "4"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _5 = "5"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexComponentControllerType o)
        {
            return o.Value;
        }

        public static implicit operator PickApexComponentControllerType(string s)
        {
            return new PickApexComponentControllerType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexComponentControllerType Parse(string text) => text;

        

    }
    public class PickApexLogLocationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexLogLocation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexLogLocation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexLogLocationConverter))]
    public class PickApexLogLocation
    {
        public static readonly string  Monitoring = "Monitoring"; 
        public static readonly string  Profiling = "Profiling"; 
        public static readonly string  SystemLog = "SystemLog"; 
        public static readonly string  HeapDump = "HeapDump"; 
        public static readonly string  Preserved = "Preserved"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexLogLocation o)
        {
            return o.Value;
        }

        public static implicit operator PickApexLogLocation(string s)
        {
            return new PickApexLogLocation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexLogLocation Parse(string text) => text;

        

    }
    public class PickApexPageControllerTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexPageControllerType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexPageControllerType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexPageControllerTypeConverter))]
    public class PickApexPageControllerType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _4 = "4"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _5 = "5"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexPageControllerType o)
        {
            return o.Value;
        }

        public static implicit operator PickApexPageControllerType(string s)
        {
            return new PickApexPageControllerType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexPageControllerType Parse(string text) => text;

        

    }
    public class PickApexTestQueueItemStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexTestQueueItemStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexTestQueueItemStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexTestQueueItemStatusConverter))]
    public class PickApexTestQueueItemStatus
    {
        public static readonly string  Queued = "Queued"; 
        public static readonly string  Processing = "Processing"; 
        public static readonly string  Aborted = "Aborted"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Failed = "Failed"; 
        public static readonly string  Preparing = "Preparing"; 
        public static readonly string  Holding = "Holding"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexTestQueueItemStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickApexTestQueueItemStatus(string s)
        {
            return new PickApexTestQueueItemStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexTestQueueItemStatus Parse(string text) => text;

        

    }
    public class PickApexTestResultOutcomeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexTestResultOutcome)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexTestResultOutcome {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexTestResultOutcomeConverter))]
    public class PickApexTestResultOutcome
    {
        public static readonly string  Pass = "Pass"; 
        public static readonly string  Fail = "Fail"; 
        public static readonly string  CompileFail = "CompileFail"; 
        public static readonly string  Skip = "Skip"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexTestResultOutcome o)
        {
            return o.Value;
        }

        public static implicit operator PickApexTestResultOutcome(string s)
        {
            return new PickApexTestResultOutcome {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexTestResultOutcome Parse(string text) => text;

        

    }
    public class PickApexTriggerTableEnumOrIdConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexTriggerTableEnumOrId)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexTriggerTableEnumOrId {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexTriggerTableEnumOrIdConverter))]
    public class PickApexTriggerTableEnumOrId
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  AssetTokenEvent = "AssetTokenEvent"; 
        public static readonly string  Attachment = "Attachment"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  CampaignMember = "CampaignMember"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  CaseComment = "CaseComment"; 
        public static readonly string  ChatterMessage = "ChatterMessage"; 
        public static readonly string  CollaborationGroup = "CollaborationGroup"; 
        public static readonly string  CollaborationGroupMember = "CollaborationGroupMember"; 
        public static readonly string  CollaborationGroupRecord = "CollaborationGroupRecord"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContentDistribution = "ContentDistribution"; 
        public static readonly string  ContentDocument = "ContentDocument"; 
        public static readonly string  ContentDocumentLink = "ContentDocumentLink"; 
        public static readonly string  ContentVersion = "ContentVersion"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  DandBCompany = "DandBCompany"; 
        public static readonly string  DuplicateRecordItem = "DuplicateRecordItem"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  EmailMessage = "EmailMessage"; 
        public static readonly string  Event = "Event"; 
        public static readonly string  FeedComment = "FeedComment"; 
        public static readonly string  FeedItem = "FeedItem"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  GoalLink = "GoalLink"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  IdeaComment = "IdeaComment"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  MetricDataLink = "MetricDataLink"; 
        public static readonly string  Note = "Note"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  OpportunityLineItem = "OpportunityLineItem"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  OrderItem = "OrderItem"; 
        public static readonly string  Partner = "Partner"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  RecordOrigin = "RecordOrigin"; 
        public static readonly string  SocialPersona = "SocialPersona"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  StreamingChannel = "StreamingChannel"; 
        public static readonly string  Task = "Task"; 
        public static readonly string  Topic = "Topic"; 
        public static readonly string  TopicAssignment = "TopicAssignment"; 
        public static readonly string  User = "User"; 
        public static readonly string  UserProvAccount = "UserProvAccount"; 
        public static readonly string  UserProvAccountStaging = "UserProvAccountStaging"; 
        public static readonly string  UserProvisioningLog = "UserProvisioningLog"; 
        public static readonly string  UserProvisioningRequest = "UserProvisioningRequest"; 
        public static readonly string  UserProvMockTarget = "UserProvMockTarget"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexTriggerTableEnumOrId o)
        {
            return o.Value;
        }

        public static implicit operator PickApexTriggerTableEnumOrId(string s)
        {
            return new PickApexTriggerTableEnumOrId {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexTriggerTableEnumOrId Parse(string text) => text;

        

    }
    public class PickApexTriggerStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickApexTriggerStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickApexTriggerStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickApexTriggerStatusConverter))]
    public class PickApexTriggerStatus
    {
        public static readonly string  Inactive = "Inactive"; 
        public static readonly string  Active = "Active"; 
        public static readonly string  Deleted = "Deleted"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickApexTriggerStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickApexTriggerStatus(string s)
        {
            return new PickApexTriggerStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickApexTriggerStatus Parse(string text) => text;

        

    }
    public class PickAppMenuItemMobilePlatformConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAppMenuItemMobilePlatform)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAppMenuItemMobilePlatform {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAppMenuItemMobilePlatformConverter))]
    public class PickAppMenuItemMobilePlatform
    {
        public static readonly string  ios = "ios"; 
        public static readonly string  android = "android"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAppMenuItemMobilePlatform o)
        {
            return o.Value;
        }

        public static implicit operator PickAppMenuItemMobilePlatform(string s)
        {
            return new PickAppMenuItemMobilePlatform {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAppMenuItemMobilePlatform Parse(string text) => text;

        

    }
    public class PickAppMenuItemCanvasAccessMethodConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAppMenuItemCanvasAccessMethod)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAppMenuItemCanvasAccessMethod {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAppMenuItemCanvasAccessMethodConverter))]
    public class PickAppMenuItemCanvasAccessMethod
    {
        public static readonly string  Get = "Get"; 
        public static readonly string  Post = "Post"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAppMenuItemCanvasAccessMethod o)
        {
            return o.Value;
        }

        public static implicit operator PickAppMenuItemCanvasAccessMethod(string s)
        {
            return new PickAppMenuItemCanvasAccessMethod {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAppMenuItemCanvasAccessMethod Parse(string text) => text;

        

    }
    public class PickAppMenuItemTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAppMenuItemType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAppMenuItemType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAppMenuItemTypeConverter))]
    public class PickAppMenuItemType
    {
        public static readonly string  ConnectedApplication = "ConnectedApplication"; 
        public static readonly string  ServiceProvider = "ServiceProvider"; 
        public static readonly string  TabSet = "TabSet"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAppMenuItemType o)
        {
            return o.Value;
        }

        public static implicit operator PickAppMenuItemType(string s)
        {
            return new PickAppMenuItemType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAppMenuItemType Parse(string text) => text;

        

    }
    public class PickAssetStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAssetStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAssetStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAssetStatusConverter))]
    public class PickAssetStatus
    {
        public static readonly string  Shipped = "Shipped"; 
        public static readonly string  Installed = "Installed"; 
        public static readonly string  Registered = "Registered"; 
        public static readonly string  Obsolete = "Obsolete"; 
        public static readonly string  Purchased = "Purchased"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAssetStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickAssetStatus(string s)
        {
            return new PickAssetStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAssetStatus Parse(string text) => text;

        

    }
    public class PickAssetFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAssetFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAssetFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAssetFeedTypeConverter))]
    public class PickAssetFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAssetFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickAssetFeedType(string s)
        {
            return new PickAssetFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAssetFeedType Parse(string text) => text;

        

    }
    public class PickAssetHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAssetHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAssetHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAssetHistoryFieldConverter))]
    public class PickAssetHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  IsCompetitorProduct = "IsCompetitorProduct"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  created = "created"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  InstallDate = "InstallDate"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Parent = "Parent"; 
        public static readonly string  Price = "Price"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  PurchaseDate = "PurchaseDate"; 
        public static readonly string  Quantity = "Quantity"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  RootAsset = "RootAsset"; 
        public static readonly string  SerialNumber = "SerialNumber"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  UsageEndDate = "UsageEndDate"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAssetHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickAssetHistoryField(string s)
        {
            return new PickAssetHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAssetHistoryField Parse(string text) => text;

        

    }
    public class PickAssignmentRuleSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAssignmentRuleSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAssignmentRuleSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAssignmentRuleSobjectTypeConverter))]
    public class PickAssignmentRuleSobjectType
    {
        public static readonly string  Case = "Case"; 
        public static readonly string  Lead = "Lead"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAssignmentRuleSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickAssignmentRuleSobjectType(string s)
        {
            return new PickAssignmentRuleSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAssignmentRuleSobjectType Parse(string text) => text;

        

    }
    public class PickAsyncApexJobJobTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAsyncApexJobJobType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAsyncApexJobJobType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAsyncApexJobJobTypeConverter))]
    public class PickAsyncApexJobJobType
    {
        public static readonly string  Future = "Future"; 
        public static readonly string  SharingRecalculation = "SharingRecalculation"; 
        public static readonly string  ScheduledApex = "ScheduledApex"; 
        public static readonly string  BatchApex = "BatchApex"; 
        public static readonly string  BatchApexWorker = "BatchApexWorker"; 
        public static readonly string  TestRequest = "TestRequest"; 
        public static readonly string  TestWorker = "TestWorker"; 
        public static readonly string  ApexToken = "ApexToken"; 
        public static readonly string  Queueable = "Queueable"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAsyncApexJobJobType o)
        {
            return o.Value;
        }

        public static implicit operator PickAsyncApexJobJobType(string s)
        {
            return new PickAsyncApexJobJobType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAsyncApexJobJobType Parse(string text) => text;

        

    }
    public class PickAsyncApexJobStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAsyncApexJobStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAsyncApexJobStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAsyncApexJobStatusConverter))]
    public class PickAsyncApexJobStatus
    {
        public static readonly string  Queued = "Queued"; 
        public static readonly string  Processing = "Processing"; 
        public static readonly string  Aborted = "Aborted"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Failed = "Failed"; 
        public static readonly string  Preparing = "Preparing"; 
        public static readonly string  Holding = "Holding"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAsyncApexJobStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickAsyncApexJobStatus(string s)
        {
            return new PickAsyncApexJobStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAsyncApexJobStatus Parse(string text) => text;

        

    }
    public class PickAuraDefinitionDefTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuraDefinitionDefType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuraDefinitionDefType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuraDefinitionDefTypeConverter))]
    public class PickAuraDefinitionDefType
    {
        public static readonly string  APPLICATION = "APPLICATION"; 
        public static readonly string  CONTROLLER = "CONTROLLER"; 
        public static readonly string  COMPONENT = "COMPONENT"; 
        public static readonly string  EVENT = "EVENT"; 
        public static readonly string  HELPER = "HELPER"; 
        public static readonly string  INTERFACE = "INTERFACE"; 
        public static readonly string  RENDERER = "RENDERER"; 
        public static readonly string  STYLE = "STYLE"; 
        public static readonly string  PROVIDER = "PROVIDER"; 
        public static readonly string  MODEL = "MODEL"; 
        public static readonly string  TESTSUITE = "TESTSUITE"; 
        public static readonly string  DOCUMENTATION = "DOCUMENTATION"; 
        public static readonly string  TOKENS = "TOKENS"; 
        public static readonly string  DESIGN = "DESIGN"; 
        public static readonly string  SVG = "SVG"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAuraDefinitionDefType o)
        {
            return o.Value;
        }

        public static implicit operator PickAuraDefinitionDefType(string s)
        {
            return new PickAuraDefinitionDefType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuraDefinitionDefType Parse(string text) => text;

        

    }
    public class PickAuraDefinitionFormatConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuraDefinitionFormat)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuraDefinitionFormat {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuraDefinitionFormatConverter))]
    public class PickAuraDefinitionFormat
    {
        public static readonly string  XML = "XML"; 
        public static readonly string  JS = "JS"; 
        public static readonly string  CSS = "CSS"; 
        public static readonly string  TEMPLATECSS = "TEMPLATE_CSS"; 
        public static readonly string  SVG = "SVG"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAuraDefinitionFormat o)
        {
            return o.Value;
        }

        public static implicit operator PickAuraDefinitionFormat(string s)
        {
            return new PickAuraDefinitionFormat {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuraDefinitionFormat Parse(string text) => text;

        

    }
    public class PickAuraDefinitionBundleLanguageConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuraDefinitionBundleLanguage)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuraDefinitionBundleLanguage {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuraDefinitionBundleLanguageConverter))]
    public class PickAuraDefinitionBundleLanguage
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAuraDefinitionBundleLanguage o)
        {
            return o.Value;
        }

        public static implicit operator PickAuraDefinitionBundleLanguage(string s)
        {
            return new PickAuraDefinitionBundleLanguage {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuraDefinitionBundleLanguage Parse(string text) => text;

        

    }
    public class PickAuthProviderProviderTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuthProviderProviderType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuthProviderProviderType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuthProviderProviderTypeConverter))]
    public class PickAuthProviderProviderType
    {
        public static readonly string  Facebook = "Facebook"; 
        public static readonly string  Janrain = "Janrain"; 
        public static readonly string  Salesforce = "Salesforce"; 
        public static readonly string  OpenIdConnect = "OpenIdConnect"; 
        public static readonly string  MicrosoftACS = "MicrosoftACS"; 
        public static readonly string  LinkedIn = "LinkedIn"; 
        public static readonly string  Twitter = "Twitter"; 
        public static readonly string  Google = "Google"; 
        public static readonly string  GitHub = "GitHub"; 
        public static readonly string  Custom = "Custom"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAuthProviderProviderType o)
        {
            return o.Value;
        }

        public static implicit operator PickAuthProviderProviderType(string s)
        {
            return new PickAuthProviderProviderType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuthProviderProviderType Parse(string text) => text;

        

    }
    public class PickAuthSessionUserTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuthSessionUserType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuthSessionUserType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuthSessionUserTypeConverter))]
    public class PickAuthSessionUserType
    {
        public static readonly string  Standard = "Standard"; 
        public static readonly string  PowerPartner = "PowerPartner"; 
        public static readonly string  PowerCustomerSuccess = "PowerCustomerSuccess"; 
        public static readonly string  CustomerSuccess = "CustomerSuccess"; 
        public static readonly string  Guest = "Guest"; 
        public static readonly string  CspLitePortal = "CspLitePortal"; 
        public static readonly string  CsnOnly = "CsnOnly"; 
        public static readonly string  SelfService = "SelfService"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAuthSessionUserType o)
        {
            return o.Value;
        }

        public static implicit operator PickAuthSessionUserType(string s)
        {
            return new PickAuthSessionUserType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuthSessionUserType Parse(string text) => text;

        

    }
    public class PickAuthSessionLoginTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuthSessionLoginType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuthSessionLoginType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuthSessionLoginTypeConverter))]
    public class PickAuthSessionLoginType
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickAuthSessionLoginType o)
        {
            return o.Value;
        }

        public static implicit operator PickAuthSessionLoginType(string s)
        {
            return new PickAuthSessionLoginType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuthSessionLoginType Parse(string text) => text;

        

    }
    public class PickAuthSessionSessionTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuthSessionSessionType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuthSessionSessionType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuthSessionSessionTypeConverter))]
    public class PickAuthSessionSessionType
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickAuthSessionSessionType o)
        {
            return o.Value;
        }

        public static implicit operator PickAuthSessionSessionType(string s)
        {
            return new PickAuthSessionSessionType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuthSessionSessionType Parse(string text) => text;

        

    }
    public class PickAuthSessionSessionSecurityLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickAuthSessionSessionSecurityLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickAuthSessionSessionSecurityLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickAuthSessionSessionSecurityLevelConverter))]
    public class PickAuthSessionSessionSecurityLevel
    {
        public static readonly string  LOW = "LOW"; 
        public static readonly string  STANDARD = "STANDARD"; 
        public static readonly string  HIGHASSURANCE = "HIGH_ASSURANCE"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickAuthSessionSessionSecurityLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickAuthSessionSessionSecurityLevel(string s)
        {
            return new PickAuthSessionSessionSecurityLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickAuthSessionSessionSecurityLevel Parse(string text) => text;

        

    }
    public class PickBusinessHoursTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickBusinessHoursTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickBusinessHoursTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickBusinessHoursTimeZoneSidKeyConverter))]
    public class PickBusinessHoursTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickBusinessHoursTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickBusinessHoursTimeZoneSidKey(string s)
        {
            return new PickBusinessHoursTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickBusinessHoursTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickBusinessProcessTableEnumOrIdConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickBusinessProcessTableEnumOrId)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickBusinessProcessTableEnumOrId {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickBusinessProcessTableEnumOrIdConverter))]
    public class PickBusinessProcessTableEnumOrId
    {
        public static readonly string  Case = "Case"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  Solution = "Solution"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickBusinessProcessTableEnumOrId o)
        {
            return o.Value;
        }

        public static implicit operator PickBusinessProcessTableEnumOrId(string s)
        {
            return new PickBusinessProcessTableEnumOrId {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickBusinessProcessTableEnumOrId Parse(string text) => text;

        

    }
    public class PickCampaignTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCampaignType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCampaignType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCampaignTypeConverter))]
    public class PickCampaignType
    {
        public static readonly string  Conference = "Conference"; 
        public static readonly string  Webinar = "Webinar"; 
        public static readonly string  TradeShow = "Trade Show"; 
        public static readonly string  PublicRelations = "Public Relations"; 
        public static readonly string  Partners = "Partners"; 
        public static readonly string  ReferralProgram = "Referral Program"; 
        public static readonly string  Advertisement = "Advertisement"; 
        public static readonly string  BannerAds = "Banner Ads"; 
        public static readonly string  DirectMail = "Direct Mail"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Telemarketing = "Telemarketing"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCampaignType o)
        {
            return o.Value;
        }

        public static implicit operator PickCampaignType(string s)
        {
            return new PickCampaignType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCampaignType Parse(string text) => text;

        

    }
    public class PickCampaignStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCampaignStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCampaignStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCampaignStatusConverter))]
    public class PickCampaignStatus
    {
        public static readonly string  Planned = "Planned"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Aborted = "Aborted"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCampaignStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCampaignStatus(string s)
        {
            return new PickCampaignStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCampaignStatus Parse(string text) => text;

        

    }
    public class PickCampaignFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCampaignFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCampaignFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCampaignFeedTypeConverter))]
    public class PickCampaignFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCampaignFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickCampaignFeedType(string s)
        {
            return new PickCampaignFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCampaignFeedType Parse(string text) => text;

        

    }
    public class PickCampaignMemberStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCampaignMemberStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCampaignMemberStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCampaignMemberStatusConverter))]
    public class PickCampaignMemberStatus
    {
        public static readonly string  Planned = "Planned"; 
        public static readonly string  Received = "Received"; 
        public static readonly string  Responded = "Responded"; 
        public static readonly string  Sent = "Sent"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCampaignMemberStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCampaignMemberStatus(string s)
        {
            return new PickCampaignMemberStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCampaignMemberStatus Parse(string text) => text;

        

    }
    public class PickCampaignShareCampaignAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCampaignShareCampaignAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCampaignShareCampaignAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCampaignShareCampaignAccessLevelConverter))]
    public class PickCampaignShareCampaignAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCampaignShareCampaignAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickCampaignShareCampaignAccessLevel(string s)
        {
            return new PickCampaignShareCampaignAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCampaignShareCampaignAccessLevel Parse(string text) => text;

        

    }
    public class PickCampaignShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCampaignShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCampaignShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCampaignShareRowCauseConverter))]
    public class PickCampaignShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCampaignShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickCampaignShareRowCause(string s)
        {
            return new PickCampaignShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCampaignShareRowCause Parse(string text) => text;

        

    }
    public class PickCaseTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseTypeConverter))]
    public class PickCaseType
    {
        public static readonly string  Mechanical = "Mechanical"; 
        public static readonly string  Electrical = "Electrical"; 
        public static readonly string  Electronic = "Electronic"; 
        public static readonly string  Structural = "Structural"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseType o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseType(string s)
        {
            return new PickCaseType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseType Parse(string text) => text;

        

    }
    public class PickCaseStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseStatusConverter))]
    public class PickCaseStatus
    {
        public static readonly string  New = "New"; 
        public static readonly string  Working = "Working"; 
        public static readonly string  Escalated = "Escalated"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseStatus(string s)
        {
            return new PickCaseStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseStatus Parse(string text) => text;

        

    }
    public class PickCaseReasonConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseReason)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseReason {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseReasonConverter))]
    public class PickCaseReason
    {
        public static readonly string  Installation = "Installation"; 
        public static readonly string  EquipmentComplexity = "Equipment Complexity"; 
        public static readonly string  Performance = "Performance"; 
        public static readonly string  Breakdown = "Breakdown"; 
        public static readonly string  EquipmentDesign = "Equipment Design"; 
        public static readonly string  Feedback = "Feedback"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseReason o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseReason(string s)
        {
            return new PickCaseReason {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseReason Parse(string text) => text;

        

    }
    public class PickCaseOriginConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseOrigin)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseOrigin {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseOriginConverter))]
    public class PickCaseOrigin
    {
        public static readonly string  Phone = "Phone"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Web = "Web"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseOrigin o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseOrigin(string s)
        {
            return new PickCaseOrigin {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseOrigin Parse(string text) => text;

        

    }
    public class PickCasePriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCasePriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCasePriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCasePriorityConverter))]
    public class PickCasePriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Low = "Low"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCasePriority o)
        {
            return o.Value;
        }

        public static implicit operator PickCasePriority(string s)
        {
            return new PickCasePriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCasePriority Parse(string text) => text;

        

    }
    public class PickCaseSLAViolationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseSLAViolation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseSLAViolation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseSLAViolationConverter))]
    public class PickCaseSLAViolation
    {
        public static readonly string  No = "No"; 
        public static readonly string  Yes = "Yes"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseSLAViolation o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseSLAViolation(string s)
        {
            return new PickCaseSLAViolation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseSLAViolation Parse(string text) => text;

        

    }
    public class PickCaseProductConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseProduct)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseProduct {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseProductConverter))]
    public class PickCaseProduct
    {
        public static readonly string  GC1040 = "GC1040"; 
        public static readonly string  GC1060 = "GC1060"; 
        public static readonly string  GC3020 = "GC3020"; 
        public static readonly string  GC3040 = "GC3040"; 
        public static readonly string  GC3060 = "GC3060"; 
        public static readonly string  GC5020 = "GC5020"; 
        public static readonly string  GC5040 = "GC5040"; 
        public static readonly string  GC5060 = "GC5060"; 
        public static readonly string  GC1020 = "GC1020"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseProduct o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseProduct(string s)
        {
            return new PickCaseProduct {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseProduct Parse(string text) => text;

        

    }
    public class PickCasePotentialLiabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCasePotentialLiability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCasePotentialLiability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCasePotentialLiabilityConverter))]
    public class PickCasePotentialLiability
    {
        public static readonly string  No = "No"; 
        public static readonly string  Yes = "Yes"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCasePotentialLiability o)
        {
            return o.Value;
        }

        public static implicit operator PickCasePotentialLiability(string s)
        {
            return new PickCasePotentialLiability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCasePotentialLiability Parse(string text) => text;

        

    }
    public class PickCaseContactRoleRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseContactRoleRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseContactRoleRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseContactRoleRoleConverter))]
    public class PickCaseContactRoleRole
    {
        public static readonly string  TechnicalContact = "Technical Contact"; 
        public static readonly string  BusinessContact = "Business Contact"; 
        public static readonly string  DecisionMaker = "Decision Maker"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseContactRoleRole o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseContactRoleRole(string s)
        {
            return new PickCaseContactRoleRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseContactRoleRole Parse(string text) => text;

        

    }
    public class PickCaseFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseFeedTypeConverter))]
    public class PickCaseFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseFeedType(string s)
        {
            return new PickCaseFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseFeedType Parse(string text) => text;

        

    }
    public class PickCaseHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseHistoryFieldConverter))]
    public class PickCaseHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  BusinessHours = "BusinessHours"; 
        public static readonly string  Origin = "Origin"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Reason = "Reason"; 
        public static readonly string  closed = "closed"; 
        public static readonly string  IsClosedOnCreate = "IsClosedOnCreate"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  created = "created"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  EngineeringReqNumberc = "EngineeringReqNumber__c"; 
        public static readonly string  IsEscalated = "IsEscalated"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  ownerEscalated = "ownerEscalated"; 
        public static readonly string  Parent = "Parent"; 
        public static readonly string  PotentialLiabilityc = "PotentialLiability__c"; 
        public static readonly string  Priority = "Priority"; 
        public static readonly string  Productc = "Product__c"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  SLAViolationc = "SLAViolation__c"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  Subject = "Subject"; 
        public static readonly string  Type = "Type"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseHistoryField(string s)
        {
            return new PickCaseHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseHistoryField Parse(string text) => text;

        

    }
    public class PickCaseShareCaseAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseShareCaseAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseShareCaseAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseShareCaseAccessLevelConverter))]
    public class PickCaseShareCaseAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseShareCaseAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseShareCaseAccessLevel(string s)
        {
            return new PickCaseShareCaseAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseShareCaseAccessLevel Parse(string text) => text;

        

    }
    public class PickCaseShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseShareRowCauseConverter))]
    public class PickCaseShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseShareRowCause(string s)
        {
            return new PickCaseShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseShareRowCause Parse(string text) => text;

        

    }
    public class PickCaseTeamRoleAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCaseTeamRoleAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCaseTeamRoleAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCaseTeamRoleAccessLevelConverter))]
    public class PickCaseTeamRoleAccessLevel
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCaseTeamRoleAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickCaseTeamRoleAccessLevel(string s)
        {
            return new PickCaseTeamRoleAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCaseTeamRoleAccessLevel Parse(string text) => text;

        

    }
    public class PickCategoryNodeSortStyleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCategoryNodeSortStyle)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCategoryNodeSortStyle {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCategoryNodeSortStyleConverter))]
    public class PickCategoryNodeSortStyle
    {
        public static readonly string  custom = "custom"; 
        public static readonly string  alphabetical = "alphabetical"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCategoryNodeSortStyle o)
        {
            return o.Value;
        }

        public static implicit operator PickCategoryNodeSortStyle(string s)
        {
            return new PickCategoryNodeSortStyle {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCategoryNodeSortStyle Parse(string text) => text;

        

    }
    public class PickCollaborationGroupCollaborationTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCollaborationGroupCollaborationType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCollaborationGroupCollaborationType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCollaborationGroupCollaborationTypeConverter))]
    public class PickCollaborationGroupCollaborationType
    {
        public static readonly string  Public = "Public"; 
        public static readonly string  Private = "Private"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCollaborationGroupCollaborationType o)
        {
            return o.Value;
        }

        public static implicit operator PickCollaborationGroupCollaborationType(string s)
        {
            return new PickCollaborationGroupCollaborationType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCollaborationGroupCollaborationType Parse(string text) => text;

        

    }
    public class PickCollaborationGroupFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCollaborationGroupFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCollaborationGroupFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCollaborationGroupFeedTypeConverter))]
    public class PickCollaborationGroupFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCollaborationGroupFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickCollaborationGroupFeedType(string s)
        {
            return new PickCollaborationGroupFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCollaborationGroupFeedType Parse(string text) => text;

        

    }
    public class PickCollaborationGroupMemberCollaborationRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCollaborationGroupMemberCollaborationRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCollaborationGroupMemberCollaborationRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCollaborationGroupMemberCollaborationRoleConverter))]
    public class PickCollaborationGroupMemberCollaborationRole
    {
        public static readonly string  Admin = "Admin"; 
        public static readonly string  Standard = "Standard"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCollaborationGroupMemberCollaborationRole o)
        {
            return o.Value;
        }

        public static implicit operator PickCollaborationGroupMemberCollaborationRole(string s)
        {
            return new PickCollaborationGroupMemberCollaborationRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCollaborationGroupMemberCollaborationRole Parse(string text) => text;

        

    }
    public class PickCollaborationGroupMemberNotificationFrequencyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCollaborationGroupMemberNotificationFrequency)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCollaborationGroupMemberNotificationFrequency {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCollaborationGroupMemberNotificationFrequencyConverter))]
    public class PickCollaborationGroupMemberNotificationFrequency
    {
        public static readonly string  P = "P"; 
        public static readonly string  D = "D"; 
        public static readonly string  W = "W"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCollaborationGroupMemberNotificationFrequency o)
        {
            return o.Value;
        }

        public static implicit operator PickCollaborationGroupMemberNotificationFrequency(string s)
        {
            return new PickCollaborationGroupMemberNotificationFrequency {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCollaborationGroupMemberNotificationFrequency Parse(string text) => text;

        

    }
    public class PickCollaborationGroupMemberRequestStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCollaborationGroupMemberRequestStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCollaborationGroupMemberRequestStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCollaborationGroupMemberRequestStatusConverter))]
    public class PickCollaborationGroupMemberRequestStatus
    {
        public static readonly string  Pending = "Pending"; 
        public static readonly string  Accepted = "Accepted"; 
        public static readonly string  Declined = "Declined"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCollaborationGroupMemberRequestStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCollaborationGroupMemberRequestStatus(string s)
        {
            return new PickCollaborationGroupMemberRequestStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCollaborationGroupMemberRequestStatus Parse(string text) => text;

        

    }
    public class PickCollaborationInvitationStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCollaborationInvitationStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCollaborationInvitationStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCollaborationInvitationStatusConverter))]
    public class PickCollaborationInvitationStatus
    {
        public static readonly string  Sent = "Sent"; 
        public static readonly string  Accepted = "Accepted"; 
        public static readonly string  Canceled = "Canceled"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCollaborationInvitationStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickCollaborationInvitationStatus(string s)
        {
            return new PickCollaborationInvitationStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCollaborationInvitationStatus Parse(string text) => text;

        

    }
    public class PickContactSalutationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactSalutation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactSalutation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactSalutationConverter))]
    public class PickContactSalutation
    {
        public static readonly string  Mr = "Mr."; 
        public static readonly string  Ms = "Ms."; 
        public static readonly string  Mrs = "Mrs."; 
        public static readonly string  Dr = "Dr."; 
        public static readonly string  Prof = "Prof."; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactSalutation o)
        {
            return o.Value;
        }

        public static implicit operator PickContactSalutation(string s)
        {
            return new PickContactSalutation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactSalutation Parse(string text) => text;

        

    }
    public class PickContactLeadSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactLeadSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactLeadSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactLeadSourceConverter))]
    public class PickContactLeadSource
    {
        public static readonly string  Web = "Web"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactLeadSource o)
        {
            return o.Value;
        }

        public static implicit operator PickContactLeadSource(string s)
        {
            return new PickContactLeadSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactLeadSource Parse(string text) => text;

        

    }
    public class PickContactCleanStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactCleanStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactCleanStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactCleanStatusConverter))]
    public class PickContactCleanStatus
    {
        public static readonly string  Matched = "Matched"; 
        public static readonly string  Different = "Different"; 
        public static readonly string  Acknowledged = "Acknowledged"; 
        public static readonly string  NotFound = "NotFound"; 
        public static readonly string  Inactive = "Inactive"; 
        public static readonly string  Pending = "Pending"; 
        public static readonly string  SelectMatch = "SelectMatch"; 
        public static readonly string  Skipped = "Skipped"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactCleanStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickContactCleanStatus(string s)
        {
            return new PickContactCleanStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactCleanStatus Parse(string text) => text;

        

    }
    public class PickContactLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactLevelConverter))]
    public class PickContactLevel
    {
        public static readonly string  Secondary = "Secondary"; 
        public static readonly string  Tertiary = "Tertiary"; 
        public static readonly string  Primary = "Primary"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickContactLevel(string s)
        {
            return new PickContactLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactLevel Parse(string text) => text;

        

    }
    public class PickContactCleanInfoContactStatusDataDotComConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactCleanInfoContactStatusDataDotCom)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactCleanInfoContactStatusDataDotCom {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactCleanInfoContactStatusDataDotComConverter))]
    public class PickContactCleanInfoContactStatusDataDotCom
    {
        public static readonly string  IsActiveContactDataDotCom = "IsActiveContactDataDotCom"; 
        public static readonly string  WrongPhoneDataDotCom = "WrongPhoneDataDotCom"; 
        public static readonly string  WrongEmailDataDotCom = "WrongEmailDataDotCom"; 
        public static readonly string  WrongPhoneAndEmailDataDotCom = "WrongPhoneAndEmailDataDotCom"; 
        public static readonly string  NotAtCompanyContactDataDotCom = "NotAtCompanyContactDataDotCom"; 
        public static readonly string  InactiveDataDotCom = "InactiveDataDotCom"; 
        public static readonly string  CompanyOutOfBusinessDataDotCom = "CompanyOutOfBusinessDataDotCom"; 
        public static readonly string  CompanyNeverExistedDataDotCom = "CompanyNeverExistedDataDotCom"; 
        public static readonly string  DeadEmailDomainDataDotCom = "DeadEmailDomainDataDotCom"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactCleanInfoContactStatusDataDotCom o)
        {
            return o.Value;
        }

        public static implicit operator PickContactCleanInfoContactStatusDataDotCom(string s)
        {
            return new PickContactCleanInfoContactStatusDataDotCom {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactCleanInfoContactStatusDataDotCom Parse(string text) => text;

        

    }
    public class PickContactFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactFeedTypeConverter))]
    public class PickContactFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickContactFeedType(string s)
        {
            return new PickContactFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactFeedType Parse(string text) => text;

        

    }
    public class PickContactHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactHistoryFieldConverter))]
    public class PickContactHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  AssistantName = "AssistantName"; 
        public static readonly string  AssistantPhone = "AssistantPhone"; 
        public static readonly string  Birthdate = "Birthdate"; 
        public static readonly string  CleanStatus = "CleanStatus"; 
        public static readonly string  contactMerged = "contactMerged"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  created = "created"; 
        public static readonly string  contactCreatedFromLead = "contactCreatedFromLead"; 
        public static readonly string  Jigsaw = "Jigsaw"; 
        public static readonly string  Department = "Department"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  DoNotCall = "DoNotCall"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  EmailBouncedDate = "EmailBouncedDate"; 
        public static readonly string  EmailBouncedReason = "EmailBouncedReason"; 
        public static readonly string  HasOptedOutOfEmail = "HasOptedOutOfEmail"; 
        public static readonly string  Fax = "Fax"; 
        public static readonly string  HasOptedOutOfFax = "HasOptedOutOfFax"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FirstName = "FirstName"; 
        public static readonly string  HomePhone = "HomePhone"; 
        public static readonly string  Languagesc = "Languages__c"; 
        public static readonly string  LastName = "LastName"; 
        public static readonly string  contactUpdatedByLead = "contactUpdatedByLead"; 
        public static readonly string  LeadSource = "LeadSource"; 
        public static readonly string  Levelc = "Level__c"; 
        public static readonly string  MailingAddress = "MailingAddress"; 
        public static readonly string  MailingCity = "MailingCity"; 
        public static readonly string  MailingCountry = "MailingCountry"; 
        public static readonly string  MailingGeocodeAccuracy = "MailingGeocodeAccuracy"; 
        public static readonly string  MailingLatitude = "MailingLatitude"; 
        public static readonly string  MailingLongitude = "MailingLongitude"; 
        public static readonly string  MailingState = "MailingState"; 
        public static readonly string  MailingStreet = "MailingStreet"; 
        public static readonly string  MailingPostalCode = "MailingPostalCode"; 
        public static readonly string  MobilePhone = "MobilePhone"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  OtherAddress = "OtherAddress"; 
        public static readonly string  OtherCity = "OtherCity"; 
        public static readonly string  OtherCountry = "OtherCountry"; 
        public static readonly string  OtherGeocodeAccuracy = "OtherGeocodeAccuracy"; 
        public static readonly string  OtherLatitude = "OtherLatitude"; 
        public static readonly string  OtherLongitude = "OtherLongitude"; 
        public static readonly string  OtherPhone = "OtherPhone"; 
        public static readonly string  OtherState = "OtherState"; 
        public static readonly string  OtherStreet = "OtherStreet"; 
        public static readonly string  OtherPostalCode = "OtherPostalCode"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Phone = "Phone"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  ReportsTo = "ReportsTo"; 
        public static readonly string  Salutation = "Salutation"; 
        public static readonly string  Title = "Title"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickContactHistoryField(string s)
        {
            return new PickContactHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactHistoryField Parse(string text) => text;

        

    }
    public class PickContactShareContactAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactShareContactAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactShareContactAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactShareContactAccessLevelConverter))]
    public class PickContactShareContactAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactShareContactAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickContactShareContactAccessLevel(string s)
        {
            return new PickContactShareContactAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactShareContactAccessLevel Parse(string text) => text;

        

    }
    public class PickContactShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContactShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContactShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContactShareRowCauseConverter))]
    public class PickContactShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContactShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickContactShareRowCause(string s)
        {
            return new PickContactShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContactShareRowCause Parse(string text) => text;

        

    }
    public class PickContentDocumentPublishStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentDocumentPublishStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentDocumentPublishStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentDocumentPublishStatusConverter))]
    public class PickContentDocumentPublishStatus
    {
        public static readonly string  U = "U"; 
        public static readonly string  P = "P"; 
        public static readonly string  R = "R"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentDocumentPublishStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickContentDocumentPublishStatus(string s)
        {
            return new PickContentDocumentPublishStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentDocumentPublishStatus Parse(string text) => text;

        

    }
    public class PickContentDocumentFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentDocumentFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentDocumentFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentDocumentFeedTypeConverter))]
    public class PickContentDocumentFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentDocumentFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickContentDocumentFeedType(string s)
        {
            return new PickContentDocumentFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentDocumentFeedType Parse(string text) => text;

        

    }
    public class PickContentDocumentHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentDocumentHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentDocumentHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentDocumentHistoryFieldConverter))]
    public class PickContentDocumentHistoryField
    {
        public static readonly string  ArchivedBy = "ArchivedBy"; 
        public static readonly string  ArchivedDate = "ArchivedDate"; 
        public static readonly string  ContentAsset = "ContentAsset"; 
        public static readonly string  created = "created"; 
        public static readonly string  DeletedBy = "DeletedBy"; 
        public static readonly string  DeletedDate = "DeletedDate"; 
        public static readonly string  contentDocPublished = "contentDocPublished"; 
        public static readonly string  contentDocFeatured = "contentDocFeatured"; 
        public static readonly string  contentDocRepublished = "contentDocRepublished"; 
        public static readonly string  contentDocUnpublished = "contentDocUnpublished"; 
        public static readonly string  contentDocSubscribed = "contentDocSubscribed"; 
        public static readonly string  contentDocUnsubscribed = "contentDocUnsubscribed"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  IsArchived = "IsArchived"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Parent = "Parent"; 
        public static readonly string  PublishStatus = "PublishStatus"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  Title = "Title"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentDocumentHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickContentDocumentHistoryField(string s)
        {
            return new PickContentDocumentHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentDocumentHistoryField Parse(string text) => text;

        

    }
    public class PickContentDocumentLinkShareTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentDocumentLinkShareType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentDocumentLinkShareType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentDocumentLinkShareTypeConverter))]
    public class PickContentDocumentLinkShareType
    {
        public static readonly string  V = "V"; 
        public static readonly string  C = "C"; 
        public static readonly string  I = "I"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentDocumentLinkShareType o)
        {
            return o.Value;
        }

        public static implicit operator PickContentDocumentLinkShareType(string s)
        {
            return new PickContentDocumentLinkShareType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentDocumentLinkShareType Parse(string text) => text;

        

    }
    public class PickContentDocumentLinkVisibilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentDocumentLinkVisibility)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentDocumentLinkVisibility {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentDocumentLinkVisibilityConverter))]
    public class PickContentDocumentLinkVisibility
    {
        public static readonly string  AllUsers = "AllUsers"; 
        public static readonly string  InternalUsers = "InternalUsers"; 
        public static readonly string  SharedUsers = "SharedUsers"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentDocumentLinkVisibility o)
        {
            return o.Value;
        }

        public static implicit operator PickContentDocumentLinkVisibility(string s)
        {
            return new PickContentDocumentLinkVisibility {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentDocumentLinkVisibility Parse(string text) => text;

        

    }
    public class PickContentVersionPublishStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentVersionPublishStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentVersionPublishStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentVersionPublishStatusConverter))]
    public class PickContentVersionPublishStatus
    {
        public static readonly string  U = "U"; 
        public static readonly string  P = "P"; 
        public static readonly string  R = "R"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentVersionPublishStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickContentVersionPublishStatus(string s)
        {
            return new PickContentVersionPublishStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentVersionPublishStatus Parse(string text) => text;

        

    }
    public class PickContentVersionOriginConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentVersionOrigin)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentVersionOrigin {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentVersionOriginConverter))]
    public class PickContentVersionOrigin
    {
        public static readonly string  C = "C"; 
        public static readonly string  H = "H"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentVersionOrigin o)
        {
            return o.Value;
        }

        public static implicit operator PickContentVersionOrigin(string s)
        {
            return new PickContentVersionOrigin {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentVersionOrigin Parse(string text) => text;

        

    }
    public class PickContentVersionContentLocationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentVersionContentLocation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentVersionContentLocation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentVersionContentLocationConverter))]
    public class PickContentVersionContentLocation
    {
        public static readonly string  S = "S"; 
        public static readonly string  E = "E"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentVersionContentLocation o)
        {
            return o.Value;
        }

        public static implicit operator PickContentVersionContentLocation(string s)
        {
            return new PickContentVersionContentLocation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentVersionContentLocation Parse(string text) => text;

        

    }
    public class PickContentVersionHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentVersionHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentVersionHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentVersionHistoryFieldConverter))]
    public class PickContentVersionHistoryField
    {
        public static readonly string  ContentUrl = "ContentUrl"; 
        public static readonly string  created = "created"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  ExternalDataSource = "ExternalDataSource"; 
        public static readonly string  ExternalDocumentInfo1 = "ExternalDocumentInfo1"; 
        public static readonly string  ExternalDocumentInfo2 = "ExternalDocumentInfo2"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  Language = "Language"; 
        public static readonly string  IsMajorVersion = "IsMajorVersion"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  SharingOption = "SharingOption"; 
        public static readonly string  ReasonForChange = "ReasonForChange"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  Title = "Title"; 
        public static readonly string  contentVersionCommented = "contentVersionCommented"; 
        public static readonly string  contentVersionCreated = "contentVersionCreated"; 
        public static readonly string  contentVersionDataReplaced = "contentVersionDataReplaced"; 
        public static readonly string  contentVersionDeleted = "contentVersionDeleted"; 
        public static readonly string  contentVersionDownloaded = "contentVersionDownloaded"; 
        public static readonly string  contentVersionRated = "contentVersionRated"; 
        public static readonly string  contentVersionUpdated = "contentVersionUpdated"; 
        public static readonly string  contentVersionViewed = "contentVersionViewed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentVersionHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickContentVersionHistoryField(string s)
        {
            return new PickContentVersionHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentVersionHistoryField Parse(string text) => text;

        

    }
    public class PickContentWorkspaceTagModelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContentWorkspaceTagModel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContentWorkspaceTagModel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContentWorkspaceTagModelConverter))]
    public class PickContentWorkspaceTagModel
    {
        public static readonly string  U = "U"; 
        public static readonly string  G = "G"; 
        public static readonly string  R = "R"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContentWorkspaceTagModel o)
        {
            return o.Value;
        }

        public static implicit operator PickContentWorkspaceTagModel(string s)
        {
            return new PickContentWorkspaceTagModel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContentWorkspaceTagModel Parse(string text) => text;

        

    }
    public class PickContractOwnerExpirationNoticeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractOwnerExpirationNotice)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractOwnerExpirationNotice {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractOwnerExpirationNoticeConverter))]
    public class PickContractOwnerExpirationNotice
    {
        public static readonly string _15 = "15"; 
        public static readonly string _30 = "30"; 
        public static readonly string _45 = "45"; 
        public static readonly string _60 = "60"; 
        public static readonly string _90 = "90"; 
        public static readonly string _120 = "120"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractOwnerExpirationNotice o)
        {
            return o.Value;
        }

        public static implicit operator PickContractOwnerExpirationNotice(string s)
        {
            return new PickContractOwnerExpirationNotice {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractOwnerExpirationNotice Parse(string text) => text;

        

    }
    public class PickContractStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractStatusConverter))]
    public class PickContractStatus
    {
        public static readonly string  InApprovalProcess = "In Approval Process"; 
        public static readonly string  Activated = "Activated"; 
        public static readonly string  Draft = "Draft"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickContractStatus(string s)
        {
            return new PickContractStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractStatus Parse(string text) => text;

        

    }
    public class PickContractStatusCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractStatusCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractStatusCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractStatusCodeConverter))]
    public class PickContractStatusCode
    {
        public static readonly string  Draft = "Draft"; 
        public static readonly string  InApproval = "InApproval"; 
        public static readonly string  Activated = "Activated"; 
        public static readonly string  Terminated = "Terminated"; 
        public static readonly string  Expired = "Expired"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractStatusCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContractStatusCode(string s)
        {
            return new PickContractStatusCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractStatusCode Parse(string text) => text;

        

    }
    public class PickContractContactRoleRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractContactRoleRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractContactRoleRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractContactRoleRoleConverter))]
    public class PickContractContactRoleRole
    {
        public static readonly string  BusinessUser = "Business User"; 
        public static readonly string  DecisionMaker = "Decision Maker"; 
        public static readonly string  EconomicBuyer = "Economic Buyer"; 
        public static readonly string  EconomicDecisionMaker = "Economic Decision Maker"; 
        public static readonly string  Evaluator = "Evaluator"; 
        public static readonly string  ExecutiveSponsor = "Executive Sponsor"; 
        public static readonly string  Influencer = "Influencer"; 
        public static readonly string  TechnicalBuyer = "Technical Buyer"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractContactRoleRole o)
        {
            return o.Value;
        }

        public static implicit operator PickContractContactRoleRole(string s)
        {
            return new PickContractContactRoleRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractContactRoleRole Parse(string text) => text;

        

    }
    public class PickContractFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractFeedTypeConverter))]
    public class PickContractFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickContractFeedType(string s)
        {
            return new PickContractFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractFeedType Parse(string text) => text;

        

    }
    public class PickContractHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractHistoryFieldConverter))]
    public class PickContractHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  ActivatedBy = "ActivatedBy"; 
        public static readonly string  ActivatedDate = "ActivatedDate"; 
        public static readonly string  BillingAddress = "BillingAddress"; 
        public static readonly string  BillingCity = "BillingCity"; 
        public static readonly string  BillingCountry = "BillingCountry"; 
        public static readonly string  BillingGeocodeAccuracy = "BillingGeocodeAccuracy"; 
        public static readonly string  BillingLatitude = "BillingLatitude"; 
        public static readonly string  BillingLongitude = "BillingLongitude"; 
        public static readonly string  BillingState = "BillingState"; 
        public static readonly string  BillingStreet = "BillingStreet"; 
        public static readonly string  BillingPostalCode = "BillingPostalCode"; 
        public static readonly string  CompanySigned = "CompanySigned"; 
        public static readonly string  CompanySignedDate = "CompanySignedDate"; 
        public static readonly string  contractActivation = "contractActivation"; 
        public static readonly string  contractApproval = "contractApproval"; 
        public static readonly string  contractConversion = "contractConversion"; 
        public static readonly string  contractDraft = "contractDraft"; 
        public static readonly string  EndDate = "EndDate"; 
        public static readonly string  contractExpiration = "contractExpiration"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  StartDate = "StartDate"; 
        public static readonly string  ContractTerm = "ContractTerm"; 
        public static readonly string  contractTermination = "contractTermination"; 
        public static readonly string  created = "created"; 
        public static readonly string  CustomerSigned = "CustomerSigned"; 
        public static readonly string  CustomerSignedDate = "CustomerSignedDate"; 
        public static readonly string  CustomerSignedTitle = "CustomerSignedTitle"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  OwnerExpirationNotice = "OwnerExpirationNotice"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  ShippingAddress = "ShippingAddress"; 
        public static readonly string  ShippingCity = "ShippingCity"; 
        public static readonly string  ShippingCountry = "ShippingCountry"; 
        public static readonly string  ShippingGeocodeAccuracy = "ShippingGeocodeAccuracy"; 
        public static readonly string  ShippingLatitude = "ShippingLatitude"; 
        public static readonly string  ShippingLongitude = "ShippingLongitude"; 
        public static readonly string  ShippingState = "ShippingState"; 
        public static readonly string  ShippingStreet = "ShippingStreet"; 
        public static readonly string  ShippingPostalCode = "ShippingPostalCode"; 
        public static readonly string  SpecialTerms = "SpecialTerms"; 
        public static readonly string  Status = "Status"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickContractHistoryField(string s)
        {
            return new PickContractHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractHistoryField Parse(string text) => text;

        

    }
    public class PickContractStatusStatusCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickContractStatusStatusCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickContractStatusStatusCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickContractStatusStatusCodeConverter))]
    public class PickContractStatusStatusCode
    {
        public static readonly string  Draft = "Draft"; 
        public static readonly string  InApproval = "InApproval"; 
        public static readonly string  Activated = "Activated"; 
        public static readonly string  Terminated = "Terminated"; 
        public static readonly string  Expired = "Expired"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickContractStatusStatusCode o)
        {
            return o.Value;
        }

        public static implicit operator PickContractStatusStatusCode(string s)
        {
            return new PickContractStatusStatusCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickContractStatusStatusCode Parse(string text) => text;

        

    }
    public class PickCronJobDetailJobTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCronJobDetailJobType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCronJobDetailJobType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCronJobDetailJobTypeConverter))]
    public class PickCronJobDetailJobType
    {
        public static readonly string _1 = "1"; 
        public static readonly string _3 = "3"; 
        public static readonly string _4 = "4"; 
        public static readonly string _7 = "7"; 
        public static readonly string _8 = "8"; 
        public static readonly string _9 = "9"; 
        public static readonly string  A = "A"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCronJobDetailJobType o)
        {
            return o.Value;
        }

        public static implicit operator PickCronJobDetailJobType(string s)
        {
            return new PickCronJobDetailJobType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCronJobDetailJobType Parse(string text) => text;

        

    }
    public class PickCronTriggerTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCronTriggerTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCronTriggerTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCronTriggerTimeZoneSidKeyConverter))]
    public class PickCronTriggerTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCronTriggerTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickCronTriggerTimeZoneSidKey(string s)
        {
            return new PickCronTriggerTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCronTriggerTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickCustomBrandAssetAssetCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickCustomBrandAssetAssetCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickCustomBrandAssetAssetCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickCustomBrandAssetAssetCategoryConverter))]
    public class PickCustomBrandAssetAssetCategory
    {
        public static readonly string  MotifZeronaryColor = "MotifZeronaryColor"; 
        public static readonly string  MotifPrimaryColor = "MotifPrimaryColor"; 
        public static readonly string  MotifSecondaryColor = "MotifSecondaryColor"; 
        public static readonly string  MotifTertiaryColor = "MotifTertiaryColor"; 
        public static readonly string  MotifQuaternaryColor = "MotifQuaternaryColor"; 
        public static readonly string  MotifZeronaryComplementColor = "MotifZeronaryComplementColor"; 
        public static readonly string  MotifPrimaryComplementColor = "MotifPrimaryComplementColor"; 
        public static readonly string  MotifTertiaryComplementColor = "MotifTertiaryComplementColor"; 
        public static readonly string  MotifQuaternaryComplementColor = "MotifQuaternaryComplementColor"; 
        public static readonly string  PageHeader = "PageHeader"; 
        public static readonly string  PageFooter = "PageFooter"; 
        public static readonly string  LoginFooterText = "LoginFooterText"; 
        public static readonly string  LoginLogoImageId = "LoginLogoImageId"; 
        public static readonly string  LargeLogoImageId = "LargeLogoImageId"; 
        public static readonly string  SmallLogoImageId = "SmallLogoImageId"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickCustomBrandAssetAssetCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickCustomBrandAssetAssetCategory(string s)
        {
            return new PickCustomBrandAssetAssetCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickCustomBrandAssetAssetCategory Parse(string text) => text;

        

    }
    public class PickDandBCompanyPublicIndicatorConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyPublicIndicator)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyPublicIndicator {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyPublicIndicatorConverter))]
    public class PickDandBCompanyPublicIndicator
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyPublicIndicator o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyPublicIndicator(string s)
        {
            return new PickDandBCompanyPublicIndicator {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyPublicIndicator Parse(string text) => text;

        

    }
    public class PickDandBCompanyOutOfBusinessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyOutOfBusiness)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyOutOfBusiness {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyOutOfBusinessConverter))]
    public class PickDandBCompanyOutOfBusiness
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyOutOfBusiness o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyOutOfBusiness(string s)
        {
            return new PickDandBCompanyOutOfBusiness {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyOutOfBusiness Parse(string text) => text;

        

    }
    public class PickDandBCompanyOwnOrRentConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyOwnOrRent)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyOwnOrRent {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyOwnOrRentConverter))]
    public class PickDandBCompanyOwnOrRent
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyOwnOrRent o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyOwnOrRent(string s)
        {
            return new PickDandBCompanyOwnOrRent {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyOwnOrRent Parse(string text) => text;

        

    }
    public class PickDandBCompanyEmployeesHereReliabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyEmployeesHereReliability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyEmployeesHereReliability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyEmployeesHereReliabilityConverter))]
    public class PickDandBCompanyEmployeesHereReliability
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyEmployeesHereReliability o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyEmployeesHereReliability(string s)
        {
            return new PickDandBCompanyEmployeesHereReliability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyEmployeesHereReliability Parse(string text) => text;

        

    }
    public class PickDandBCompanySalesVolumeReliabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanySalesVolumeReliability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanySalesVolumeReliability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanySalesVolumeReliabilityConverter))]
    public class PickDandBCompanySalesVolumeReliability
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanySalesVolumeReliability o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanySalesVolumeReliability(string s)
        {
            return new PickDandBCompanySalesVolumeReliability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanySalesVolumeReliability Parse(string text) => text;

        

    }
    public class PickDandBCompanyCurrencyCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyCurrencyCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyCurrencyCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyCurrencyCodeConverter))]
    public class PickDandBCompanyCurrencyCode
    {
        public static readonly string _0010 = "0010"; 
        public static readonly string _0020 = "0020"; 
        public static readonly string _0030 = "0030"; 
        public static readonly string _0040 = "0040"; 
        public static readonly string _0050 = "0050"; 
        public static readonly string _0070 = "0070"; 
        public static readonly string _0075 = "0075"; 
        public static readonly string _0090 = "0090"; 
        public static readonly string _0095 = "0095"; 
        public static readonly string _0100 = "0100"; 
        public static readonly string _0105 = "0105"; 
        public static readonly string _0110 = "0110"; 
        public static readonly string _0120 = "0120"; 
        public static readonly string _0140 = "0140"; 
        public static readonly string _0150 = "0150"; 
        public static readonly string _0155 = "0155"; 
        public static readonly string _0160 = "0160"; 
        public static readonly string _0190 = "0190"; 
        public static readonly string _0220 = "0220"; 
        public static readonly string _0230 = "0230"; 
        public static readonly string _0250 = "0250"; 
        public static readonly string _0270 = "0270"; 
        public static readonly string _0280 = "0280"; 
        public static readonly string _0290 = "0290"; 
        public static readonly string _0305 = "0305"; 
        public static readonly string _0310 = "0310"; 
        public static readonly string _0320 = "0320"; 
        public static readonly string _0330 = "0330"; 
        public static readonly string _0370 = "0370"; 
        public static readonly string _0380 = "0380"; 
        public static readonly string _0390 = "0390"; 
        public static readonly string _0400 = "0400"; 
        public static readonly string _0410 = "0410"; 
        public static readonly string _0420 = "0420"; 
        public static readonly string _0430 = "0430"; 
        public static readonly string _0440 = "0440"; 
        public static readonly string _0450 = "0450"; 
        public static readonly string _0460 = "0460"; 
        public static readonly string _0470 = "0470"; 
        public static readonly string _0480 = "0480"; 
        public static readonly string _0490 = "0490"; 
        public static readonly string _0500 = "0500"; 
        public static readonly string _0520 = "0520"; 
        public static readonly string _0530 = "0530"; 
        public static readonly string _0540 = "0540"; 
        public static readonly string _0550 = "0550"; 
        public static readonly string _0552 = "0552"; 
        public static readonly string _0560 = "0560"; 
        public static readonly string _0580 = "0580"; 
        public static readonly string _0585 = "0585"; 
        public static readonly string _0590 = "0590"; 
        public static readonly string _0595 = "0595"; 
        public static readonly string _0600 = "0600"; 
        public static readonly string _0605 = "0605"; 
        public static readonly string _0620 = "0620"; 
        public static readonly string _0630 = "0630"; 
        public static readonly string _0640 = "0640"; 
        public static readonly string _0650 = "0650"; 
        public static readonly string _0690 = "0690"; 
        public static readonly string _0700 = "0700"; 
        public static readonly string _0710 = "0710"; 
        public static readonly string _0720 = "0720"; 
        public static readonly string _0730 = "0730"; 
        public static readonly string _0750 = "0750"; 
        public static readonly string _0760 = "0760"; 
        public static readonly string _0770 = "0770"; 
        public static readonly string _0780 = "0780"; 
        public static readonly string _0790 = "0790"; 
        public static readonly string _0800 = "0800"; 
        public static readonly string _0820 = "0820"; 
        public static readonly string _0830 = "0830"; 
        public static readonly string _0840 = "0840"; 
        public static readonly string _0860 = "0860"; 
        public static readonly string _0870 = "0870"; 
        public static readonly string _0880 = "0880"; 
        public static readonly string _0890 = "0890"; 
        public static readonly string _0900 = "0900"; 
        public static readonly string _0910 = "0910"; 
        public static readonly string _0920 = "0920"; 
        public static readonly string _0940 = "0940"; 
        public static readonly string _0960 = "0960"; 
        public static readonly string _0970 = "0970"; 
        public static readonly string _1000 = "1000"; 
        public static readonly string _1010 = "1010"; 
        public static readonly string _1020 = "1020"; 
        public static readonly string _1030 = "1030"; 
        public static readonly string _1040 = "1040"; 
        public static readonly string _1060 = "1060"; 
        public static readonly string _1070 = "1070"; 
        public static readonly string _1080 = "1080"; 
        public static readonly string _1090 = "1090"; 
        public static readonly string _2000 = "2000"; 
        public static readonly string _2010 = "2010"; 
        public static readonly string _2020 = "2020"; 
        public static readonly string _2040 = "2040"; 
        public static readonly string _2060 = "2060"; 
        public static readonly string _2070 = "2070"; 
        public static readonly string _2080 = "2080"; 
        public static readonly string _2090 = "2090"; 
        public static readonly string _3000 = "3000"; 
        public static readonly string _3010 = "3010"; 
        public static readonly string _3020 = "3020"; 
        public static readonly string _3030 = "3030"; 
        public static readonly string _3040 = "3040"; 
        public static readonly string _3060 = "3060"; 
        public static readonly string _3070 = "3070"; 
        public static readonly string _3075 = "3075"; 
        public static readonly string _3085 = "3085"; 
        public static readonly string _3090 = "3090"; 
        public static readonly string _4000 = "4000"; 
        public static readonly string _4010 = "4010"; 
        public static readonly string _4020 = "4020"; 
        public static readonly string _4030 = "4030"; 
        public static readonly string _4040 = "4040"; 
        public static readonly string _4060 = "4060"; 
        public static readonly string _4070 = "4070"; 
        public static readonly string _4090 = "4090"; 
        public static readonly string _5005 = "5005"; 
        public static readonly string _5010 = "5010"; 
        public static readonly string _5020 = "5020"; 
        public static readonly string _5030 = "5030"; 
        public static readonly string _5040 = "5040"; 
        public static readonly string _5080 = "5080"; 
        public static readonly string _5090 = "5090"; 
        public static readonly string _6000 = "6000"; 
        public static readonly string _6030 = "6030"; 
        public static readonly string _6040 = "6040"; 
        public static readonly string _6050 = "6050"; 
        public static readonly string _6060 = "6060"; 
        public static readonly string _6100 = "6100"; 
        public static readonly string _6200 = "6200"; 
        public static readonly string _6300 = "6300"; 
        public static readonly string _6400 = "6400"; 
        public static readonly string _6500 = "6500"; 
        public static readonly string _6600 = "6600"; 
        public static readonly string _6800 = "6800"; 
        public static readonly string _6900 = "6900"; 
        public static readonly string _7200 = "7200"; 
        public static readonly string _7500 = "7500"; 
        public static readonly string _7600 = "7600"; 
        public static readonly string _8000 = "8000"; 
        public static readonly string _8100 = "8100"; 
        public static readonly string _8300 = "8300"; 
        public static readonly string _8500 = "8500"; 
        public static readonly string _8700 = "8700"; 
        public static readonly string _8800 = "8800"; 
        public static readonly string _8900 = "8900"; 
        public static readonly string _9000 = "9000"; 
        public static readonly string _9100 = "9100"; 
        public static readonly string _9300 = "9300"; 
        public static readonly string _9410 = "9410"; 
        public static readonly string _9430 = "9430"; 
        public static readonly string _9440 = "9440"; 
        public static readonly string _9450 = "9450"; 
        public static readonly string _9460 = "9460"; 
        public static readonly string _9470 = "9470"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyCurrencyCode o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyCurrencyCode(string s)
        {
            return new PickDandBCompanyCurrencyCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyCurrencyCode Parse(string text) => text;

        

    }
    public class PickDandBCompanyLegalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyLegalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyLegalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyLegalStatusConverter))]
    public class PickDandBCompanyLegalStatus
    {
        public static readonly string _100 = "100"; 
        public static readonly string _101 = "101"; 
        public static readonly string _118 = "118"; 
        public static readonly string _012 = "012"; 
        public static readonly string _120 = "120"; 
        public static readonly string _013 = "013"; 
        public static readonly string _003 = "003"; 
        public static readonly string _050 = "050"; 
        public static readonly string _008 = "008"; 
        public static readonly string _000 = "000"; 
        public static readonly string _009 = "009"; 
        public static readonly string _010 = "010"; 
        public static readonly string _011 = "011"; 
        public static readonly string _014 = "014"; 
        public static readonly string _015 = "015"; 
        public static readonly string _030 = "030"; 
        public static readonly string _070 = "070"; 
        public static readonly string _080 = "080"; 
        public static readonly string _090 = "090"; 
        public static readonly string _099 = "099"; 
        public static readonly string _102 = "102"; 
        public static readonly string _103 = "103"; 
        public static readonly string _104 = "104"; 
        public static readonly string _105 = "105"; 
        public static readonly string _106 = "106"; 
        public static readonly string _107 = "107"; 
        public static readonly string _108 = "108"; 
        public static readonly string _109 = "109"; 
        public static readonly string _110 = "110"; 
        public static readonly string _111 = "111"; 
        public static readonly string _112 = "112"; 
        public static readonly string _113 = "113"; 
        public static readonly string _114 = "114"; 
        public static readonly string _115 = "115"; 
        public static readonly string _116 = "116"; 
        public static readonly string _117 = "117"; 
        public static readonly string _119 = "119"; 
        public static readonly string _121 = "121"; 
        public static readonly string _122 = "122"; 
        public static readonly string _125 = "125"; 
        public static readonly string _126 = "126"; 
        public static readonly string _127 = "127"; 
        public static readonly string _128 = "128"; 
        public static readonly string _129 = "129"; 
        public static readonly string _130 = "130"; 
        public static readonly string _131 = "131"; 
        public static readonly string _132 = "132"; 
        public static readonly string _133 = "133"; 
        public static readonly string _140 = "140"; 
        public static readonly string _142 = "142"; 
        public static readonly string _143 = "143"; 
        public static readonly string _144 = "144"; 
        public static readonly string _145 = "145"; 
        public static readonly string _146 = "146"; 
        public static readonly string _147 = "147"; 
        public static readonly string _148 = "148"; 
        public static readonly string _149 = "149"; 
        public static readonly string _150 = "150"; 
        public static readonly string _151 = "151"; 
        public static readonly string _152 = "152"; 
        public static readonly string _153 = "153"; 
        public static readonly string _154 = "154"; 
        public static readonly string _155 = "155"; 
        public static readonly string _160 = "160"; 
        public static readonly string _161 = "161"; 
        public static readonly string _162 = "162"; 
        public static readonly string _163 = "163"; 
        public static readonly string _164 = "164"; 
        public static readonly string _166 = "166"; 
        public static readonly string _167 = "167"; 
        public static readonly string _168 = "168"; 
        public static readonly string _169 = "169"; 
        public static readonly string _170 = "170"; 
        public static readonly string _171 = "171"; 
        public static readonly string _180 = "180"; 
        public static readonly string _185 = "185"; 
        public static readonly string _186 = "186"; 
        public static readonly string _190 = "190"; 
        public static readonly string _200 = "200"; 
        public static readonly string _202 = "202"; 
        public static readonly string _204 = "204"; 
        public static readonly string _206 = "206"; 
        public static readonly string _208 = "208"; 
        public static readonly string _210 = "210"; 
        public static readonly string _212 = "212"; 
        public static readonly string _214 = "214"; 
        public static readonly string _216 = "216"; 
        public static readonly string _218 = "218"; 
        public static readonly string _220 = "220"; 
        public static readonly string _222 = "222"; 
        public static readonly string _224 = "224"; 
        public static readonly string _226 = "226"; 
        public static readonly string _228 = "228"; 
        public static readonly string _230 = "230"; 
        public static readonly string _232 = "232"; 
        public static readonly string _234 = "234"; 
        public static readonly string _236 = "236"; 
        public static readonly string _238 = "238"; 
        public static readonly string _240 = "240"; 
        public static readonly string _242 = "242"; 
        public static readonly string _244 = "244"; 
        public static readonly string _246 = "246"; 
        public static readonly string _248 = "248"; 
        public static readonly string _250 = "250"; 
        public static readonly string _252 = "252"; 
        public static readonly string _254 = "254"; 
        public static readonly string _256 = "256"; 
        public static readonly string _260 = "260"; 
        public static readonly string _270 = "270"; 
        public static readonly string _280 = "280"; 
        public static readonly string _290 = "290"; 
        public static readonly string _300 = "300"; 
        public static readonly string _301 = "301"; 
        public static readonly string _302 = "302"; 
        public static readonly string _304 = "304"; 
        public static readonly string _306 = "306"; 
        public static readonly string _308 = "308"; 
        public static readonly string _310 = "310"; 
        public static readonly string _312 = "312"; 
        public static readonly string _314 = "314"; 
        public static readonly string _316 = "316"; 
        public static readonly string _318 = "318"; 
        public static readonly string _320 = "320"; 
        public static readonly string _322 = "322"; 
        public static readonly string _324 = "324"; 
        public static readonly string _326 = "326"; 
        public static readonly string _328 = "328"; 
        public static readonly string _330 = "330"; 
        public static readonly string _332 = "332"; 
        public static readonly string _334 = "334"; 
        public static readonly string _336 = "336"; 
        public static readonly string _338 = "338"; 
        public static readonly string _340 = "340"; 
        public static readonly string _342 = "342"; 
        public static readonly string _344 = "344"; 
        public static readonly string _346 = "346"; 
        public static readonly string _350 = "350"; 
        public static readonly string _360 = "360"; 
        public static readonly string _370 = "370"; 
        public static readonly string _380 = "380"; 
        public static readonly string _390 = "390"; 
        public static readonly string _400 = "400"; 
        public static readonly string _410 = "410"; 
        public static readonly string _420 = "420"; 
        public static readonly string _430 = "430"; 
        public static readonly string _440 = "440"; 
        public static readonly string _450 = "450"; 
        public static readonly string _451 = "451"; 
        public static readonly string _452 = "452"; 
        public static readonly string _460 = "460"; 
        public static readonly string _470 = "470"; 
        public static readonly string _480 = "480"; 
        public static readonly string _490 = "490"; 
        public static readonly string _500 = "500"; 
        public static readonly string _502 = "502"; 
        public static readonly string _510 = "510"; 
        public static readonly string _520 = "520"; 
        public static readonly string _530 = "530"; 
        public static readonly string _540 = "540"; 
        public static readonly string _550 = "550"; 
        public static readonly string _560 = "560"; 
        public static readonly string _570 = "570"; 
        public static readonly string _580 = "580"; 
        public static readonly string _590 = "590"; 
        public static readonly string _600 = "600"; 
        public static readonly string _610 = "610"; 
        public static readonly string _620 = "620"; 
        public static readonly string _630 = "630"; 
        public static readonly string _640 = "640"; 
        public static readonly string _650 = "650"; 
        public static readonly string _660 = "660"; 
        public static readonly string _670 = "670"; 
        public static readonly string _680 = "680"; 
        public static readonly string _690 = "690"; 
        public static readonly string _700 = "700"; 
        public static readonly string _710 = "710"; 
        public static readonly string _720 = "720"; 
        public static readonly string _730 = "730"; 
        public static readonly string _740 = "740"; 
        public static readonly string _750 = "750"; 
        public static readonly string _755 = "755"; 
        public static readonly string _760 = "760"; 
        public static readonly string _770 = "770"; 
        public static readonly string _780 = "780"; 
        public static readonly string _790 = "790"; 
        public static readonly string _800 = "800"; 
        public static readonly string _810 = "810"; 
        public static readonly string _820 = "820"; 
        public static readonly string _830 = "830"; 
        public static readonly string _840 = "840"; 
        public static readonly string _850 = "850"; 
        public static readonly string _860 = "860"; 
        public static readonly string _870 = "870"; 
        public static readonly string _880 = "880"; 
        public static readonly string _881 = "881"; 
        public static readonly string _890 = "890"; 
        public static readonly string _891 = "891"; 
        public static readonly string _892 = "892"; 
        public static readonly string _893 = "893"; 
        public static readonly string _894 = "894"; 
        public static readonly string _895 = "895"; 
        public static readonly string _896 = "896"; 
        public static readonly string _900 = "900"; 
        public static readonly string _905 = "905"; 
        public static readonly string _910 = "910"; 
        public static readonly string _915 = "915"; 
        public static readonly string _920 = "920"; 
        public static readonly string _925 = "925"; 
        public static readonly string _930 = "930"; 
        public static readonly string _935 = "935"; 
        public static readonly string _940 = "940"; 
        public static readonly string _945 = "945"; 
        public static readonly string _950 = "950"; 
        public static readonly string _955 = "955"; 
        public static readonly string _960 = "960"; 
        public static readonly string _965 = "965"; 
        public static readonly string _970 = "970"; 
        public static readonly string _971 = "971"; 
        public static readonly string _972 = "972"; 
        public static readonly string _973 = "973"; 
        public static readonly string _974 = "974"; 
        public static readonly string _975 = "975"; 
        public static readonly string _976 = "976"; 
        public static readonly string _977 = "977"; 
        public static readonly string _978 = "978"; 
        public static readonly string _980 = "980"; 
        public static readonly string _985 = "985"; 
        public static readonly string _990 = "990"; 
        public static readonly string _991 = "991"; 
        public static readonly string _992 = "992"; 
        public static readonly string _993 = "993"; 
        public static readonly string _994 = "994"; 
        public static readonly string _995 = "995"; 
        public static readonly string _999 = "999"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyLegalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyLegalStatus(string s)
        {
            return new PickDandBCompanyLegalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyLegalStatus Parse(string text) => text;

        

    }
    public class PickDandBCompanyEmployeesTotalReliabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyEmployeesTotalReliability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyEmployeesTotalReliability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyEmployeesTotalReliabilityConverter))]
    public class PickDandBCompanyEmployeesTotalReliability
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyEmployeesTotalReliability o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyEmployeesTotalReliability(string s)
        {
            return new PickDandBCompanyEmployeesTotalReliability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyEmployeesTotalReliability Parse(string text) => text;

        

    }
    public class PickDandBCompanyMinorityOwnedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyMinorityOwned)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyMinorityOwned {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyMinorityOwnedConverter))]
    public class PickDandBCompanyMinorityOwned
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyMinorityOwned o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyMinorityOwned(string s)
        {
            return new PickDandBCompanyMinorityOwned {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyMinorityOwned Parse(string text) => text;

        

    }
    public class PickDandBCompanyWomenOwnedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyWomenOwned)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyWomenOwned {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyWomenOwnedConverter))]
    public class PickDandBCompanyWomenOwned
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyWomenOwned o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyWomenOwned(string s)
        {
            return new PickDandBCompanyWomenOwned {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyWomenOwned Parse(string text) => text;

        

    }
    public class PickDandBCompanySmallBusinessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanySmallBusiness)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanySmallBusiness {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanySmallBusinessConverter))]
    public class PickDandBCompanySmallBusiness
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanySmallBusiness o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanySmallBusiness(string s)
        {
            return new PickDandBCompanySmallBusiness {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanySmallBusiness Parse(string text) => text;

        

    }
    public class PickDandBCompanyMarketingSegmentationClusterConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyMarketingSegmentationCluster)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyMarketingSegmentationCluster {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyMarketingSegmentationClusterConverter))]
    public class PickDandBCompanyMarketingSegmentationCluster
    {
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _4 = "4"; 
        public static readonly string _5 = "5"; 
        public static readonly string _6 = "6"; 
        public static readonly string _7 = "7"; 
        public static readonly string _8 = "8"; 
        public static readonly string _9 = "9"; 
        public static readonly string _10 = "10"; 
        public static readonly string _11 = "11"; 
        public static readonly string _12 = "12"; 
        public static readonly string _13 = "13"; 
        public static readonly string _14 = "14"; 
        public static readonly string _15 = "15"; 
        public static readonly string _16 = "16"; 
        public static readonly string _17 = "17"; 
        public static readonly string _18 = "18"; 
        public static readonly string _19 = "19"; 
        public static readonly string _20 = "20"; 
        public static readonly string _21 = "21"; 
        public static readonly string _22 = "22"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyMarketingSegmentationCluster o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyMarketingSegmentationCluster(string s)
        {
            return new PickDandBCompanyMarketingSegmentationCluster {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyMarketingSegmentationCluster Parse(string text) => text;

        

    }
    public class PickDandBCompanyImportExportAgentConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyImportExportAgent)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyImportExportAgent {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyImportExportAgentConverter))]
    public class PickDandBCompanyImportExportAgent
    {
        public static readonly string  A = "A"; 
        public static readonly string  B = "B"; 
        public static readonly string  C = "C"; 
        public static readonly string  D = "D"; 
        public static readonly string  E = "E"; 
        public static readonly string  F = "F"; 
        public static readonly string  G = "G"; 
        public static readonly string  H = "H"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyImportExportAgent o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyImportExportAgent(string s)
        {
            return new PickDandBCompanyImportExportAgent {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyImportExportAgent Parse(string text) => text;

        

    }
    public class PickDandBCompanySubsidiaryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanySubsidiary)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanySubsidiary {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanySubsidiaryConverter))]
    public class PickDandBCompanySubsidiary
    {
        public static readonly string _0 = "0"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanySubsidiary o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanySubsidiary(string s)
        {
            return new PickDandBCompanySubsidiary {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanySubsidiary Parse(string text) => text;

        

    }
    public class PickDandBCompanyNationalIdTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyNationalIdType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyNationalIdType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyNationalIdTypeConverter))]
    public class PickDandBCompanyNationalIdType
    {
        public static readonly string _00010 = "00010"; 
        public static readonly string _00011 = "00011"; 
        public static readonly string _00100 = "00100"; 
        public static readonly string _00102 = "00102"; 
        public static readonly string _00103 = "00103"; 
        public static readonly string _00104 = "00104"; 
        public static readonly string _00105 = "00105"; 
        public static readonly string _00106 = "00106"; 
        public static readonly string _00107 = "00107"; 
        public static readonly string _00108 = "00108"; 
        public static readonly string _00109 = "00109"; 
        public static readonly string _00110 = "00110"; 
        public static readonly string _00111 = "00111"; 
        public static readonly string _00112 = "00112"; 
        public static readonly string _00113 = "00113"; 
        public static readonly string _00115 = "00115"; 
        public static readonly string _00119 = "00119"; 
        public static readonly string _00012 = "00012"; 
        public static readonly string _00120 = "00120"; 
        public static readonly string _00125 = "00125"; 
        public static readonly string _00127 = "00127"; 
        public static readonly string _00013 = "00013"; 
        public static readonly string _00130 = "00130"; 
        public static readonly string _00135 = "00135"; 
        public static readonly string _00014 = "00014"; 
        public static readonly string _00140 = "00140"; 
        public static readonly string _00145 = "00145"; 
        public static readonly string _00155 = "00155"; 
        public static readonly string _00016 = "00016"; 
        public static readonly string _00165 = "00165"; 
        public static readonly string _00017 = "00017"; 
        public static readonly string _00175 = "00175"; 
        public static readonly string _00018 = "00018"; 
        public static readonly string _00185 = "00185"; 
        public static readonly string _00019 = "00019"; 
        public static readonly string _00195 = "00195"; 
        public static readonly string _00020 = "00020"; 
        public static readonly string _00200 = "00200"; 
        public static readonly string _00021 = "00021"; 
        public static readonly string _00210 = "00210"; 
        public static readonly string _00211 = "00211"; 
        public static readonly string _00212 = "00212"; 
        public static readonly string _00022 = "00022"; 
        public static readonly string _00220 = "00220"; 
        public static readonly string _00230 = "00230"; 
        public static readonly string _00024 = "00024"; 
        public static readonly string _00240 = "00240"; 
        public static readonly string _00025 = "00025"; 
        public static readonly string _00250 = "00250"; 
        public static readonly string _00026 = "00026"; 
        public static readonly string _00260 = "00260"; 
        public static readonly string _00270 = "00270"; 
        public static readonly string _00281 = "00281"; 
        public static readonly string _00282 = "00282"; 
        public static readonly string _00283 = "00283"; 
        public static readonly string _00284 = "00284"; 
        public static readonly string _00285 = "00285"; 
        public static readonly string _00286 = "00286"; 
        public static readonly string _00290 = "00290"; 
        public static readonly string _00030 = "00030"; 
        public static readonly string _00300 = "00300"; 
        public static readonly string _00301 = "00301"; 
        public static readonly string _00302 = "00302"; 
        public static readonly string _00303 = "00303"; 
        public static readonly string _00304 = "00304"; 
        public static readonly string _00305 = "00305"; 
        public static readonly string _00306 = "00306"; 
        public static readonly string _00307 = "00307"; 
        public static readonly string _00308 = "00308"; 
        public static readonly string _00309 = "00309"; 
        public static readonly string _00031 = "00031"; 
        public static readonly string _00310 = "00310"; 
        public static readonly string _00311 = "00311"; 
        public static readonly string _00312 = "00312"; 
        public static readonly string _00313 = "00313"; 
        public static readonly string _00314 = "00314"; 
        public static readonly string _00315 = "00315"; 
        public static readonly string _00316 = "00316"; 
        public static readonly string _00317 = "00317"; 
        public static readonly string _00318 = "00318"; 
        public static readonly string _00032 = "00032"; 
        public static readonly string _00320 = "00320"; 
        public static readonly string _00321 = "00321"; 
        public static readonly string _00322 = "00322"; 
        public static readonly string _00323 = "00323"; 
        public static readonly string _00324 = "00324"; 
        public static readonly string _00325 = "00325"; 
        public static readonly string _00033 = "00033"; 
        public static readonly string _00034 = "00034"; 
        public static readonly string _00035 = "00035"; 
        public static readonly string _00036 = "00036"; 
        public static readonly string _00040 = "00040"; 
        public static readonly string _00045 = "00045"; 
        public static readonly string _00050 = "00050"; 
        public static readonly string _00521 = "00521"; 
        public static readonly string _00522 = "00522"; 
        public static readonly string _00523 = "00523"; 
        public static readonly string _00524 = "00524"; 
        public static readonly string _00525 = "00525"; 
        public static readonly string _00526 = "00526"; 
        public static readonly string _00527 = "00527"; 
        public static readonly string _00528 = "00528"; 
        public static readonly string _00529 = "00529"; 
        public static readonly string _00530 = "00530"; 
        public static readonly string _00531 = "00531"; 
        public static readonly string _00532 = "00532"; 
        public static readonly string _00533 = "00533"; 
        public static readonly string _00534 = "00534"; 
        public static readonly string _00535 = "00535"; 
        public static readonly string _00536 = "00536"; 
        public static readonly string _00537 = "00537"; 
        public static readonly string _00538 = "00538"; 
        public static readonly string _00539 = "00539"; 
        public static readonly string _00540 = "00540"; 
        public static readonly string _00541 = "00541"; 
        public static readonly string _00542 = "00542"; 
        public static readonly string _00543 = "00543"; 
        public static readonly string _00544 = "00544"; 
        public static readonly string _00545 = "00545"; 
        public static readonly string _00546 = "00546"; 
        public static readonly string _00547 = "00547"; 
        public static readonly string _00548 = "00548"; 
        public static readonly string _00549 = "00549"; 
        public static readonly string _00055 = "00055"; 
        public static readonly string _00550 = "00550"; 
        public static readonly string _00551 = "00551"; 
        public static readonly string _00552 = "00552"; 
        public static readonly string _00553 = "00553"; 
        public static readonly string _00554 = "00554"; 
        public static readonly string _00555 = "00555"; 
        public static readonly string _00556 = "00556"; 
        public static readonly string _00557 = "00557"; 
        public static readonly string _00558 = "00558"; 
        public static readonly string _00559 = "00559"; 
        public static readonly string _00560 = "00560"; 
        public static readonly string _00561 = "00561"; 
        public static readonly string _00562 = "00562"; 
        public static readonly string _00563 = "00563"; 
        public static readonly string _00564 = "00564"; 
        public static readonly string _00565 = "00565"; 
        public static readonly string _00566 = "00566"; 
        public static readonly string _00567 = "00567"; 
        public static readonly string _00568 = "00568"; 
        public static readonly string _00569 = "00569"; 
        public static readonly string _00570 = "00570"; 
        public static readonly string _00571 = "00571"; 
        public static readonly string _00572 = "00572"; 
        public static readonly string _00573 = "00573"; 
        public static readonly string _00574 = "00574"; 
        public static readonly string _00575 = "00575"; 
        public static readonly string _00576 = "00576"; 
        public static readonly string _00577 = "00577"; 
        public static readonly string _00578 = "00578"; 
        public static readonly string _00579 = "00579"; 
        public static readonly string _00580 = "00580"; 
        public static readonly string _00581 = "00581"; 
        public static readonly string _00582 = "00582"; 
        public static readonly string _00583 = "00583"; 
        public static readonly string _00584 = "00584"; 
        public static readonly string _00585 = "00585"; 
        public static readonly string _00586 = "00586"; 
        public static readonly string _00587 = "00587"; 
        public static readonly string _00588 = "00588"; 
        public static readonly string _00589 = "00589"; 
        public static readonly string _00590 = "00590"; 
        public static readonly string _00591 = "00591"; 
        public static readonly string _00592 = "00592"; 
        public static readonly string _00593 = "00593"; 
        public static readonly string _00594 = "00594"; 
        public static readonly string _00595 = "00595"; 
        public static readonly string _00596 = "00596"; 
        public static readonly string _00597 = "00597"; 
        public static readonly string _00598 = "00598"; 
        public static readonly string _00599 = "00599"; 
        public static readonly string _00060 = "00060"; 
        public static readonly string _00600 = "00600"; 
        public static readonly string _00601 = "00601"; 
        public static readonly string _00602 = "00602"; 
        public static readonly string _00603 = "00603"; 
        public static readonly string _00604 = "00604"; 
        public static readonly string _00605 = "00605"; 
        public static readonly string _00610 = "00610"; 
        public static readonly string _00620 = "00620"; 
        public static readonly string _00630 = "00630"; 
        public static readonly string _00640 = "00640"; 
        public static readonly string _00065 = "00065"; 
        public static readonly string _00650 = "00650"; 
        public static readonly string _00660 = "00660"; 
        public static readonly string _00670 = "00670"; 
        public static readonly string _00070 = "00070"; 
        public static readonly string _00702 = "00702"; 
        public static readonly string _00075 = "00075"; 
        public static readonly string _00080 = "00080"; 
        public static readonly string _00090 = "00090"; 
        public static readonly string _00095 = "00095"; 
        public static readonly string _00042 = "00042"; 
        public static readonly string _00043 = "00043"; 
        public static readonly string _00122 = "00122"; 
        public static readonly string _00330 = "00330"; 
        public static readonly string _00335 = "00335"; 
        public static readonly string _00340 = "00340"; 
        public static readonly string _00345 = "00345"; 
        public static readonly string _00350 = "00350"; 
        public static readonly string _00355 = "00355"; 
        public static readonly string _00360 = "00360"; 
        public static readonly string _00710 = "00710"; 
        public static readonly string _00715 = "00715"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyNationalIdType o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyNationalIdType(string s)
        {
            return new PickDandBCompanyNationalIdType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyNationalIdType Parse(string text) => text;

        

    }
    public class PickDandBCompanyGeoCodeAccuracyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyGeoCodeAccuracy)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyGeoCodeAccuracy {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyGeoCodeAccuracyConverter))]
    public class PickDandBCompanyGeoCodeAccuracy
    {
        public static readonly string  D = "D"; 
        public static readonly string  S = "S"; 
        public static readonly string  B = "B"; 
        public static readonly string  T = "T"; 
        public static readonly string  M = "M"; 
        public static readonly string  Z = "Z"; 
        public static readonly string _0 = "0"; 
        public static readonly string  C = "C"; 
        public static readonly string  N = "N"; 
        public static readonly string  I = "I"; 
        public static readonly string  P = "P"; 
        public static readonly string  A = "A"; 
        public static readonly string  H = "H"; 
        public static readonly string  K = "K"; 
        public static readonly string  G = "G"; 
        public static readonly string  L = "L"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyGeoCodeAccuracy o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyGeoCodeAccuracy(string s)
        {
            return new PickDandBCompanyGeoCodeAccuracy {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyGeoCodeAccuracy Parse(string text) => text;

        

    }
    public class PickDandBCompanyMarketingPreScreenConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyMarketingPreScreen)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyMarketingPreScreen {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyMarketingPreScreenConverter))]
    public class PickDandBCompanyMarketingPreScreen
    {
        public static readonly string  L = "L"; 
        public static readonly string  M = "M"; 
        public static readonly string  H = "H"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyMarketingPreScreen o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyMarketingPreScreen(string s)
        {
            return new PickDandBCompanyMarketingPreScreen {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyMarketingPreScreen Parse(string text) => text;

        

    }
    public class PickDandBCompanyLocationStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyLocationStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyLocationStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyLocationStatusConverter))]
    public class PickDandBCompanyLocationStatus
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyLocationStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyLocationStatus(string s)
        {
            return new PickDandBCompanyLocationStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyLocationStatus Parse(string text) => text;

        

    }
    public class PickDandBCompanyCompanyCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDandBCompanyCompanyCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDandBCompanyCompanyCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDandBCompanyCompanyCurrencyIsoCodeConverter))]
    public class PickDandBCompanyCompanyCurrencyIsoCode
    {
        public static readonly string  AED = "AED"; 
        public static readonly string  AFN = "AFN"; 
        public static readonly string  ALL = "ALL"; 
        public static readonly string  AMD = "AMD"; 
        public static readonly string  ANG = "ANG"; 
        public static readonly string  AOA = "AOA"; 
        public static readonly string  ARS = "ARS"; 
        public static readonly string  AUD = "AUD"; 
        public static readonly string  AWG = "AWG"; 
        public static readonly string  AZN = "AZN"; 
        public static readonly string  BAM = "BAM"; 
        public static readonly string  BBD = "BBD"; 
        public static readonly string  BDT = "BDT"; 
        public static readonly string  BGN = "BGN"; 
        public static readonly string  BHD = "BHD"; 
        public static readonly string  BIF = "BIF"; 
        public static readonly string  BMD = "BMD"; 
        public static readonly string  BND = "BND"; 
        public static readonly string  BOB = "BOB"; 
        public static readonly string  BOV = "BOV"; 
        public static readonly string  BRB = "BRB"; 
        public static readonly string  BRL = "BRL"; 
        public static readonly string  BSD = "BSD"; 
        public static readonly string  BTN = "BTN"; 
        public static readonly string  BWP = "BWP"; 
        public static readonly string  BYR = "BYR"; 
        public static readonly string  BZD = "BZD"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CDF = "CDF"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  CLF = "CLF"; 
        public static readonly string  CLP = "CLP"; 
        public static readonly string  CNY = "CNY"; 
        public static readonly string  COP = "COP"; 
        public static readonly string  CRC = "CRC"; 
        public static readonly string  CUC = "CUC"; 
        public static readonly string  CUP = "CUP"; 
        public static readonly string  CVE = "CVE"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DJF = "DJF"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  DOP = "DOP"; 
        public static readonly string  DZD = "DZD"; 
        public static readonly string  EEK = "EEK"; 
        public static readonly string  EGP = "EGP"; 
        public static readonly string  ERN = "ERN"; 
        public static readonly string  ETB = "ETB"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  FJD = "FJD"; 
        public static readonly string  FKP = "FKP"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  GEL = "GEL"; 
        public static readonly string  GHS = "GHS"; 
        public static readonly string  GIP = "GIP"; 
        public static readonly string  GMD = "GMD"; 
        public static readonly string  GNF = "GNF"; 
        public static readonly string  GTQ = "GTQ"; 
        public static readonly string  GYD = "GYD"; 
        public static readonly string  HKD = "HKD"; 
        public static readonly string  HNL = "HNL"; 
        public static readonly string  HRD = "HRD"; 
        public static readonly string  HRK = "HRK"; 
        public static readonly string  HTG = "HTG"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  IDR = "IDR"; 
        public static readonly string  ILS = "ILS"; 
        public static readonly string  INR = "INR"; 
        public static readonly string  IQD = "IQD"; 
        public static readonly string  IRR = "IRR"; 
        public static readonly string  ISK = "ISK"; 
        public static readonly string  JMD = "JMD"; 
        public static readonly string  JOD = "JOD"; 
        public static readonly string  JPY = "JPY"; 
        public static readonly string  KES = "KES"; 
        public static readonly string  KGS = "KGS"; 
        public static readonly string  KHR = "KHR"; 
        public static readonly string  KMF = "KMF"; 
        public static readonly string  KPW = "KPW"; 
        public static readonly string  KRW = "KRW"; 
        public static readonly string  KWD = "KWD"; 
        public static readonly string  KYD = "KYD"; 
        public static readonly string  KZT = "KZT"; 
        public static readonly string  LAK = "LAK"; 
        public static readonly string  LBP = "LBP"; 
        public static readonly string  LKR = "LKR"; 
        public static readonly string  LRD = "LRD"; 
        public static readonly string  LSL = "LSL"; 
        public static readonly string  LYD = "LYD"; 
        public static readonly string  MAD = "MAD"; 
        public static readonly string  MDL = "MDL"; 
        public static readonly string  MGA = "MGA"; 
        public static readonly string  MKD = "MKD"; 
        public static readonly string  MMK = "MMK"; 
        public static readonly string  MNT = "MNT"; 
        public static readonly string  MOP = "MOP"; 
        public static readonly string  MRO = "MRO"; 
        public static readonly string  MUR = "MUR"; 
        public static readonly string  MVR = "MVR"; 
        public static readonly string  MWK = "MWK"; 
        public static readonly string  MXN = "MXN"; 
        public static readonly string  MXV = "MXV"; 
        public static readonly string  MYR = "MYR"; 
        public static readonly string  MZN = "MZN"; 
        public static readonly string  NAD = "NAD"; 
        public static readonly string  NGN = "NGN"; 
        public static readonly string  NIO = "NIO"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  NPR = "NPR"; 
        public static readonly string  NZD = "NZD"; 
        public static readonly string  OMR = "OMR"; 
        public static readonly string  PAB = "PAB"; 
        public static readonly string  PEN = "PEN"; 
        public static readonly string  PGK = "PGK"; 
        public static readonly string  PHP = "PHP"; 
        public static readonly string  PKR = "PKR"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  PYG = "PYG"; 
        public static readonly string  QAR = "QAR"; 
        public static readonly string  RON = "RON"; 
        public static readonly string  RSD = "RSD"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  RWF = "RWF"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SBD = "SBD"; 
        public static readonly string  SCR = "SCR"; 
        public static readonly string  SDG = "SDG"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  SHP = "SHP"; 
        public static readonly string  SLL = "SLL"; 
        public static readonly string  SOS = "SOS"; 
        public static readonly string  SRD = "SRD"; 
        public static readonly string  SSP = "SSP"; 
        public static readonly string  STD = "STD"; 
        public static readonly string  SYP = "SYP"; 
        public static readonly string  SZL = "SZL"; 
        public static readonly string  THB = "THB"; 
        public static readonly string  TJS = "TJS"; 
        public static readonly string  TMT = "TMT"; 
        public static readonly string  TND = "TND"; 
        public static readonly string  TOP = "TOP"; 
        public static readonly string  TRY = "TRY"; 
        public static readonly string  TTD = "TTD"; 
        public static readonly string  TWD = "TWD"; 
        public static readonly string  TZS = "TZS"; 
        public static readonly string  UAH = "UAH"; 
        public static readonly string  UGX = "UGX"; 
        public static readonly string  USD = "USD"; 
        public static readonly string  UYU = "UYU"; 
        public static readonly string  UZS = "UZS"; 
        public static readonly string  VEF = "VEF"; 
        public static readonly string  VND = "VND"; 
        public static readonly string  VUV = "VUV"; 
        public static readonly string  WST = "WST"; 
        public static readonly string  XAF = "XAF"; 
        public static readonly string  XCD = "XCD"; 
        public static readonly string  XOF = "XOF"; 
        public static readonly string  XPF = "XPF"; 
        public static readonly string  YER = "YER"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  ZMW = "ZMW"; 
        public static readonly string  ZWL = "ZWL"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDandBCompanyCompanyCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickDandBCompanyCompanyCurrencyIsoCode(string s)
        {
            return new PickDandBCompanyCompanyCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDandBCompanyCompanyCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickDashboardLeftSizeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardLeftSize)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardLeftSize {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardLeftSizeConverter))]
    public class PickDashboardLeftSize
    {
        public static readonly string  Narrow = "Narrow"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Wide = "Wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardLeftSize o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardLeftSize(string s)
        {
            return new PickDashboardLeftSize {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardLeftSize Parse(string text) => text;

        

    }
    public class PickDashboardMiddleSizeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardMiddleSize)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardMiddleSize {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardMiddleSizeConverter))]
    public class PickDashboardMiddleSize
    {
        public static readonly string  Narrow = "Narrow"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Wide = "Wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardMiddleSize o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardMiddleSize(string s)
        {
            return new PickDashboardMiddleSize {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardMiddleSize Parse(string text) => text;

        

    }
    public class PickDashboardRightSizeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardRightSize)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardRightSize {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardRightSizeConverter))]
    public class PickDashboardRightSize
    {
        public static readonly string  Narrow = "Narrow"; 
        public static readonly string  Medium = "Medium"; 
        public static readonly string  Wide = "Wide"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardRightSize o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardRightSize(string s)
        {
            return new PickDashboardRightSize {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardRightSize Parse(string text) => text;

        

    }
    public class PickDashboardBackgroundDirectionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardBackgroundDirection)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardBackgroundDirection {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardBackgroundDirectionConverter))]
    public class PickDashboardBackgroundDirection
    {
        public static readonly string  TopToBottom = "TopToBottom"; 
        public static readonly string  LeftToRight = "LeftToRight"; 
        public static readonly string  Diagonal = "Diagonal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardBackgroundDirection o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardBackgroundDirection(string s)
        {
            return new PickDashboardBackgroundDirection {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardBackgroundDirection Parse(string text) => text;

        

    }
    public class PickDashboardTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardTypeConverter))]
    public class PickDashboardType
    {
        public static readonly string  SpecifiedUser = "SpecifiedUser"; 
        public static readonly string  LoggedInUser = "LoggedInUser"; 
        public static readonly string  MyTeamUser = "MyTeamUser"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardType o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardType(string s)
        {
            return new PickDashboardType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardType Parse(string text) => text;

        

    }
    public class PickDashboardComponentFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardComponentFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardComponentFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardComponentFeedTypeConverter))]
    public class PickDashboardComponentFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardComponentFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardComponentFeedType(string s)
        {
            return new PickDashboardComponentFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardComponentFeedType Parse(string text) => text;

        

    }
    public class PickDashboardFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDashboardFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDashboardFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDashboardFeedTypeConverter))]
    public class PickDashboardFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDashboardFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickDashboardFeedType(string s)
        {
            return new PickDashboardFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDashboardFeedType Parse(string text) => text;

        

    }
    public class PickDatacloudCompanySiteConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudCompanySite)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudCompanySite {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudCompanySiteConverter))]
    public class PickDatacloudCompanySite
    {
        public static readonly string  Branch = "Branch"; 
        public static readonly string  Headquarters = "Headquarters"; 
        public static readonly string  SingleLocation = "Single Location"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudCompanySite o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudCompanySite(string s)
        {
            return new PickDatacloudCompanySite {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudCompanySite Parse(string text) => text;

        

    }
    public class PickDatacloudContactDepartmentConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudContactDepartment)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudContactDepartment {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudContactDepartmentConverter))]
    public class PickDatacloudContactDepartment
    {
        public static readonly string  Sales = "Sales"; 
        public static readonly string  Marketing = "Marketing"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  HR = "HR"; 
        public static readonly string  Support = "Support"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Operations = "Operations"; 
        public static readonly string  IT = "IT"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudContactDepartment o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudContactDepartment(string s)
        {
            return new PickDatacloudContactDepartment {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudContactDepartment Parse(string text) => text;

        

    }
    public class PickDatacloudContactLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudContactLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudContactLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudContactLevelConverter))]
    public class PickDatacloudContactLevel
    {
        public static readonly string  CLevel = "C-Level"; 
        public static readonly string  VP = "VP"; 
        public static readonly string  Director = "Director"; 
        public static readonly string  Manager = "Manager"; 
        public static readonly string  Staff = "Staff"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudContactLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudContactLevel(string s)
        {
            return new PickDatacloudContactLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudContactLevel Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyPublicIndicatorConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyPublicIndicator)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyPublicIndicator {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyPublicIndicatorConverter))]
    public class PickDatacloudDandBCompanyPublicIndicator
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyPublicIndicator o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyPublicIndicator(string s)
        {
            return new PickDatacloudDandBCompanyPublicIndicator {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyPublicIndicator Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyOutOfBusinessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyOutOfBusiness)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyOutOfBusiness {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyOutOfBusinessConverter))]
    public class PickDatacloudDandBCompanyOutOfBusiness
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyOutOfBusiness o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyOutOfBusiness(string s)
        {
            return new PickDatacloudDandBCompanyOutOfBusiness {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyOutOfBusiness Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyOwnOrRentConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyOwnOrRent)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyOwnOrRent {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyOwnOrRentConverter))]
    public class PickDatacloudDandBCompanyOwnOrRent
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyOwnOrRent o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyOwnOrRent(string s)
        {
            return new PickDatacloudDandBCompanyOwnOrRent {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyOwnOrRent Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyEmployeesHereReliabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyEmployeesHereReliability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyEmployeesHereReliability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyEmployeesHereReliabilityConverter))]
    public class PickDatacloudDandBCompanyEmployeesHereReliability
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyEmployeesHereReliability o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyEmployeesHereReliability(string s)
        {
            return new PickDatacloudDandBCompanyEmployeesHereReliability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyEmployeesHereReliability Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanySalesVolumeReliabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanySalesVolumeReliability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanySalesVolumeReliability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanySalesVolumeReliabilityConverter))]
    public class PickDatacloudDandBCompanySalesVolumeReliability
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanySalesVolumeReliability o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanySalesVolumeReliability(string s)
        {
            return new PickDatacloudDandBCompanySalesVolumeReliability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanySalesVolumeReliability Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyCurrencyCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyCurrencyCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyCurrencyCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyCurrencyCodeConverter))]
    public class PickDatacloudDandBCompanyCurrencyCode
    {
        public static readonly string _0010 = "0010"; 
        public static readonly string _0020 = "0020"; 
        public static readonly string _0030 = "0030"; 
        public static readonly string _0040 = "0040"; 
        public static readonly string _0050 = "0050"; 
        public static readonly string _0070 = "0070"; 
        public static readonly string _0075 = "0075"; 
        public static readonly string _0090 = "0090"; 
        public static readonly string _0095 = "0095"; 
        public static readonly string _0100 = "0100"; 
        public static readonly string _0105 = "0105"; 
        public static readonly string _0110 = "0110"; 
        public static readonly string _0120 = "0120"; 
        public static readonly string _0140 = "0140"; 
        public static readonly string _0150 = "0150"; 
        public static readonly string _0155 = "0155"; 
        public static readonly string _0160 = "0160"; 
        public static readonly string _0190 = "0190"; 
        public static readonly string _0220 = "0220"; 
        public static readonly string _0230 = "0230"; 
        public static readonly string _0250 = "0250"; 
        public static readonly string _0270 = "0270"; 
        public static readonly string _0280 = "0280"; 
        public static readonly string _0290 = "0290"; 
        public static readonly string _0305 = "0305"; 
        public static readonly string _0310 = "0310"; 
        public static readonly string _0320 = "0320"; 
        public static readonly string _0330 = "0330"; 
        public static readonly string _0370 = "0370"; 
        public static readonly string _0380 = "0380"; 
        public static readonly string _0390 = "0390"; 
        public static readonly string _0400 = "0400"; 
        public static readonly string _0410 = "0410"; 
        public static readonly string _0420 = "0420"; 
        public static readonly string _0430 = "0430"; 
        public static readonly string _0440 = "0440"; 
        public static readonly string _0450 = "0450"; 
        public static readonly string _0460 = "0460"; 
        public static readonly string _0470 = "0470"; 
        public static readonly string _0480 = "0480"; 
        public static readonly string _0490 = "0490"; 
        public static readonly string _0500 = "0500"; 
        public static readonly string _0520 = "0520"; 
        public static readonly string _0530 = "0530"; 
        public static readonly string _0540 = "0540"; 
        public static readonly string _0550 = "0550"; 
        public static readonly string _0552 = "0552"; 
        public static readonly string _0560 = "0560"; 
        public static readonly string _0580 = "0580"; 
        public static readonly string _0585 = "0585"; 
        public static readonly string _0590 = "0590"; 
        public static readonly string _0595 = "0595"; 
        public static readonly string _0600 = "0600"; 
        public static readonly string _0605 = "0605"; 
        public static readonly string _0620 = "0620"; 
        public static readonly string _0630 = "0630"; 
        public static readonly string _0640 = "0640"; 
        public static readonly string _0650 = "0650"; 
        public static readonly string _0690 = "0690"; 
        public static readonly string _0700 = "0700"; 
        public static readonly string _0710 = "0710"; 
        public static readonly string _0720 = "0720"; 
        public static readonly string _0730 = "0730"; 
        public static readonly string _0750 = "0750"; 
        public static readonly string _0760 = "0760"; 
        public static readonly string _0770 = "0770"; 
        public static readonly string _0780 = "0780"; 
        public static readonly string _0790 = "0790"; 
        public static readonly string _0800 = "0800"; 
        public static readonly string _0820 = "0820"; 
        public static readonly string _0830 = "0830"; 
        public static readonly string _0840 = "0840"; 
        public static readonly string _0860 = "0860"; 
        public static readonly string _0870 = "0870"; 
        public static readonly string _0880 = "0880"; 
        public static readonly string _0890 = "0890"; 
        public static readonly string _0900 = "0900"; 
        public static readonly string _0910 = "0910"; 
        public static readonly string _0920 = "0920"; 
        public static readonly string _0940 = "0940"; 
        public static readonly string _0960 = "0960"; 
        public static readonly string _0970 = "0970"; 
        public static readonly string _1000 = "1000"; 
        public static readonly string _1010 = "1010"; 
        public static readonly string _1020 = "1020"; 
        public static readonly string _1030 = "1030"; 
        public static readonly string _1040 = "1040"; 
        public static readonly string _1060 = "1060"; 
        public static readonly string _1070 = "1070"; 
        public static readonly string _1080 = "1080"; 
        public static readonly string _1090 = "1090"; 
        public static readonly string _2000 = "2000"; 
        public static readonly string _2010 = "2010"; 
        public static readonly string _2020 = "2020"; 
        public static readonly string _2040 = "2040"; 
        public static readonly string _2060 = "2060"; 
        public static readonly string _2070 = "2070"; 
        public static readonly string _2080 = "2080"; 
        public static readonly string _2090 = "2090"; 
        public static readonly string _3000 = "3000"; 
        public static readonly string _3010 = "3010"; 
        public static readonly string _3020 = "3020"; 
        public static readonly string _3030 = "3030"; 
        public static readonly string _3040 = "3040"; 
        public static readonly string _3060 = "3060"; 
        public static readonly string _3070 = "3070"; 
        public static readonly string _3075 = "3075"; 
        public static readonly string _3085 = "3085"; 
        public static readonly string _3090 = "3090"; 
        public static readonly string _4000 = "4000"; 
        public static readonly string _4010 = "4010"; 
        public static readonly string _4020 = "4020"; 
        public static readonly string _4030 = "4030"; 
        public static readonly string _4040 = "4040"; 
        public static readonly string _4060 = "4060"; 
        public static readonly string _4070 = "4070"; 
        public static readonly string _4090 = "4090"; 
        public static readonly string _5005 = "5005"; 
        public static readonly string _5010 = "5010"; 
        public static readonly string _5020 = "5020"; 
        public static readonly string _5030 = "5030"; 
        public static readonly string _5040 = "5040"; 
        public static readonly string _5080 = "5080"; 
        public static readonly string _5090 = "5090"; 
        public static readonly string _6000 = "6000"; 
        public static readonly string _6030 = "6030"; 
        public static readonly string _6040 = "6040"; 
        public static readonly string _6050 = "6050"; 
        public static readonly string _6060 = "6060"; 
        public static readonly string _6100 = "6100"; 
        public static readonly string _6200 = "6200"; 
        public static readonly string _6300 = "6300"; 
        public static readonly string _6400 = "6400"; 
        public static readonly string _6500 = "6500"; 
        public static readonly string _6600 = "6600"; 
        public static readonly string _6800 = "6800"; 
        public static readonly string _6900 = "6900"; 
        public static readonly string _7200 = "7200"; 
        public static readonly string _7500 = "7500"; 
        public static readonly string _7600 = "7600"; 
        public static readonly string _8000 = "8000"; 
        public static readonly string _8100 = "8100"; 
        public static readonly string _8300 = "8300"; 
        public static readonly string _8500 = "8500"; 
        public static readonly string _8700 = "8700"; 
        public static readonly string _8800 = "8800"; 
        public static readonly string _8900 = "8900"; 
        public static readonly string _9000 = "9000"; 
        public static readonly string _9100 = "9100"; 
        public static readonly string _9300 = "9300"; 
        public static readonly string _9410 = "9410"; 
        public static readonly string _9430 = "9430"; 
        public static readonly string _9440 = "9440"; 
        public static readonly string _9450 = "9450"; 
        public static readonly string _9460 = "9460"; 
        public static readonly string _9470 = "9470"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyCurrencyCode o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyCurrencyCode(string s)
        {
            return new PickDatacloudDandBCompanyCurrencyCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyCurrencyCode Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyLegalStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyLegalStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyLegalStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyLegalStatusConverter))]
    public class PickDatacloudDandBCompanyLegalStatus
    {
        public static readonly string _100 = "100"; 
        public static readonly string _101 = "101"; 
        public static readonly string _118 = "118"; 
        public static readonly string _012 = "012"; 
        public static readonly string _120 = "120"; 
        public static readonly string _013 = "013"; 
        public static readonly string _003 = "003"; 
        public static readonly string _050 = "050"; 
        public static readonly string _008 = "008"; 
        public static readonly string _000 = "000"; 
        public static readonly string _009 = "009"; 
        public static readonly string _010 = "010"; 
        public static readonly string _011 = "011"; 
        public static readonly string _014 = "014"; 
        public static readonly string _015 = "015"; 
        public static readonly string _030 = "030"; 
        public static readonly string _070 = "070"; 
        public static readonly string _080 = "080"; 
        public static readonly string _090 = "090"; 
        public static readonly string _099 = "099"; 
        public static readonly string _102 = "102"; 
        public static readonly string _103 = "103"; 
        public static readonly string _104 = "104"; 
        public static readonly string _105 = "105"; 
        public static readonly string _106 = "106"; 
        public static readonly string _107 = "107"; 
        public static readonly string _108 = "108"; 
        public static readonly string _109 = "109"; 
        public static readonly string _110 = "110"; 
        public static readonly string _111 = "111"; 
        public static readonly string _112 = "112"; 
        public static readonly string _113 = "113"; 
        public static readonly string _114 = "114"; 
        public static readonly string _115 = "115"; 
        public static readonly string _116 = "116"; 
        public static readonly string _117 = "117"; 
        public static readonly string _119 = "119"; 
        public static readonly string _121 = "121"; 
        public static readonly string _122 = "122"; 
        public static readonly string _125 = "125"; 
        public static readonly string _126 = "126"; 
        public static readonly string _127 = "127"; 
        public static readonly string _128 = "128"; 
        public static readonly string _129 = "129"; 
        public static readonly string _130 = "130"; 
        public static readonly string _131 = "131"; 
        public static readonly string _132 = "132"; 
        public static readonly string _133 = "133"; 
        public static readonly string _140 = "140"; 
        public static readonly string _142 = "142"; 
        public static readonly string _143 = "143"; 
        public static readonly string _144 = "144"; 
        public static readonly string _145 = "145"; 
        public static readonly string _146 = "146"; 
        public static readonly string _147 = "147"; 
        public static readonly string _148 = "148"; 
        public static readonly string _149 = "149"; 
        public static readonly string _150 = "150"; 
        public static readonly string _151 = "151"; 
        public static readonly string _152 = "152"; 
        public static readonly string _153 = "153"; 
        public static readonly string _154 = "154"; 
        public static readonly string _155 = "155"; 
        public static readonly string _160 = "160"; 
        public static readonly string _161 = "161"; 
        public static readonly string _162 = "162"; 
        public static readonly string _163 = "163"; 
        public static readonly string _164 = "164"; 
        public static readonly string _166 = "166"; 
        public static readonly string _167 = "167"; 
        public static readonly string _168 = "168"; 
        public static readonly string _169 = "169"; 
        public static readonly string _170 = "170"; 
        public static readonly string _171 = "171"; 
        public static readonly string _180 = "180"; 
        public static readonly string _185 = "185"; 
        public static readonly string _186 = "186"; 
        public static readonly string _190 = "190"; 
        public static readonly string _200 = "200"; 
        public static readonly string _202 = "202"; 
        public static readonly string _204 = "204"; 
        public static readonly string _206 = "206"; 
        public static readonly string _208 = "208"; 
        public static readonly string _210 = "210"; 
        public static readonly string _212 = "212"; 
        public static readonly string _214 = "214"; 
        public static readonly string _216 = "216"; 
        public static readonly string _218 = "218"; 
        public static readonly string _220 = "220"; 
        public static readonly string _222 = "222"; 
        public static readonly string _224 = "224"; 
        public static readonly string _226 = "226"; 
        public static readonly string _228 = "228"; 
        public static readonly string _230 = "230"; 
        public static readonly string _232 = "232"; 
        public static readonly string _234 = "234"; 
        public static readonly string _236 = "236"; 
        public static readonly string _238 = "238"; 
        public static readonly string _240 = "240"; 
        public static readonly string _242 = "242"; 
        public static readonly string _244 = "244"; 
        public static readonly string _246 = "246"; 
        public static readonly string _248 = "248"; 
        public static readonly string _250 = "250"; 
        public static readonly string _252 = "252"; 
        public static readonly string _254 = "254"; 
        public static readonly string _256 = "256"; 
        public static readonly string _260 = "260"; 
        public static readonly string _270 = "270"; 
        public static readonly string _280 = "280"; 
        public static readonly string _290 = "290"; 
        public static readonly string _300 = "300"; 
        public static readonly string _301 = "301"; 
        public static readonly string _302 = "302"; 
        public static readonly string _304 = "304"; 
        public static readonly string _306 = "306"; 
        public static readonly string _308 = "308"; 
        public static readonly string _310 = "310"; 
        public static readonly string _312 = "312"; 
        public static readonly string _314 = "314"; 
        public static readonly string _316 = "316"; 
        public static readonly string _318 = "318"; 
        public static readonly string _320 = "320"; 
        public static readonly string _322 = "322"; 
        public static readonly string _324 = "324"; 
        public static readonly string _326 = "326"; 
        public static readonly string _328 = "328"; 
        public static readonly string _330 = "330"; 
        public static readonly string _332 = "332"; 
        public static readonly string _334 = "334"; 
        public static readonly string _336 = "336"; 
        public static readonly string _338 = "338"; 
        public static readonly string _340 = "340"; 
        public static readonly string _342 = "342"; 
        public static readonly string _344 = "344"; 
        public static readonly string _346 = "346"; 
        public static readonly string _350 = "350"; 
        public static readonly string _360 = "360"; 
        public static readonly string _370 = "370"; 
        public static readonly string _380 = "380"; 
        public static readonly string _390 = "390"; 
        public static readonly string _400 = "400"; 
        public static readonly string _410 = "410"; 
        public static readonly string _420 = "420"; 
        public static readonly string _430 = "430"; 
        public static readonly string _440 = "440"; 
        public static readonly string _450 = "450"; 
        public static readonly string _451 = "451"; 
        public static readonly string _452 = "452"; 
        public static readonly string _460 = "460"; 
        public static readonly string _470 = "470"; 
        public static readonly string _480 = "480"; 
        public static readonly string _490 = "490"; 
        public static readonly string _500 = "500"; 
        public static readonly string _502 = "502"; 
        public static readonly string _510 = "510"; 
        public static readonly string _520 = "520"; 
        public static readonly string _530 = "530"; 
        public static readonly string _540 = "540"; 
        public static readonly string _550 = "550"; 
        public static readonly string _560 = "560"; 
        public static readonly string _570 = "570"; 
        public static readonly string _580 = "580"; 
        public static readonly string _590 = "590"; 
        public static readonly string _600 = "600"; 
        public static readonly string _610 = "610"; 
        public static readonly string _620 = "620"; 
        public static readonly string _630 = "630"; 
        public static readonly string _640 = "640"; 
        public static readonly string _650 = "650"; 
        public static readonly string _660 = "660"; 
        public static readonly string _670 = "670"; 
        public static readonly string _680 = "680"; 
        public static readonly string _690 = "690"; 
        public static readonly string _700 = "700"; 
        public static readonly string _710 = "710"; 
        public static readonly string _720 = "720"; 
        public static readonly string _730 = "730"; 
        public static readonly string _740 = "740"; 
        public static readonly string _750 = "750"; 
        public static readonly string _755 = "755"; 
        public static readonly string _760 = "760"; 
        public static readonly string _770 = "770"; 
        public static readonly string _780 = "780"; 
        public static readonly string _790 = "790"; 
        public static readonly string _800 = "800"; 
        public static readonly string _810 = "810"; 
        public static readonly string _820 = "820"; 
        public static readonly string _830 = "830"; 
        public static readonly string _840 = "840"; 
        public static readonly string _850 = "850"; 
        public static readonly string _860 = "860"; 
        public static readonly string _870 = "870"; 
        public static readonly string _880 = "880"; 
        public static readonly string _881 = "881"; 
        public static readonly string _890 = "890"; 
        public static readonly string _891 = "891"; 
        public static readonly string _892 = "892"; 
        public static readonly string _893 = "893"; 
        public static readonly string _894 = "894"; 
        public static readonly string _895 = "895"; 
        public static readonly string _896 = "896"; 
        public static readonly string _900 = "900"; 
        public static readonly string _905 = "905"; 
        public static readonly string _910 = "910"; 
        public static readonly string _915 = "915"; 
        public static readonly string _920 = "920"; 
        public static readonly string _925 = "925"; 
        public static readonly string _930 = "930"; 
        public static readonly string _935 = "935"; 
        public static readonly string _940 = "940"; 
        public static readonly string _945 = "945"; 
        public static readonly string _950 = "950"; 
        public static readonly string _955 = "955"; 
        public static readonly string _960 = "960"; 
        public static readonly string _965 = "965"; 
        public static readonly string _970 = "970"; 
        public static readonly string _971 = "971"; 
        public static readonly string _972 = "972"; 
        public static readonly string _973 = "973"; 
        public static readonly string _974 = "974"; 
        public static readonly string _975 = "975"; 
        public static readonly string _976 = "976"; 
        public static readonly string _977 = "977"; 
        public static readonly string _978 = "978"; 
        public static readonly string _980 = "980"; 
        public static readonly string _985 = "985"; 
        public static readonly string _990 = "990"; 
        public static readonly string _991 = "991"; 
        public static readonly string _992 = "992"; 
        public static readonly string _993 = "993"; 
        public static readonly string _994 = "994"; 
        public static readonly string _995 = "995"; 
        public static readonly string _999 = "999"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyLegalStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyLegalStatus(string s)
        {
            return new PickDatacloudDandBCompanyLegalStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyLegalStatus Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyEmployeesTotalReliabilityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyEmployeesTotalReliability)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyEmployeesTotalReliability {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyEmployeesTotalReliabilityConverter))]
    public class PickDatacloudDandBCompanyEmployeesTotalReliability
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyEmployeesTotalReliability o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyEmployeesTotalReliability(string s)
        {
            return new PickDatacloudDandBCompanyEmployeesTotalReliability {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyEmployeesTotalReliability Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyMinorityOwnedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyMinorityOwned)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyMinorityOwned {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyMinorityOwnedConverter))]
    public class PickDatacloudDandBCompanyMinorityOwned
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyMinorityOwned o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyMinorityOwned(string s)
        {
            return new PickDatacloudDandBCompanyMinorityOwned {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyMinorityOwned Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyWomenOwnedConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyWomenOwned)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyWomenOwned {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyWomenOwnedConverter))]
    public class PickDatacloudDandBCompanyWomenOwned
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyWomenOwned o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyWomenOwned(string s)
        {
            return new PickDatacloudDandBCompanyWomenOwned {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyWomenOwned Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanySmallBusinessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanySmallBusiness)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanySmallBusiness {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanySmallBusinessConverter))]
    public class PickDatacloudDandBCompanySmallBusiness
    {
        public static readonly string  Y = "Y"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanySmallBusiness o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanySmallBusiness(string s)
        {
            return new PickDatacloudDandBCompanySmallBusiness {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanySmallBusiness Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyMarketingSegmentationClusterConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyMarketingSegmentationCluster)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyMarketingSegmentationCluster {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyMarketingSegmentationClusterConverter))]
    public class PickDatacloudDandBCompanyMarketingSegmentationCluster
    {
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _4 = "4"; 
        public static readonly string _5 = "5"; 
        public static readonly string _6 = "6"; 
        public static readonly string _7 = "7"; 
        public static readonly string _8 = "8"; 
        public static readonly string _9 = "9"; 
        public static readonly string _10 = "10"; 
        public static readonly string _11 = "11"; 
        public static readonly string _12 = "12"; 
        public static readonly string _13 = "13"; 
        public static readonly string _14 = "14"; 
        public static readonly string _15 = "15"; 
        public static readonly string _16 = "16"; 
        public static readonly string _17 = "17"; 
        public static readonly string _18 = "18"; 
        public static readonly string _19 = "19"; 
        public static readonly string _20 = "20"; 
        public static readonly string _21 = "21"; 
        public static readonly string _22 = "22"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyMarketingSegmentationCluster o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyMarketingSegmentationCluster(string s)
        {
            return new PickDatacloudDandBCompanyMarketingSegmentationCluster {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyMarketingSegmentationCluster Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyImportExportAgentConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyImportExportAgent)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyImportExportAgent {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyImportExportAgentConverter))]
    public class PickDatacloudDandBCompanyImportExportAgent
    {
        public static readonly string  A = "A"; 
        public static readonly string  B = "B"; 
        public static readonly string  C = "C"; 
        public static readonly string  D = "D"; 
        public static readonly string  E = "E"; 
        public static readonly string  F = "F"; 
        public static readonly string  G = "G"; 
        public static readonly string  H = "H"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyImportExportAgent o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyImportExportAgent(string s)
        {
            return new PickDatacloudDandBCompanyImportExportAgent {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyImportExportAgent Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanySubsidiaryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanySubsidiary)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanySubsidiary {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanySubsidiaryConverter))]
    public class PickDatacloudDandBCompanySubsidiary
    {
        public static readonly string _0 = "0"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanySubsidiary o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanySubsidiary(string s)
        {
            return new PickDatacloudDandBCompanySubsidiary {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanySubsidiary Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyNationalIdTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyNationalIdType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyNationalIdType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyNationalIdTypeConverter))]
    public class PickDatacloudDandBCompanyNationalIdType
    {
        public static readonly string _00010 = "00010"; 
        public static readonly string _00011 = "00011"; 
        public static readonly string _00100 = "00100"; 
        public static readonly string _00102 = "00102"; 
        public static readonly string _00103 = "00103"; 
        public static readonly string _00104 = "00104"; 
        public static readonly string _00105 = "00105"; 
        public static readonly string _00106 = "00106"; 
        public static readonly string _00107 = "00107"; 
        public static readonly string _00108 = "00108"; 
        public static readonly string _00109 = "00109"; 
        public static readonly string _00110 = "00110"; 
        public static readonly string _00111 = "00111"; 
        public static readonly string _00112 = "00112"; 
        public static readonly string _00113 = "00113"; 
        public static readonly string _00115 = "00115"; 
        public static readonly string _00119 = "00119"; 
        public static readonly string _00012 = "00012"; 
        public static readonly string _00120 = "00120"; 
        public static readonly string _00125 = "00125"; 
        public static readonly string _00127 = "00127"; 
        public static readonly string _00013 = "00013"; 
        public static readonly string _00130 = "00130"; 
        public static readonly string _00135 = "00135"; 
        public static readonly string _00014 = "00014"; 
        public static readonly string _00140 = "00140"; 
        public static readonly string _00145 = "00145"; 
        public static readonly string _00155 = "00155"; 
        public static readonly string _00016 = "00016"; 
        public static readonly string _00165 = "00165"; 
        public static readonly string _00017 = "00017"; 
        public static readonly string _00175 = "00175"; 
        public static readonly string _00018 = "00018"; 
        public static readonly string _00185 = "00185"; 
        public static readonly string _00019 = "00019"; 
        public static readonly string _00195 = "00195"; 
        public static readonly string _00020 = "00020"; 
        public static readonly string _00200 = "00200"; 
        public static readonly string _00021 = "00021"; 
        public static readonly string _00210 = "00210"; 
        public static readonly string _00211 = "00211"; 
        public static readonly string _00212 = "00212"; 
        public static readonly string _00022 = "00022"; 
        public static readonly string _00220 = "00220"; 
        public static readonly string _00230 = "00230"; 
        public static readonly string _00024 = "00024"; 
        public static readonly string _00240 = "00240"; 
        public static readonly string _00025 = "00025"; 
        public static readonly string _00250 = "00250"; 
        public static readonly string _00026 = "00026"; 
        public static readonly string _00260 = "00260"; 
        public static readonly string _00270 = "00270"; 
        public static readonly string _00281 = "00281"; 
        public static readonly string _00282 = "00282"; 
        public static readonly string _00283 = "00283"; 
        public static readonly string _00284 = "00284"; 
        public static readonly string _00285 = "00285"; 
        public static readonly string _00286 = "00286"; 
        public static readonly string _00290 = "00290"; 
        public static readonly string _00030 = "00030"; 
        public static readonly string _00300 = "00300"; 
        public static readonly string _00301 = "00301"; 
        public static readonly string _00302 = "00302"; 
        public static readonly string _00303 = "00303"; 
        public static readonly string _00304 = "00304"; 
        public static readonly string _00305 = "00305"; 
        public static readonly string _00306 = "00306"; 
        public static readonly string _00307 = "00307"; 
        public static readonly string _00308 = "00308"; 
        public static readonly string _00309 = "00309"; 
        public static readonly string _00031 = "00031"; 
        public static readonly string _00310 = "00310"; 
        public static readonly string _00311 = "00311"; 
        public static readonly string _00312 = "00312"; 
        public static readonly string _00313 = "00313"; 
        public static readonly string _00314 = "00314"; 
        public static readonly string _00315 = "00315"; 
        public static readonly string _00316 = "00316"; 
        public static readonly string _00317 = "00317"; 
        public static readonly string _00318 = "00318"; 
        public static readonly string _00032 = "00032"; 
        public static readonly string _00320 = "00320"; 
        public static readonly string _00321 = "00321"; 
        public static readonly string _00322 = "00322"; 
        public static readonly string _00323 = "00323"; 
        public static readonly string _00324 = "00324"; 
        public static readonly string _00325 = "00325"; 
        public static readonly string _00033 = "00033"; 
        public static readonly string _00034 = "00034"; 
        public static readonly string _00035 = "00035"; 
        public static readonly string _00036 = "00036"; 
        public static readonly string _00040 = "00040"; 
        public static readonly string _00045 = "00045"; 
        public static readonly string _00050 = "00050"; 
        public static readonly string _00521 = "00521"; 
        public static readonly string _00522 = "00522"; 
        public static readonly string _00523 = "00523"; 
        public static readonly string _00524 = "00524"; 
        public static readonly string _00525 = "00525"; 
        public static readonly string _00526 = "00526"; 
        public static readonly string _00527 = "00527"; 
        public static readonly string _00528 = "00528"; 
        public static readonly string _00529 = "00529"; 
        public static readonly string _00530 = "00530"; 
        public static readonly string _00531 = "00531"; 
        public static readonly string _00532 = "00532"; 
        public static readonly string _00533 = "00533"; 
        public static readonly string _00534 = "00534"; 
        public static readonly string _00535 = "00535"; 
        public static readonly string _00536 = "00536"; 
        public static readonly string _00537 = "00537"; 
        public static readonly string _00538 = "00538"; 
        public static readonly string _00539 = "00539"; 
        public static readonly string _00540 = "00540"; 
        public static readonly string _00541 = "00541"; 
        public static readonly string _00542 = "00542"; 
        public static readonly string _00543 = "00543"; 
        public static readonly string _00544 = "00544"; 
        public static readonly string _00545 = "00545"; 
        public static readonly string _00546 = "00546"; 
        public static readonly string _00547 = "00547"; 
        public static readonly string _00548 = "00548"; 
        public static readonly string _00549 = "00549"; 
        public static readonly string _00055 = "00055"; 
        public static readonly string _00550 = "00550"; 
        public static readonly string _00551 = "00551"; 
        public static readonly string _00552 = "00552"; 
        public static readonly string _00553 = "00553"; 
        public static readonly string _00554 = "00554"; 
        public static readonly string _00555 = "00555"; 
        public static readonly string _00556 = "00556"; 
        public static readonly string _00557 = "00557"; 
        public static readonly string _00558 = "00558"; 
        public static readonly string _00559 = "00559"; 
        public static readonly string _00560 = "00560"; 
        public static readonly string _00561 = "00561"; 
        public static readonly string _00562 = "00562"; 
        public static readonly string _00563 = "00563"; 
        public static readonly string _00564 = "00564"; 
        public static readonly string _00565 = "00565"; 
        public static readonly string _00566 = "00566"; 
        public static readonly string _00567 = "00567"; 
        public static readonly string _00568 = "00568"; 
        public static readonly string _00569 = "00569"; 
        public static readonly string _00570 = "00570"; 
        public static readonly string _00571 = "00571"; 
        public static readonly string _00572 = "00572"; 
        public static readonly string _00573 = "00573"; 
        public static readonly string _00574 = "00574"; 
        public static readonly string _00575 = "00575"; 
        public static readonly string _00576 = "00576"; 
        public static readonly string _00577 = "00577"; 
        public static readonly string _00578 = "00578"; 
        public static readonly string _00579 = "00579"; 
        public static readonly string _00580 = "00580"; 
        public static readonly string _00581 = "00581"; 
        public static readonly string _00582 = "00582"; 
        public static readonly string _00583 = "00583"; 
        public static readonly string _00584 = "00584"; 
        public static readonly string _00585 = "00585"; 
        public static readonly string _00586 = "00586"; 
        public static readonly string _00587 = "00587"; 
        public static readonly string _00588 = "00588"; 
        public static readonly string _00589 = "00589"; 
        public static readonly string _00590 = "00590"; 
        public static readonly string _00591 = "00591"; 
        public static readonly string _00592 = "00592"; 
        public static readonly string _00593 = "00593"; 
        public static readonly string _00594 = "00594"; 
        public static readonly string _00595 = "00595"; 
        public static readonly string _00596 = "00596"; 
        public static readonly string _00597 = "00597"; 
        public static readonly string _00598 = "00598"; 
        public static readonly string _00599 = "00599"; 
        public static readonly string _00060 = "00060"; 
        public static readonly string _00600 = "00600"; 
        public static readonly string _00601 = "00601"; 
        public static readonly string _00602 = "00602"; 
        public static readonly string _00603 = "00603"; 
        public static readonly string _00604 = "00604"; 
        public static readonly string _00605 = "00605"; 
        public static readonly string _00610 = "00610"; 
        public static readonly string _00620 = "00620"; 
        public static readonly string _00630 = "00630"; 
        public static readonly string _00640 = "00640"; 
        public static readonly string _00065 = "00065"; 
        public static readonly string _00650 = "00650"; 
        public static readonly string _00660 = "00660"; 
        public static readonly string _00670 = "00670"; 
        public static readonly string _00070 = "00070"; 
        public static readonly string _00702 = "00702"; 
        public static readonly string _00075 = "00075"; 
        public static readonly string _00080 = "00080"; 
        public static readonly string _00090 = "00090"; 
        public static readonly string _00095 = "00095"; 
        public static readonly string _00042 = "00042"; 
        public static readonly string _00043 = "00043"; 
        public static readonly string _00122 = "00122"; 
        public static readonly string _00330 = "00330"; 
        public static readonly string _00335 = "00335"; 
        public static readonly string _00340 = "00340"; 
        public static readonly string _00345 = "00345"; 
        public static readonly string _00350 = "00350"; 
        public static readonly string _00355 = "00355"; 
        public static readonly string _00360 = "00360"; 
        public static readonly string _00710 = "00710"; 
        public static readonly string _00715 = "00715"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyNationalIdType o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyNationalIdType(string s)
        {
            return new PickDatacloudDandBCompanyNationalIdType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyNationalIdType Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyGeoCodeAccuracyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyGeoCodeAccuracy)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyGeoCodeAccuracy {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyGeoCodeAccuracyConverter))]
    public class PickDatacloudDandBCompanyGeoCodeAccuracy
    {
        public static readonly string  D = "D"; 
        public static readonly string  S = "S"; 
        public static readonly string  B = "B"; 
        public static readonly string  T = "T"; 
        public static readonly string  M = "M"; 
        public static readonly string  Z = "Z"; 
        public static readonly string _0 = "0"; 
        public static readonly string  C = "C"; 
        public static readonly string  N = "N"; 
        public static readonly string  I = "I"; 
        public static readonly string  P = "P"; 
        public static readonly string  A = "A"; 
        public static readonly string  H = "H"; 
        public static readonly string  K = "K"; 
        public static readonly string  G = "G"; 
        public static readonly string  L = "L"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyGeoCodeAccuracy o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyGeoCodeAccuracy(string s)
        {
            return new PickDatacloudDandBCompanyGeoCodeAccuracy {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyGeoCodeAccuracy Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyMarketingPreScreenConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyMarketingPreScreen)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyMarketingPreScreen {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyMarketingPreScreenConverter))]
    public class PickDatacloudDandBCompanyMarketingPreScreen
    {
        public static readonly string  L = "L"; 
        public static readonly string  M = "M"; 
        public static readonly string  H = "H"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyMarketingPreScreen o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyMarketingPreScreen(string s)
        {
            return new PickDatacloudDandBCompanyMarketingPreScreen {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyMarketingPreScreen Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyLocationStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyLocationStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyLocationStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyLocationStatusConverter))]
    public class PickDatacloudDandBCompanyLocationStatus
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyLocationStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyLocationStatus(string s)
        {
            return new PickDatacloudDandBCompanyLocationStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyLocationStatus Parse(string text) => text;

        

    }
    public class PickDatacloudDandBCompanyCompanyCurrencyIsoCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudDandBCompanyCompanyCurrencyIsoCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudDandBCompanyCompanyCurrencyIsoCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudDandBCompanyCompanyCurrencyIsoCodeConverter))]
    public class PickDatacloudDandBCompanyCompanyCurrencyIsoCode
    {
        public static readonly string  AED = "AED"; 
        public static readonly string  AFN = "AFN"; 
        public static readonly string  ALL = "ALL"; 
        public static readonly string  AMD = "AMD"; 
        public static readonly string  ANG = "ANG"; 
        public static readonly string  AOA = "AOA"; 
        public static readonly string  ARS = "ARS"; 
        public static readonly string  AUD = "AUD"; 
        public static readonly string  AWG = "AWG"; 
        public static readonly string  AZN = "AZN"; 
        public static readonly string  BAM = "BAM"; 
        public static readonly string  BBD = "BBD"; 
        public static readonly string  BDT = "BDT"; 
        public static readonly string  BGN = "BGN"; 
        public static readonly string  BHD = "BHD"; 
        public static readonly string  BIF = "BIF"; 
        public static readonly string  BMD = "BMD"; 
        public static readonly string  BND = "BND"; 
        public static readonly string  BOB = "BOB"; 
        public static readonly string  BOV = "BOV"; 
        public static readonly string  BRB = "BRB"; 
        public static readonly string  BRL = "BRL"; 
        public static readonly string  BSD = "BSD"; 
        public static readonly string  BTN = "BTN"; 
        public static readonly string  BWP = "BWP"; 
        public static readonly string  BYR = "BYR"; 
        public static readonly string  BZD = "BZD"; 
        public static readonly string  CAD = "CAD"; 
        public static readonly string  CDF = "CDF"; 
        public static readonly string  CHF = "CHF"; 
        public static readonly string  CLF = "CLF"; 
        public static readonly string  CLP = "CLP"; 
        public static readonly string  CNY = "CNY"; 
        public static readonly string  COP = "COP"; 
        public static readonly string  CRC = "CRC"; 
        public static readonly string  CUC = "CUC"; 
        public static readonly string  CUP = "CUP"; 
        public static readonly string  CVE = "CVE"; 
        public static readonly string  CZK = "CZK"; 
        public static readonly string  DJF = "DJF"; 
        public static readonly string  DKK = "DKK"; 
        public static readonly string  DOP = "DOP"; 
        public static readonly string  DZD = "DZD"; 
        public static readonly string  EEK = "EEK"; 
        public static readonly string  EGP = "EGP"; 
        public static readonly string  ERN = "ERN"; 
        public static readonly string  ETB = "ETB"; 
        public static readonly string  EUR = "EUR"; 
        public static readonly string  FJD = "FJD"; 
        public static readonly string  FKP = "FKP"; 
        public static readonly string  GBP = "GBP"; 
        public static readonly string  GEL = "GEL"; 
        public static readonly string  GHS = "GHS"; 
        public static readonly string  GIP = "GIP"; 
        public static readonly string  GMD = "GMD"; 
        public static readonly string  GNF = "GNF"; 
        public static readonly string  GTQ = "GTQ"; 
        public static readonly string  GYD = "GYD"; 
        public static readonly string  HKD = "HKD"; 
        public static readonly string  HNL = "HNL"; 
        public static readonly string  HRD = "HRD"; 
        public static readonly string  HRK = "HRK"; 
        public static readonly string  HTG = "HTG"; 
        public static readonly string  HUF = "HUF"; 
        public static readonly string  IDR = "IDR"; 
        public static readonly string  ILS = "ILS"; 
        public static readonly string  INR = "INR"; 
        public static readonly string  IQD = "IQD"; 
        public static readonly string  IRR = "IRR"; 
        public static readonly string  ISK = "ISK"; 
        public static readonly string  JMD = "JMD"; 
        public static readonly string  JOD = "JOD"; 
        public static readonly string  JPY = "JPY"; 
        public static readonly string  KES = "KES"; 
        public static readonly string  KGS = "KGS"; 
        public static readonly string  KHR = "KHR"; 
        public static readonly string  KMF = "KMF"; 
        public static readonly string  KPW = "KPW"; 
        public static readonly string  KRW = "KRW"; 
        public static readonly string  KWD = "KWD"; 
        public static readonly string  KYD = "KYD"; 
        public static readonly string  KZT = "KZT"; 
        public static readonly string  LAK = "LAK"; 
        public static readonly string  LBP = "LBP"; 
        public static readonly string  LKR = "LKR"; 
        public static readonly string  LRD = "LRD"; 
        public static readonly string  LSL = "LSL"; 
        public static readonly string  LYD = "LYD"; 
        public static readonly string  MAD = "MAD"; 
        public static readonly string  MDL = "MDL"; 
        public static readonly string  MGA = "MGA"; 
        public static readonly string  MKD = "MKD"; 
        public static readonly string  MMK = "MMK"; 
        public static readonly string  MNT = "MNT"; 
        public static readonly string  MOP = "MOP"; 
        public static readonly string  MRO = "MRO"; 
        public static readonly string  MUR = "MUR"; 
        public static readonly string  MVR = "MVR"; 
        public static readonly string  MWK = "MWK"; 
        public static readonly string  MXN = "MXN"; 
        public static readonly string  MXV = "MXV"; 
        public static readonly string  MYR = "MYR"; 
        public static readonly string  MZN = "MZN"; 
        public static readonly string  NAD = "NAD"; 
        public static readonly string  NGN = "NGN"; 
        public static readonly string  NIO = "NIO"; 
        public static readonly string  NOK = "NOK"; 
        public static readonly string  NPR = "NPR"; 
        public static readonly string  NZD = "NZD"; 
        public static readonly string  OMR = "OMR"; 
        public static readonly string  PAB = "PAB"; 
        public static readonly string  PEN = "PEN"; 
        public static readonly string  PGK = "PGK"; 
        public static readonly string  PHP = "PHP"; 
        public static readonly string  PKR = "PKR"; 
        public static readonly string  PLN = "PLN"; 
        public static readonly string  PYG = "PYG"; 
        public static readonly string  QAR = "QAR"; 
        public static readonly string  RON = "RON"; 
        public static readonly string  RSD = "RSD"; 
        public static readonly string  RUB = "RUB"; 
        public static readonly string  RWF = "RWF"; 
        public static readonly string  SAR = "SAR"; 
        public static readonly string  SBD = "SBD"; 
        public static readonly string  SCR = "SCR"; 
        public static readonly string  SDG = "SDG"; 
        public static readonly string  SEK = "SEK"; 
        public static readonly string  SGD = "SGD"; 
        public static readonly string  SHP = "SHP"; 
        public static readonly string  SLL = "SLL"; 
        public static readonly string  SOS = "SOS"; 
        public static readonly string  SRD = "SRD"; 
        public static readonly string  SSP = "SSP"; 
        public static readonly string  STD = "STD"; 
        public static readonly string  SYP = "SYP"; 
        public static readonly string  SZL = "SZL"; 
        public static readonly string  THB = "THB"; 
        public static readonly string  TJS = "TJS"; 
        public static readonly string  TMT = "TMT"; 
        public static readonly string  TND = "TND"; 
        public static readonly string  TOP = "TOP"; 
        public static readonly string  TRY = "TRY"; 
        public static readonly string  TTD = "TTD"; 
        public static readonly string  TWD = "TWD"; 
        public static readonly string  TZS = "TZS"; 
        public static readonly string  UAH = "UAH"; 
        public static readonly string  UGX = "UGX"; 
        public static readonly string  USD = "USD"; 
        public static readonly string  UYU = "UYU"; 
        public static readonly string  UZS = "UZS"; 
        public static readonly string  VEF = "VEF"; 
        public static readonly string  VND = "VND"; 
        public static readonly string  VUV = "VUV"; 
        public static readonly string  WST = "WST"; 
        public static readonly string  XAF = "XAF"; 
        public static readonly string  XCD = "XCD"; 
        public static readonly string  XOF = "XOF"; 
        public static readonly string  XPF = "XPF"; 
        public static readonly string  YER = "YER"; 
        public static readonly string  ZAR = "ZAR"; 
        public static readonly string  ZMW = "ZMW"; 
        public static readonly string  ZWL = "ZWL"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudDandBCompanyCompanyCurrencyIsoCode o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudDandBCompanyCompanyCurrencyIsoCode(string s)
        {
            return new PickDatacloudDandBCompanyCompanyCurrencyIsoCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudDandBCompanyCompanyCurrencyIsoCode Parse(string text) => text;

        

    }
    public class PickDatacloudOwnedEntityDatacloudEntityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudOwnedEntityDatacloudEntityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudOwnedEntityDatacloudEntityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudOwnedEntityDatacloudEntityTypeConverter))]
    public class PickDatacloudOwnedEntityDatacloudEntityType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _4 = "4"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudOwnedEntityDatacloudEntityType o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudOwnedEntityDatacloudEntityType(string s)
        {
            return new PickDatacloudOwnedEntityDatacloudEntityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudOwnedEntityDatacloudEntityType Parse(string text) => text;

        

    }
    public class PickDatacloudOwnedEntityPurchaseTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudOwnedEntityPurchaseType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudOwnedEntityPurchaseType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudOwnedEntityPurchaseTypeConverter))]
    public class PickDatacloudOwnedEntityPurchaseType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudOwnedEntityPurchaseType o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudOwnedEntityPurchaseType(string s)
        {
            return new PickDatacloudOwnedEntityPurchaseType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudOwnedEntityPurchaseType Parse(string text) => text;

        

    }
    public class PickDatacloudPurchaseUsageUserTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudPurchaseUsageUserType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudPurchaseUsageUserType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudPurchaseUsageUserTypeConverter))]
    public class PickDatacloudPurchaseUsageUserType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudPurchaseUsageUserType o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudPurchaseUsageUserType(string s)
        {
            return new PickDatacloudPurchaseUsageUserType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudPurchaseUsageUserType Parse(string text) => text;

        

    }
    public class PickDatacloudPurchaseUsagePurchaseTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudPurchaseUsagePurchaseType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudPurchaseUsagePurchaseType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudPurchaseUsagePurchaseTypeConverter))]
    public class PickDatacloudPurchaseUsagePurchaseType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudPurchaseUsagePurchaseType o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudPurchaseUsagePurchaseType(string s)
        {
            return new PickDatacloudPurchaseUsagePurchaseType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudPurchaseUsagePurchaseType Parse(string text) => text;

        

    }
    public class PickDatacloudPurchaseUsageDatacloudEntityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDatacloudPurchaseUsageDatacloudEntityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDatacloudPurchaseUsageDatacloudEntityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDatacloudPurchaseUsageDatacloudEntityTypeConverter))]
    public class PickDatacloudPurchaseUsageDatacloudEntityType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _4 = "4"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDatacloudPurchaseUsageDatacloudEntityType o)
        {
            return o.Value;
        }

        public static implicit operator PickDatacloudPurchaseUsageDatacloudEntityType(string s)
        {
            return new PickDatacloudPurchaseUsageDatacloudEntityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDatacloudPurchaseUsageDatacloudEntityType Parse(string text) => text;

        

    }
    public class PickDomainDomainTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickDomainDomainType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickDomainDomainType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickDomainDomainTypeConverter))]
    public class PickDomainDomainType
    {
        public static readonly string  DNS = "DNS"; 
        public static readonly string  FacebookPage = "FacebookPage"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickDomainDomainType o)
        {
            return o.Value;
        }

        public static implicit operator PickDomainDomainType(string s)
        {
            return new PickDomainDomainType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickDomainDomainType Parse(string text) => text;

        

    }
    public class PickEmailDomainKeyDomainMatchConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailDomainKeyDomainMatch)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailDomainKeyDomainMatch {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailDomainKeyDomainMatchConverter))]
    public class PickEmailDomainKeyDomainMatch
    {
        public static readonly string  DomainOnly = "DomainOnly"; 
        public static readonly string  SubdomainsOnly = "SubdomainsOnly"; 
        public static readonly string  DomainAndSubdomains = "DomainAndSubdomains"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailDomainKeyDomainMatch o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailDomainKeyDomainMatch(string s)
        {
            return new PickEmailDomainKeyDomainMatch {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailDomainKeyDomainMatch Parse(string text) => text;

        

    }
    public class PickEmailMessageStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailMessageStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailMessageStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailMessageStatusConverter))]
    public class PickEmailMessageStatus
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _4 = "4"; 
        public static readonly string _5 = "5"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailMessageStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailMessageStatus(string s)
        {
            return new PickEmailMessageStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailMessageStatus Parse(string text) => text;

        

    }
    public class PickEmailServicesFunctionAttachmentOptionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailServicesFunctionAttachmentOption)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailServicesFunctionAttachmentOption {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailServicesFunctionAttachmentOptionConverter))]
    public class PickEmailServicesFunctionAttachmentOption
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _4 = "4"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailServicesFunctionAttachmentOption o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailServicesFunctionAttachmentOption(string s)
        {
            return new PickEmailServicesFunctionAttachmentOption {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailServicesFunctionAttachmentOption Parse(string text) => text;

        

    }
    public class PickEmailServicesFunctionOverLimitActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailServicesFunctionOverLimitAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailServicesFunctionOverLimitAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailServicesFunctionOverLimitActionConverter))]
    public class PickEmailServicesFunctionOverLimitAction
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailServicesFunctionOverLimitAction o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailServicesFunctionOverLimitAction(string s)
        {
            return new PickEmailServicesFunctionOverLimitAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailServicesFunctionOverLimitAction Parse(string text) => text;

        

    }
    public class PickEmailServicesFunctionFunctionInactiveActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailServicesFunctionFunctionInactiveAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailServicesFunctionFunctionInactiveAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailServicesFunctionFunctionInactiveActionConverter))]
    public class PickEmailServicesFunctionFunctionInactiveAction
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailServicesFunctionFunctionInactiveAction o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailServicesFunctionFunctionInactiveAction(string s)
        {
            return new PickEmailServicesFunctionFunctionInactiveAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailServicesFunctionFunctionInactiveAction Parse(string text) => text;

        

    }
    public class PickEmailServicesFunctionAddressInactiveActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailServicesFunctionAddressInactiveAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailServicesFunctionAddressInactiveAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailServicesFunctionAddressInactiveActionConverter))]
    public class PickEmailServicesFunctionAddressInactiveAction
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailServicesFunctionAddressInactiveAction o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailServicesFunctionAddressInactiveAction(string s)
        {
            return new PickEmailServicesFunctionAddressInactiveAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailServicesFunctionAddressInactiveAction Parse(string text) => text;

        

    }
    public class PickEmailServicesFunctionAuthenticationFailureActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailServicesFunctionAuthenticationFailureAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailServicesFunctionAuthenticationFailureAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailServicesFunctionAuthenticationFailureActionConverter))]
    public class PickEmailServicesFunctionAuthenticationFailureAction
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailServicesFunctionAuthenticationFailureAction o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailServicesFunctionAuthenticationFailureAction(string s)
        {
            return new PickEmailServicesFunctionAuthenticationFailureAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailServicesFunctionAuthenticationFailureAction Parse(string text) => text;

        

    }
    public class PickEmailServicesFunctionAuthorizationFailureActionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailServicesFunctionAuthorizationFailureAction)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailServicesFunctionAuthorizationFailureAction {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailServicesFunctionAuthorizationFailureActionConverter))]
    public class PickEmailServicesFunctionAuthorizationFailureAction
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailServicesFunctionAuthorizationFailureAction o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailServicesFunctionAuthorizationFailureAction(string s)
        {
            return new PickEmailServicesFunctionAuthorizationFailureAction {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailServicesFunctionAuthorizationFailureAction Parse(string text) => text;

        

    }
    public class PickEmailTemplateTemplateStyleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailTemplateTemplateStyle)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailTemplateTemplateStyle {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailTemplateTemplateStyleConverter))]
    public class PickEmailTemplateTemplateStyle
    {
        public static readonly string  none = "none"; 
        public static readonly string  freeForm = "freeForm"; 
        public static readonly string  formalLetter = "formalLetter"; 
        public static readonly string  promotionRight = "promotionRight"; 
        public static readonly string  promotionLeft = "promotionLeft"; 
        public static readonly string  newsletter = "newsletter"; 
        public static readonly string  products = "products"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailTemplateTemplateStyle o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailTemplateTemplateStyle(string s)
        {
            return new PickEmailTemplateTemplateStyle {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailTemplateTemplateStyle Parse(string text) => text;

        

    }
    public class PickEmailTemplateTemplateTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailTemplateTemplateType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailTemplateTemplateType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailTemplateTemplateTypeConverter))]
    public class PickEmailTemplateTemplateType
    {
        public static readonly string  text = "text"; 
        public static readonly string  html = "html"; 
        public static readonly string  custom = "custom"; 
        public static readonly string  visualforce = "visualforce"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailTemplateTemplateType o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailTemplateTemplateType(string s)
        {
            return new PickEmailTemplateTemplateType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailTemplateTemplateType Parse(string text) => text;

        

    }
    public class PickEmailTemplateEncodingConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEmailTemplateEncoding)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEmailTemplateEncoding {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEmailTemplateEncodingConverter))]
    public class PickEmailTemplateEncoding
    {
        public static readonly string  UTF8 = "UTF-8"; 
        public static readonly string  ISO88591 = "ISO-8859-1"; 
        public static readonly string  ShiftJIS = "Shift_JIS"; 
        public static readonly string  ISO2022JP = "ISO-2022-JP"; 
        public static readonly string  EUCJP = "EUC-JP"; 
        public static readonly string  ksc56011987 = "ks_c_5601-1987"; 
        public static readonly string  Big5 = "Big5"; 
        public static readonly string  GB2312 = "GB2312"; 
        public static readonly string  Big5HKSCS = "Big5-HKSCS"; 
        public static readonly string  xSJIS0213 = "x-SJIS_0213"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEmailTemplateEncoding o)
        {
            return o.Value;
        }

        public static implicit operator PickEmailTemplateEncoding(string s)
        {
            return new PickEmailTemplateEncoding {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEmailTemplateEncoding Parse(string text) => text;

        

    }
    public class PickEventShowAsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventShowAs)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventShowAs {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventShowAsConverter))]
    public class PickEventShowAs
    {
        public static readonly string  Busy = "Busy"; 
        public static readonly string  OutOfOffice = "OutOfOffice"; 
        public static readonly string  Free = "Free"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventShowAs o)
        {
            return o.Value;
        }

        public static implicit operator PickEventShowAs(string s)
        {
            return new PickEventShowAs {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventShowAs Parse(string text) => text;

        

    }
    public class PickEventGroupEventTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventGroupEventType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventGroupEventType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventGroupEventTypeConverter))]
    public class PickEventGroupEventType
    {
        public static readonly string _0 = "0"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventGroupEventType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventGroupEventType(string s)
        {
            return new PickEventGroupEventType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventGroupEventType Parse(string text) => text;

        

    }
    public class PickEventRecurrenceTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceTimeZoneSidKeyConverter))]
    public class PickEventRecurrenceTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceTimeZoneSidKey(string s)
        {
            return new PickEventRecurrenceTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickEventRecurrenceTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceTypeConverter))]
    public class PickEventRecurrenceType
    {
        public static readonly string  RecursDaily = "RecursDaily"; 
        public static readonly string  RecursEveryWeekday = "RecursEveryWeekday"; 
        public static readonly string  RecursMonthly = "RecursMonthly"; 
        public static readonly string  RecursMonthlyNth = "RecursMonthlyNth"; 
        public static readonly string  RecursWeekly = "RecursWeekly"; 
        public static readonly string  RecursYearly = "RecursYearly"; 
        public static readonly string  RecursYearlyNth = "RecursYearlyNth"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceType(string s)
        {
            return new PickEventRecurrenceType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceType Parse(string text) => text;

        

    }
    public class PickEventRecurrenceInstanceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceInstance)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceInstance {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceInstanceConverter))]
    public class PickEventRecurrenceInstance
    {
        public static readonly string  First = "First"; 
        public static readonly string  Second = "Second"; 
        public static readonly string  Third = "Third"; 
        public static readonly string  Fourth = "Fourth"; 
        public static readonly string  Last = "Last"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceInstance o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceInstance(string s)
        {
            return new PickEventRecurrenceInstance {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceInstance Parse(string text) => text;

        

    }
    public class PickEventRecurrenceMonthOfYearConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRecurrenceMonthOfYear)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRecurrenceMonthOfYear {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRecurrenceMonthOfYearConverter))]
    public class PickEventRecurrenceMonthOfYear
    {
        public static readonly string  January = "January"; 
        public static readonly string  February = "February"; 
        public static readonly string  March = "March"; 
        public static readonly string  April = "April"; 
        public static readonly string  May = "May"; 
        public static readonly string  June = "June"; 
        public static readonly string  July = "July"; 
        public static readonly string  August = "August"; 
        public static readonly string  September = "September"; 
        public static readonly string  October = "October"; 
        public static readonly string  November = "November"; 
        public static readonly string  December = "December"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRecurrenceMonthOfYear o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRecurrenceMonthOfYear(string s)
        {
            return new PickEventRecurrenceMonthOfYear {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRecurrenceMonthOfYear Parse(string text) => text;

        

    }
    public class PickEventFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventFeedTypeConverter))]
    public class PickEventFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventFeedType(string s)
        {
            return new PickEventFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventFeedType Parse(string text) => text;

        

    }
    public class PickEventLogFileEventTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventLogFileEventType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventLogFileEventType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventLogFileEventTypeConverter))]
    public class PickEventLogFileEventType
    {
        public static readonly string  API = "API"; 
        public static readonly string  ApexCallout = "ApexCallout"; 
        public static readonly string  ApexExecution = "ApexExecution"; 
        public static readonly string  ApexSoap = "ApexSoap"; 
        public static readonly string  ApexTrigger = "ApexTrigger"; 
        public static readonly string  AsyncReportRun = "AsyncReportRun"; 
        public static readonly string  BulkApi = "BulkApi"; 
        public static readonly string  ChangeSetOperation = "ChangeSetOperation"; 
        public static readonly string  Console = "Console"; 
        public static readonly string  ContentDistribution = "ContentDistribution"; 
        public static readonly string  ContentDocumentLink = "ContentDocumentLink"; 
        public static readonly string  ContentTransfer = "ContentTransfer"; 
        public static readonly string  Dashboard = "Dashboard"; 
        public static readonly string  DocumentAttachmentDownloads = "DocumentAttachmentDownloads"; 
        public static readonly string  LightningError = "LightningError"; 
        public static readonly string  LightningInteraction = "LightningInteraction"; 
        public static readonly string  LightningPageView = "LightningPageView"; 
        public static readonly string  LightningPerformance = "LightningPerformance"; 
        public static readonly string  Login = "Login"; 
        public static readonly string  LoginAs = "LoginAs"; 
        public static readonly string  Logout = "Logout"; 
        public static readonly string  MetadataApiOperation = "MetadataApiOperation"; 
        public static readonly string  MultiBlockReport = "MultiBlockReport"; 
        public static readonly string  PackageInstall = "PackageInstall"; 
        public static readonly string  QueuedExecution = "QueuedExecution"; 
        public static readonly string  Report = "Report"; 
        public static readonly string  ReportExport = "ReportExport"; 
        public static readonly string  RestApi = "RestApi"; 
        public static readonly string  Sandbox = "Sandbox"; 
        public static readonly string  Sites = "Sites"; 
        public static readonly string  TimeBasedWorkflow = "TimeBasedWorkflow"; 
        public static readonly string  TransactionSecurity = "TransactionSecurity"; 
        public static readonly string  UITracking = "UITracking"; 
        public static readonly string  URI = "URI"; 
        public static readonly string  VisualforceRequest = "VisualforceRequest"; 
        public static readonly string  WaveChange = "WaveChange"; 
        public static readonly string  WaveInteraction = "WaveInteraction"; 
        public static readonly string  WavePerformance = "WavePerformance"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventLogFileEventType o)
        {
            return o.Value;
        }

        public static implicit operator PickEventLogFileEventType(string s)
        {
            return new PickEventLogFileEventType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventLogFileEventType Parse(string text) => text;

        

    }
    public class PickEventRelationStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickEventRelationStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickEventRelationStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickEventRelationStatusConverter))]
    public class PickEventRelationStatus
    {
        public static readonly string  New = "New"; 
        public static readonly string  Declined = "Declined"; 
        public static readonly string  Accepted = "Accepted"; 
        public static readonly string  Uninvited = "Uninvited"; 
        public static readonly string  Maybe = "Maybe"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickEventRelationStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickEventRelationStatus(string s)
        {
            return new PickEventRelationStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickEventRelationStatus Parse(string text) => text;

        

    }
    public class PickExternalDataSourceLanguageConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickExternalDataSourceLanguage)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickExternalDataSourceLanguage {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickExternalDataSourceLanguageConverter))]
    public class PickExternalDataSourceLanguage
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickExternalDataSourceLanguage o)
        {
            return o.Value;
        }

        public static implicit operator PickExternalDataSourceLanguage(string s)
        {
            return new PickExternalDataSourceLanguage {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickExternalDataSourceLanguage Parse(string text) => text;

        

    }
    public class PickExternalDataSourceTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickExternalDataSourceType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickExternalDataSourceType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickExternalDataSourceTypeConverter))]
    public class PickExternalDataSourceType
    {
        public static readonly string  Datacloud = "Datacloud"; 
        public static readonly string  Datajourney = "Datajourney"; 
        public static readonly string  OData = "OData"; 
        public static readonly string  OData4 = "OData4"; 
        public static readonly string  outgoingemail = "outgoingemail"; 
        public static readonly string  SfdcOrg = "SfdcOrg"; 
        public static readonly string  SimpleURL = "SimpleURL"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickExternalDataSourceType o)
        {
            return o.Value;
        }

        public static implicit operator PickExternalDataSourceType(string s)
        {
            return new PickExternalDataSourceType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickExternalDataSourceType Parse(string text) => text;

        

    }
    public class PickExternalDataSourcePrincipalTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickExternalDataSourcePrincipalType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickExternalDataSourcePrincipalType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickExternalDataSourcePrincipalTypeConverter))]
    public class PickExternalDataSourcePrincipalType
    {
        public static readonly string  Anonymous = "Anonymous"; 
        public static readonly string  PerUser = "PerUser"; 
        public static readonly string  NamedUser = "NamedUser"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickExternalDataSourcePrincipalType o)
        {
            return o.Value;
        }

        public static implicit operator PickExternalDataSourcePrincipalType(string s)
        {
            return new PickExternalDataSourcePrincipalType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickExternalDataSourcePrincipalType Parse(string text) => text;

        

    }
    public class PickExternalDataUserAuthProtocolConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickExternalDataUserAuthProtocol)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickExternalDataUserAuthProtocol {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickExternalDataUserAuthProtocolConverter))]
    public class PickExternalDataUserAuthProtocol
    {
        public static readonly string  NoAuthentication = "NoAuthentication"; 
        public static readonly string  Oauth = "Oauth"; 
        public static readonly string  Password = "Password"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickExternalDataUserAuthProtocol o)
        {
            return o.Value;
        }

        public static implicit operator PickExternalDataUserAuthProtocol(string s)
        {
            return new PickExternalDataUserAuthProtocol {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickExternalDataUserAuthProtocol Parse(string text) => text;

        

    }
    public class PickFeedCommentCommentTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFeedCommentCommentType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFeedCommentCommentType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFeedCommentCommentTypeConverter))]
    public class PickFeedCommentCommentType
    {
        public static readonly string  TextComment = "TextComment"; 
        public static readonly string  ContentComment = "ContentComment"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFeedCommentCommentType o)
        {
            return o.Value;
        }

        public static implicit operator PickFeedCommentCommentType(string s)
        {
            return new PickFeedCommentCommentType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFeedCommentCommentType Parse(string text) => text;

        

    }
    public class PickFeedItemTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFeedItemType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFeedItemType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFeedItemTypeConverter))]
    public class PickFeedItemType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFeedItemType o)
        {
            return o.Value;
        }

        public static implicit operator PickFeedItemType(string s)
        {
            return new PickFeedItemType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFeedItemType Parse(string text) => text;

        

    }
    public class PickFieldPermissionsSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFieldPermissionsSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFieldPermissionsSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFieldPermissionsSobjectTypeConverter))]
    public class PickFieldPermissionsSobjectType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  CampaignMember = "CampaignMember"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  DuplicateRecordItem = "DuplicateRecordItem"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  EmailMessage = "EmailMessage"; 
        public static readonly string  Event = "Event"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  GoalLink = "GoalLink"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  OpportunityLineItem = "OpportunityLineItem"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  OrderItem = "OrderItem"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  PricebookEntry = "PricebookEntry"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  Task = "Task"; 
        public static readonly string  User = "User"; 
        public static readonly string  UserProvisioningRequest = "UserProvisioningRequest"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFieldPermissionsSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickFieldPermissionsSobjectType(string s)
        {
            return new PickFieldPermissionsSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFieldPermissionsSobjectType Parse(string text) => text;

        

    }
    public class PickFieldPermissionsFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFieldPermissionsField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFieldPermissionsField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFieldPermissionsFieldConverter))]
    public class PickFieldPermissionsField
    {
        public static readonly string  AccountAccountNumber = "Account.AccountNumber"; 
        public static readonly string  AccountAccountSource = "Account.AccountSource"; 
        public static readonly string  AccountActivec = "Account.Active__c"; 
        public static readonly string  AccountActivityTypec = "Account.ActivityType__c"; 
        public static readonly string  AccountAnnualRevenue = "Account.AnnualRevenue"; 
        public static readonly string  AccountBillingAddress = "Account.BillingAddress"; 
        public static readonly string  AccountCleanStatus = "Account.CleanStatus"; 
        public static readonly string  AccountCustomerPriorityc = "Account.CustomerPriority__c"; 
        public static readonly string  AccountDandbCompany = "Account.DandbCompany"; 
        public static readonly string  AccountDescription = "Account.Description"; 
        public static readonly string  AccountDunsNumber = "Account.DunsNumber"; 
        public static readonly string  AccountFax = "Account.Fax"; 
        public static readonly string  AccountIndustry = "Account.Industry"; 
        public static readonly string  AccountJigsaw = "Account.Jigsaw"; 
        public static readonly string  AccountNaicsCode = "Account.NaicsCode"; 
        public static readonly string  AccountNaicsDesc = "Account.NaicsDesc"; 
        public static readonly string  AccountNumberBugc = "Account.NumberBug__c"; 
        public static readonly string  AccountNumberOfEmployees = "Account.NumberOfEmployees"; 
        public static readonly string  AccountNumberofLocationsc = "Account.NumberofLocations__c"; 
        public static readonly string  AccountOwnership = "Account.Ownership"; 
        public static readonly string  AccountParent = "Account.Parent"; 
        public static readonly string  AccountPhone = "Account.Phone"; 
        public static readonly string  AccountRating = "Account.Rating"; 
        public static readonly string  AccountShippingAddress = "Account.ShippingAddress"; 
        public static readonly string  AccountSic = "Account.Sic"; 
        public static readonly string  AccountSicDesc = "Account.SicDesc"; 
        public static readonly string  AccountSite = "Account.Site"; 
        public static readonly string  AccountSLAc = "Account.SLA__c"; 
        public static readonly string  AccountSLAExpirationDatec = "Account.SLAExpirationDate__c"; 
        public static readonly string  AccountSLASerialNumberc = "Account.SLASerialNumber__c"; 
        public static readonly string  AccountTickerSymbol = "Account.TickerSymbol"; 
        public static readonly string  AccountTradestyle = "Account.Tradestyle"; 
        public static readonly string  AccountType = "Account.Type"; 
        public static readonly string  AccountUpsellOpportunityc = "Account.UpsellOpportunity__c"; 
        public static readonly string  AccountWebsite = "Account.Website"; 
        public static readonly string  AccountYearStarted = "Account.YearStarted"; 
        public static readonly string  AssetAccount = "Asset.Account"; 
        public static readonly string  AssetContact = "Asset.Contact"; 
        public static readonly string  AssetDescription = "Asset.Description"; 
        public static readonly string  AssetInstallDate = "Asset.InstallDate"; 
        public static readonly string  AssetIsCompetitorProduct = "Asset.IsCompetitorProduct"; 
        public static readonly string  AssetPrice = "Asset.Price"; 
        public static readonly string  AssetProduct2 = "Asset.Product2"; 
        public static readonly string  AssetProductCode = "Asset.ProductCode"; 
        public static readonly string  AssetProductDescription = "Asset.ProductDescription"; 
        public static readonly string  AssetProductFamily = "Asset.ProductFamily"; 
        public static readonly string  AssetPurchaseDate = "Asset.PurchaseDate"; 
        public static readonly string  AssetQuantity = "Asset.Quantity"; 
        public static readonly string  AssetSerialNumber = "Asset.SerialNumber"; 
        public static readonly string  AssetStatus = "Asset.Status"; 
        public static readonly string  AssetUsageEndDate = "Asset.UsageEndDate"; 
        public static readonly string  CampaignActualCost = "Campaign.ActualCost"; 
        public static readonly string  CampaignAmountAllOpportunities = "Campaign.AmountAllOpportunities"; 
        public static readonly string  CampaignAmountWonOpportunities = "Campaign.AmountWonOpportunities"; 
        public static readonly string  CampaignBudgetedCost = "Campaign.BudgetedCost"; 
        public static readonly string  CampaignDescription = "Campaign.Description"; 
        public static readonly string  CampaignEndDate = "Campaign.EndDate"; 
        public static readonly string  CampaignExpectedResponse = "Campaign.ExpectedResponse"; 
        public static readonly string  CampaignExpectedRevenue = "Campaign.ExpectedRevenue"; 
        public static readonly string  CampaignHierarchyActualCost = "Campaign.HierarchyActualCost"; 
        public static readonly string  CampaignHierarchyAmountAllOpportunities = "Campaign.HierarchyAmountAllOpportunities"; 
        public static readonly string  CampaignHierarchyAmountWonOpportunities = "Campaign.HierarchyAmountWonOpportunities"; 
        public static readonly string  CampaignHierarchyBudgetedCost = "Campaign.HierarchyBudgetedCost"; 
        public static readonly string  CampaignHierarchyExpectedRevenue = "Campaign.HierarchyExpectedRevenue"; 
        public static readonly string  CampaignHierarchyNumberOfContacts = "Campaign.HierarchyNumberOfContacts"; 
        public static readonly string  CampaignHierarchyNumberOfConvertedLeads = "Campaign.HierarchyNumberOfConvertedLeads"; 
        public static readonly string  CampaignHierarchyNumberOfLeads = "Campaign.HierarchyNumberOfLeads"; 
        public static readonly string  CampaignHierarchyNumberOfOpportunities = "Campaign.HierarchyNumberOfOpportunities"; 
        public static readonly string  CampaignHierarchyNumberOfResponses = "Campaign.HierarchyNumberOfResponses"; 
        public static readonly string  CampaignHierarchyNumberOfWonOpportunities = "Campaign.HierarchyNumberOfWonOpportunities"; 
        public static readonly string  CampaignHierarchyNumberSent = "Campaign.HierarchyNumberSent"; 
        public static readonly string  CampaignIsActive = "Campaign.IsActive"; 
        public static readonly string  CampaignNumberOfContacts = "Campaign.NumberOfContacts"; 
        public static readonly string  CampaignNumberOfConvertedLeads = "Campaign.NumberOfConvertedLeads"; 
        public static readonly string  CampaignNumberOfLeads = "Campaign.NumberOfLeads"; 
        public static readonly string  CampaignNumberOfOpportunities = "Campaign.NumberOfOpportunities"; 
        public static readonly string  CampaignNumberOfResponses = "Campaign.NumberOfResponses"; 
        public static readonly string  CampaignNumberOfWonOpportunities = "Campaign.NumberOfWonOpportunities"; 
        public static readonly string  CampaignNumberSent = "Campaign.NumberSent"; 
        public static readonly string  CampaignParent = "Campaign.Parent"; 
        public static readonly string  CampaignStartDate = "Campaign.StartDate"; 
        public static readonly string  CampaignStatus = "Campaign.Status"; 
        public static readonly string  CampaignType = "Campaign.Type"; 
        public static readonly string  CaseAccount = "Case.Account"; 
        public static readonly string  CaseAsset = "Case.Asset"; 
        public static readonly string  CaseBusinessHours = "Case.BusinessHours"; 
        public static readonly string  CaseClosedDate = "Case.ClosedDate"; 
        public static readonly string  CaseContact = "Case.Contact"; 
        public static readonly string  CaseDescription = "Case.Description"; 
        public static readonly string  CaseEngineeringReqNumberc = "Case.EngineeringReqNumber__c"; 
        public static readonly string  CaseIsClosedOnCreate = "Case.IsClosedOnCreate"; 
        public static readonly string  CaseIsEscalated = "Case.IsEscalated"; 
        public static readonly string  CaseOrigin = "Case.Origin"; 
        public static readonly string  CaseParent = "Case.Parent"; 
        public static readonly string  CasePotentialLiabilityc = "Case.PotentialLiability__c"; 
        public static readonly string  CasePriority = "Case.Priority"; 
        public static readonly string  CaseProductc = "Case.Product__c"; 
        public static readonly string  CaseReason = "Case.Reason"; 
        public static readonly string  CaseSLAViolationc = "Case.SLAViolation__c"; 
        public static readonly string  CaseSubject = "Case.Subject"; 
        public static readonly string  CaseSuppliedCompany = "Case.SuppliedCompany"; 
        public static readonly string  CaseSuppliedEmail = "Case.SuppliedEmail"; 
        public static readonly string  CaseSuppliedName = "Case.SuppliedName"; 
        public static readonly string  CaseSuppliedPhone = "Case.SuppliedPhone"; 
        public static readonly string  CaseType = "Case.Type"; 
        public static readonly string  ContactAccount = "Contact.Account"; 
        public static readonly string  ContactAssistantName = "Contact.AssistantName"; 
        public static readonly string  ContactAssistantPhone = "Contact.AssistantPhone"; 
        public static readonly string  ContactBirthdate = "Contact.Birthdate"; 
        public static readonly string  ContactCleanStatus = "Contact.CleanStatus"; 
        public static readonly string  ContactDepartment = "Contact.Department"; 
        public static readonly string  ContactDescription = "Contact.Description"; 
        public static readonly string  ContactDoNotCall = "Contact.DoNotCall"; 
        public static readonly string  ContactEmail = "Contact.Email"; 
        public static readonly string  ContactFax = "Contact.Fax"; 
        public static readonly string  ContactHasOptedOutOfEmail = "Contact.HasOptedOutOfEmail"; 
        public static readonly string  ContactHasOptedOutOfFax = "Contact.HasOptedOutOfFax"; 
        public static readonly string  ContactHomePhone = "Contact.HomePhone"; 
        public static readonly string  ContactJigsaw = "Contact.Jigsaw"; 
        public static readonly string  ContactLanguagesc = "Contact.Languages__c"; 
        public static readonly string  ContactLeadSource = "Contact.LeadSource"; 
        public static readonly string  ContactLevelc = "Contact.Level__c"; 
        public static readonly string  ContactMailingAddress = "Contact.MailingAddress"; 
        public static readonly string  ContactMobilePhone = "Contact.MobilePhone"; 
        public static readonly string  ContactOtherAddress = "Contact.OtherAddress"; 
        public static readonly string  ContactOtherPhone = "Contact.OtherPhone"; 
        public static readonly string  ContactPhone = "Contact.Phone"; 
        public static readonly string  ContactReportsTo = "Contact.ReportsTo"; 
        public static readonly string  ContactTitle = "Contact.Title"; 
        public static readonly string  ContractActivatedBy = "Contract.ActivatedBy"; 
        public static readonly string  ContractActivatedDate = "Contract.ActivatedDate"; 
        public static readonly string  ContractBillingAddress = "Contract.BillingAddress"; 
        public static readonly string  ContractCompanySigned = "Contract.CompanySigned"; 
        public static readonly string  ContractCompanySignedDate = "Contract.CompanySignedDate"; 
        public static readonly string  ContractContractTerm = "Contract.ContractTerm"; 
        public static readonly string  ContractCustomerSigned = "Contract.CustomerSigned"; 
        public static readonly string  ContractCustomerSignedDate = "Contract.CustomerSignedDate"; 
        public static readonly string  ContractCustomerSignedTitle = "Contract.CustomerSignedTitle"; 
        public static readonly string  ContractDescription = "Contract.Description"; 
        public static readonly string  ContractEndDate = "Contract.EndDate"; 
        public static readonly string  ContractName = "Contract.Name"; 
        public static readonly string  ContractOwnerExpirationNotice = "Contract.OwnerExpirationNotice"; 
        public static readonly string  ContractPricebook2 = "Contract.Pricebook2"; 
        public static readonly string  ContractShippingAddress = "Contract.ShippingAddress"; 
        public static readonly string  ContractSpecialTerms = "Contract.SpecialTerms"; 
        public static readonly string  ContractStartDate = "Contract.StartDate"; 
        public static readonly string  EventDescription = "Event.Description"; 
        public static readonly string  EventIsAllDayEvent = "Event.IsAllDayEvent"; 
        public static readonly string  EventLocation = "Event.Location"; 
        public static readonly string  EventType = "Event.Type"; 
        public static readonly string  EventWhat = "Event.What"; 
        public static readonly string  EventWho = "Event.Who"; 
        public static readonly string  GoalCompletionDate = "Goal.CompletionDate"; 
        public static readonly string  GoalIsKeyCompanyGoal = "Goal.IsKeyCompanyGoal"; 
        public static readonly string  GoalOrigGoalIdc = "Goal.OrigGoalId__c"; 
        public static readonly string  IdeaAttachment = "Idea.Attachment"; 
        public static readonly string  IdeaStatus = "Idea.Status"; 
        public static readonly string  LeadAddress = "Lead.Address"; 
        public static readonly string  LeadAnnualRevenue = "Lead.AnnualRevenue"; 
        public static readonly string  LeadCleanStatus = "Lead.CleanStatus"; 
        public static readonly string  LeadCompanyDunsNumber = "Lead.CompanyDunsNumber"; 
        public static readonly string  LeadCurrentGeneratorsc = "Lead.CurrentGenerators__c"; 
        public static readonly string  LeadDandbCompany = "Lead.DandbCompany"; 
        public static readonly string  LeadDescription = "Lead.Description"; 
        public static readonly string  LeadDoNotCall = "Lead.DoNotCall"; 
        public static readonly string  LeadEmail = "Lead.Email"; 
        public static readonly string  LeadFax = "Lead.Fax"; 
        public static readonly string  LeadHasOptedOutOfEmail = "Lead.HasOptedOutOfEmail"; 
        public static readonly string  LeadHasOptedOutOfFax = "Lead.HasOptedOutOfFax"; 
        public static readonly string  LeadIndustry = "Lead.Industry"; 
        public static readonly string  LeadJigsaw = "Lead.Jigsaw"; 
        public static readonly string  LeadLastTransferDate = "Lead.LastTransferDate"; 
        public static readonly string  LeadLeadSource = "Lead.LeadSource"; 
        public static readonly string  LeadMobilePhone = "Lead.MobilePhone"; 
        public static readonly string  LeadNumberOfEmployees = "Lead.NumberOfEmployees"; 
        public static readonly string  LeadNumberofLocationsc = "Lead.NumberofLocations__c"; 
        public static readonly string  LeadPhone = "Lead.Phone"; 
        public static readonly string  LeadPrimaryc = "Lead.Primary__c"; 
        public static readonly string  LeadProductInterestc = "Lead.ProductInterest__c"; 
        public static readonly string  LeadRating = "Lead.Rating"; 
        public static readonly string  LeadSICCodec = "Lead.SICCode__c"; 
        public static readonly string  LeadTitle = "Lead.Title"; 
        public static readonly string  LeadWebsite = "Lead.Website"; 
        public static readonly string  MetricOrigMetricIdc = "Metric.OrigMetricId__c"; 
        public static readonly string  OpportunityAccount = "Opportunity.Account"; 
        public static readonly string  OpportunityAmount = "Opportunity.Amount"; 
        public static readonly string  OpportunityCampaign = "Opportunity.Campaign"; 
        public static readonly string  OpportunityContract = "Opportunity.Contract"; 
        public static readonly string  OpportunityCurrentGeneratorsc = "Opportunity.CurrentGenerators__c"; 
        public static readonly string  OpportunityDeliveryInstallationStatusc = "Opportunity.DeliveryInstallationStatus__c"; 
        public static readonly string  OpportunityDescription = "Opportunity.Description"; 
        public static readonly string  OpportunityExpectedRevenue = "Opportunity.ExpectedRevenue"; 
        public static readonly string  OpportunityIsPrivate = "Opportunity.IsPrivate"; 
        public static readonly string  OpportunityLeadSource = "Opportunity.LeadSource"; 
        public static readonly string  OpportunityMainCompetitorsc = "Opportunity.MainCompetitors__c"; 
        public static readonly string  OpportunityNextStep = "Opportunity.NextStep"; 
        public static readonly string  OpportunityOrderNumberc = "Opportunity.OrderNumber__c"; 
        public static readonly string  OpportunityProbability = "Opportunity.Probability"; 
        public static readonly string  OpportunityTotalOpportunityQuantity = "Opportunity.TotalOpportunityQuantity"; 
        public static readonly string  OpportunityTrackingNumberc = "Opportunity.TrackingNumber__c"; 
        public static readonly string  OpportunityType = "Opportunity.Type"; 
        public static readonly string  OpportunityLineItemDescription = "OpportunityLineItem.Description"; 
        public static readonly string  OpportunityLineItemDiscount = "OpportunityLineItem.Discount"; 
        public static readonly string  OpportunityLineItemListPrice = "OpportunityLineItem.ListPrice"; 
        public static readonly string  OpportunityLineItemProductCode = "OpportunityLineItem.ProductCode"; 
        public static readonly string  OpportunityLineItemServiceDate = "OpportunityLineItem.ServiceDate"; 
        public static readonly string  OpportunityLineItemSubtotal = "OpportunityLineItem.Subtotal"; 
        public static readonly string  OpportunityLineItemTotalPrice = "OpportunityLineItem.TotalPrice"; 
        public static readonly string  OrderActivatedBy = "Order.ActivatedBy"; 
        public static readonly string  OrderActivatedDate = "Order.ActivatedDate"; 
        public static readonly string  OrderBillingAddress = "Order.BillingAddress"; 
        public static readonly string  OrderBillToContact = "Order.BillToContact"; 
        public static readonly string  OrderCompanyAuthorizedBy = "Order.CompanyAuthorizedBy"; 
        public static readonly string  OrderCompanyAuthorizedDate = "Order.CompanyAuthorizedDate"; 
        public static readonly string  OrderContractEndDate = "Order.ContractEndDate"; 
        public static readonly string  OrderContractName = "Order.ContractName"; 
        public static readonly string  OrderCustomerAuthorizedBy = "Order.CustomerAuthorizedBy"; 
        public static readonly string  OrderCustomerAuthorizedDate = "Order.CustomerAuthorizedDate"; 
        public static readonly string  OrderDescription = "Order.Description"; 
        public static readonly string  OrderName = "Order.Name"; 
        public static readonly string  OrderOpportunity = "Order.Opportunity"; 
        public static readonly string  OrderOrderReferenceNumber = "Order.OrderReferenceNumber"; 
        public static readonly string  OrderPoDate = "Order.PoDate"; 
        public static readonly string  OrderPoNumber = "Order.PoNumber"; 
        public static readonly string  OrderShippingAddress = "Order.ShippingAddress"; 
        public static readonly string  OrderShipToContact = "Order.ShipToContact"; 
        public static readonly string  OrderTotalAmount = "Order.TotalAmount"; 
        public static readonly string  OrderType = "Order.Type"; 
        public static readonly string  OrderItemDescription = "OrderItem.Description"; 
        public static readonly string  OrderItemEndDate = "OrderItem.EndDate"; 
        public static readonly string  OrderItemListPrice = "OrderItem.ListPrice"; 
        public static readonly string  OrderItemProductCode = "OrderItem.ProductCode"; 
        public static readonly string  OrderItemServiceDate = "OrderItem.ServiceDate"; 
        public static readonly string  Product2Description = "Product2.Description"; 
        public static readonly string  Product2DisplayUrl = "Product2.DisplayUrl"; 
        public static readonly string  Product2ExternalDataSource = "Product2.ExternalDataSource"; 
        public static readonly string  Product2ExternalId = "Product2.ExternalId"; 
        public static readonly string  Product2Family = "Product2.Family"; 
        public static readonly string  Product2ProductCode = "Product2.ProductCode"; 
        public static readonly string  Product2QuantityUnitOfMeasure = "Product2.QuantityUnitOfMeasure"; 
        public static readonly string  SolutionIsPublished = "Solution.IsPublished"; 
        public static readonly string  SolutionIsPublishedInPublicKb = "Solution.IsPublishedInPublicKb"; 
        public static readonly string  SolutionSolutionNote = "Solution.SolutionNote"; 
        public static readonly string  TaskActivityDate = "Task.ActivityDate"; 
        public static readonly string  TaskDescription = "Task.Description"; 
        public static readonly string  TaskType = "Task.Type"; 
        public static readonly string  TaskWhat = "Task.What"; 
        public static readonly string  TaskWho = "Task.Who"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFieldPermissionsField o)
        {
            return o.Value;
        }

        public static implicit operator PickFieldPermissionsField(string s)
        {
            return new PickFieldPermissionsField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFieldPermissionsField Parse(string text) => text;

        

    }
    public class PickFiscalYearSettingsYearTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFiscalYearSettingsYearType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFiscalYearSettingsYearType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFiscalYearSettingsYearTypeConverter))]
    public class PickFiscalYearSettingsYearType
    {
        public static readonly string  Standard = "Standard"; 
        public static readonly string  Custom = "Custom"; 
        public static readonly string  Placeholder = "Placeholder"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFiscalYearSettingsYearType o)
        {
            return o.Value;
        }

        public static implicit operator PickFiscalYearSettingsYearType(string s)
        {
            return new PickFiscalYearSettingsYearType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFiscalYearSettingsYearType Parse(string text) => text;

        

    }
    public class PickFiscalYearSettingsQuarterLabelSchemeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFiscalYearSettingsQuarterLabelScheme)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFiscalYearSettingsQuarterLabelScheme {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFiscalYearSettingsQuarterLabelSchemeConverter))]
    public class PickFiscalYearSettingsQuarterLabelScheme
    {
        public static readonly string  NumberByYear = "NumberByYear"; 
        public static readonly string  Custom = "Custom"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFiscalYearSettingsQuarterLabelScheme o)
        {
            return o.Value;
        }

        public static implicit operator PickFiscalYearSettingsQuarterLabelScheme(string s)
        {
            return new PickFiscalYearSettingsQuarterLabelScheme {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFiscalYearSettingsQuarterLabelScheme Parse(string text) => text;

        

    }
    public class PickFiscalYearSettingsPeriodLabelSchemeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFiscalYearSettingsPeriodLabelScheme)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFiscalYearSettingsPeriodLabelScheme {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFiscalYearSettingsPeriodLabelSchemeConverter))]
    public class PickFiscalYearSettingsPeriodLabelScheme
    {
        public static readonly string  NumberByYear = "NumberByYear"; 
        public static readonly string  NumberByQuarter = "NumberByQuarter"; 
        public static readonly string  StandardMonths = "StandardMonths"; 
        public static readonly string  Custom = "Custom"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFiscalYearSettingsPeriodLabelScheme o)
        {
            return o.Value;
        }

        public static implicit operator PickFiscalYearSettingsPeriodLabelScheme(string s)
        {
            return new PickFiscalYearSettingsPeriodLabelScheme {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFiscalYearSettingsPeriodLabelScheme Parse(string text) => text;

        

    }
    public class PickFiscalYearSettingsWeekLabelSchemeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFiscalYearSettingsWeekLabelScheme)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFiscalYearSettingsWeekLabelScheme {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFiscalYearSettingsWeekLabelSchemeConverter))]
    public class PickFiscalYearSettingsWeekLabelScheme
    {
        public static readonly string  NumberByYear = "NumberByYear"; 
        public static readonly string  NumberByQuarter = "NumberByQuarter"; 
        public static readonly string  NumberByPeriod = "NumberByPeriod"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFiscalYearSettingsWeekLabelScheme o)
        {
            return o.Value;
        }

        public static implicit operator PickFiscalYearSettingsWeekLabelScheme(string s)
        {
            return new PickFiscalYearSettingsWeekLabelScheme {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFiscalYearSettingsWeekLabelScheme Parse(string text) => text;

        

    }
    public class PickFiscalYearSettingsQuarterPrefixConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFiscalYearSettingsQuarterPrefix)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFiscalYearSettingsQuarterPrefix {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFiscalYearSettingsQuarterPrefixConverter))]
    public class PickFiscalYearSettingsQuarterPrefix
    {
        public static readonly string  Quarter = "Quarter"; 
        public static readonly string  FQ = "FQ"; 
        public static readonly string  Q = "Q"; 
        public static readonly string  Trimester = "Trimester"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFiscalYearSettingsQuarterPrefix o)
        {
            return o.Value;
        }

        public static implicit operator PickFiscalYearSettingsQuarterPrefix(string s)
        {
            return new PickFiscalYearSettingsQuarterPrefix {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFiscalYearSettingsQuarterPrefix Parse(string text) => text;

        

    }
    public class PickFiscalYearSettingsPeriodPrefixConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFiscalYearSettingsPeriodPrefix)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFiscalYearSettingsPeriodPrefix {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFiscalYearSettingsPeriodPrefixConverter))]
    public class PickFiscalYearSettingsPeriodPrefix
    {
        public static readonly string  Period = "Period"; 
        public static readonly string  FP = "FP"; 
        public static readonly string  P = "P"; 
        public static readonly string  Month = "Month"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFiscalYearSettingsPeriodPrefix o)
        {
            return o.Value;
        }

        public static implicit operator PickFiscalYearSettingsPeriodPrefix(string s)
        {
            return new PickFiscalYearSettingsPeriodPrefix {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFiscalYearSettingsPeriodPrefix Parse(string text) => text;

        

    }
    public class PickFolderAccessTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFolderAccessType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFolderAccessType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFolderAccessTypeConverter))]
    public class PickFolderAccessType
    {
        public static readonly string  Shared = "Shared"; 
        public static readonly string  Public = "Public"; 
        public static readonly string  Hidden = "Hidden"; 
        public static readonly string  PublicInternal = "PublicInternal"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFolderAccessType o)
        {
            return o.Value;
        }

        public static implicit operator PickFolderAccessType(string s)
        {
            return new PickFolderAccessType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFolderAccessType Parse(string text) => text;

        

    }
    public class PickFolderTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickFolderType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickFolderType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickFolderTypeConverter))]
    public class PickFolderType
    {
        public static readonly string  Document = "Document"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Report = "Report"; 
        public static readonly string  Dashboard = "Dashboard"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickFolderType o)
        {
            return o.Value;
        }

        public static implicit operator PickFolderType(string s)
        {
            return new PickFolderType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickFolderType Parse(string text) => text;

        

    }
    public class PickForecastShareAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickForecastShareAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickForecastShareAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickForecastShareAccessLevelConverter))]
    public class PickForecastShareAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickForecastShareAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickForecastShareAccessLevel(string s)
        {
            return new PickForecastShareAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickForecastShareAccessLevel Parse(string text) => text;

        

    }
    public class PickForecastShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickForecastShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickForecastShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickForecastShareRowCauseConverter))]
    public class PickForecastShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickForecastShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickForecastShareRowCause(string s)
        {
            return new PickForecastShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickForecastShareRowCause Parse(string text) => text;

        

    }
    public class PickGroupTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickGroupType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickGroupType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickGroupTypeConverter))]
    public class PickGroupType
    {
        public static readonly string  AllCustomerPortal = "AllCustomerPortal"; 
        public static readonly string  CollaborationGroup = "CollaborationGroup"; 
        public static readonly string  Manager = "Manager"; 
        public static readonly string  ManagerAndSubordinatesInternal = "ManagerAndSubordinatesInternal"; 
        public static readonly string  Organization = "Organization"; 
        public static readonly string  PRMOrganization = "PRMOrganization"; 
        public static readonly string  Queue = "Queue"; 
        public static readonly string  Regular = "Regular"; 
        public static readonly string  Role = "Role"; 
        public static readonly string  RoleAndSubordinates = "RoleAndSubordinates"; 
        public static readonly string  RoleAndSubordinatesInternal = "RoleAndSubordinatesInternal"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryAndSubordinates = "TerritoryAndSubordinates"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickGroupType o)
        {
            return o.Value;
        }

        public static implicit operator PickGroupType(string s)
        {
            return new PickGroupType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickGroupType Parse(string text) => text;

        

    }
    public class PickHolidayRecurrenceTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickHolidayRecurrenceType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickHolidayRecurrenceType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickHolidayRecurrenceTypeConverter))]
    public class PickHolidayRecurrenceType
    {
        public static readonly string  RecursDaily = "RecursDaily"; 
        public static readonly string  RecursEveryWeekday = "RecursEveryWeekday"; 
        public static readonly string  RecursMonthly = "RecursMonthly"; 
        public static readonly string  RecursMonthlyNth = "RecursMonthlyNth"; 
        public static readonly string  RecursWeekly = "RecursWeekly"; 
        public static readonly string  RecursYearly = "RecursYearly"; 
        public static readonly string  RecursYearlyNth = "RecursYearlyNth"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickHolidayRecurrenceType o)
        {
            return o.Value;
        }

        public static implicit operator PickHolidayRecurrenceType(string s)
        {
            return new PickHolidayRecurrenceType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickHolidayRecurrenceType Parse(string text) => text;

        

    }
    public class PickHolidayRecurrenceInstanceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickHolidayRecurrenceInstance)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickHolidayRecurrenceInstance {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickHolidayRecurrenceInstanceConverter))]
    public class PickHolidayRecurrenceInstance
    {
        public static readonly string  First = "First"; 
        public static readonly string  Second = "Second"; 
        public static readonly string  Third = "Third"; 
        public static readonly string  Fourth = "Fourth"; 
        public static readonly string  Last = "Last"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickHolidayRecurrenceInstance o)
        {
            return o.Value;
        }

        public static implicit operator PickHolidayRecurrenceInstance(string s)
        {
            return new PickHolidayRecurrenceInstance {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickHolidayRecurrenceInstance Parse(string text) => text;

        

    }
    public class PickHolidayRecurrenceMonthOfYearConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickHolidayRecurrenceMonthOfYear)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickHolidayRecurrenceMonthOfYear {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickHolidayRecurrenceMonthOfYearConverter))]
    public class PickHolidayRecurrenceMonthOfYear
    {
        public static readonly string  January = "January"; 
        public static readonly string  February = "February"; 
        public static readonly string  March = "March"; 
        public static readonly string  April = "April"; 
        public static readonly string  May = "May"; 
        public static readonly string  June = "June"; 
        public static readonly string  July = "July"; 
        public static readonly string  August = "August"; 
        public static readonly string  September = "September"; 
        public static readonly string  October = "October"; 
        public static readonly string  November = "November"; 
        public static readonly string  December = "December"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickHolidayRecurrenceMonthOfYear o)
        {
            return o.Value;
        }

        public static implicit operator PickHolidayRecurrenceMonthOfYear(string s)
        {
            return new PickHolidayRecurrenceMonthOfYear {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickHolidayRecurrenceMonthOfYear Parse(string text) => text;

        

    }
    public class PickIdeaCategoriesConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickIdeaCategories)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickIdeaCategories {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickIdeaCategoriesConverter))]
    public class PickIdeaCategories
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickIdeaCategories o)
        {
            return o.Value;
        }

        public static implicit operator PickIdeaCategories(string s)
        {
            return new PickIdeaCategories {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickIdeaCategories Parse(string text) => text;

        

    }
    public class PickIdeaStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickIdeaStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickIdeaStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickIdeaStatusConverter))]
    public class PickIdeaStatus
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickIdeaStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickIdeaStatus(string s)
        {
            return new PickIdeaStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickIdeaStatus Parse(string text) => text;

        

    }
    public class PickInstalledMobileAppStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickInstalledMobileAppStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickInstalledMobileAppStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickInstalledMobileAppStatusConverter))]
    public class PickInstalledMobileAppStatus
    {
        public static readonly string  downloaded = "downloaded"; 
        public static readonly string  installed = "installed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickInstalledMobileAppStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickInstalledMobileAppStatus(string s)
        {
            return new PickInstalledMobileAppStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickInstalledMobileAppStatus Parse(string text) => text;

        

    }
    public class PickLeadSalutationConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadSalutation)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadSalutation {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadSalutationConverter))]
    public class PickLeadSalutation
    {
        public static readonly string  Mr = "Mr."; 
        public static readonly string  Ms = "Ms."; 
        public static readonly string  Mrs = "Mrs."; 
        public static readonly string  Dr = "Dr."; 
        public static readonly string  Prof = "Prof."; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadSalutation o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadSalutation(string s)
        {
            return new PickLeadSalutation {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadSalutation Parse(string text) => text;

        

    }
    public class PickLeadLeadSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadLeadSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadLeadSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadLeadSourceConverter))]
    public class PickLeadLeadSource
    {
        public static readonly string  Web = "Web"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadLeadSource o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadLeadSource(string s)
        {
            return new PickLeadLeadSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadLeadSource Parse(string text) => text;

        

    }
    public class PickLeadStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadStatusConverter))]
    public class PickLeadStatus
    {
        public static readonly string  OpenNotContacted = "Open - Not Contacted"; 
        public static readonly string  WorkingContacted = "Working - Contacted"; 
        public static readonly string  ClosedConverted = "Closed - Converted"; 
        public static readonly string  ClosedNotConverted = "Closed - Not Converted"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadStatus(string s)
        {
            return new PickLeadStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadStatus Parse(string text) => text;

        

    }
    public class PickLeadIndustryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadIndustry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadIndustry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadIndustryConverter))]
    public class PickLeadIndustry
    {
        public static readonly string  Agriculture = "Agriculture"; 
        public static readonly string  Apparel = "Apparel"; 
        public static readonly string  Banking = "Banking"; 
        public static readonly string  Biotechnology = "Biotechnology"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Communications = "Communications"; 
        public static readonly string  Construction = "Construction"; 
        public static readonly string  Consulting = "Consulting"; 
        public static readonly string  Education = "Education"; 
        public static readonly string  Electronics = "Electronics"; 
        public static readonly string  Energy = "Energy"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Entertainment = "Entertainment"; 
        public static readonly string  Environmental = "Environmental"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  FoodBeverage = "Food & Beverage"; 
        public static readonly string  Government = "Government"; 
        public static readonly string  Healthcare = "Healthcare"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Insurance = "Insurance"; 
        public static readonly string  Machinery = "Machinery"; 
        public static readonly string  Manufacturing = "Manufacturing"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  NotForProfit = "Not For Profit"; 
        public static readonly string  Recreation = "Recreation"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  Shipping = "Shipping"; 
        public static readonly string  Technology = "Technology"; 
        public static readonly string  Telecommunications = "Telecommunications"; 
        public static readonly string  Transportation = "Transportation"; 
        public static readonly string  Utilities = "Utilities"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadIndustry o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadIndustry(string s)
        {
            return new PickLeadIndustry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadIndustry Parse(string text) => text;

        

    }
    public class PickLeadRatingConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadRating)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadRating {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadRatingConverter))]
    public class PickLeadRating
    {
        public static readonly string  Hot = "Hot"; 
        public static readonly string  Warm = "Warm"; 
        public static readonly string  Cold = "Cold"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadRating o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadRating(string s)
        {
            return new PickLeadRating {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadRating Parse(string text) => text;

        

    }
    public class PickLeadCleanStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadCleanStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadCleanStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadCleanStatusConverter))]
    public class PickLeadCleanStatus
    {
        public static readonly string  Matched = "Matched"; 
        public static readonly string  Different = "Different"; 
        public static readonly string  Acknowledged = "Acknowledged"; 
        public static readonly string  NotFound = "NotFound"; 
        public static readonly string  Inactive = "Inactive"; 
        public static readonly string  Pending = "Pending"; 
        public static readonly string  SelectMatch = "SelectMatch"; 
        public static readonly string  Skipped = "Skipped"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadCleanStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadCleanStatus(string s)
        {
            return new PickLeadCleanStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadCleanStatus Parse(string text) => text;

        

    }
    public class PickLeadProductInterestConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadProductInterest)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadProductInterest {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadProductInterestConverter))]
    public class PickLeadProductInterest
    {
        public static readonly string  GC1000series = "GC1000 series"; 
        public static readonly string  GC5000series = "GC5000 series"; 
        public static readonly string  GC3000series = "GC3000 series"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadProductInterest o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadProductInterest(string s)
        {
            return new PickLeadProductInterest {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadProductInterest Parse(string text) => text;

        

    }
    public class PickLeadPrimaryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadPrimary)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadPrimary {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadPrimaryConverter))]
    public class PickLeadPrimary
    {
        public static readonly string  No = "No"; 
        public static readonly string  Yes = "Yes"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadPrimary o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadPrimary(string s)
        {
            return new PickLeadPrimary {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadPrimary Parse(string text) => text;

        

    }
    public class PickLeadCleanInfoIndustryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadCleanInfoIndustry)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadCleanInfoIndustry {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadCleanInfoIndustryConverter))]
    public class PickLeadCleanInfoIndustry
    {
        public static readonly string  Agriculture = "Agriculture"; 
        public static readonly string  Apparel = "Apparel"; 
        public static readonly string  Banking = "Banking"; 
        public static readonly string  Biotechnology = "Biotechnology"; 
        public static readonly string  Chemicals = "Chemicals"; 
        public static readonly string  Communications = "Communications"; 
        public static readonly string  Construction = "Construction"; 
        public static readonly string  Consulting = "Consulting"; 
        public static readonly string  Education = "Education"; 
        public static readonly string  Electronics = "Electronics"; 
        public static readonly string  Energy = "Energy"; 
        public static readonly string  Engineering = "Engineering"; 
        public static readonly string  Entertainment = "Entertainment"; 
        public static readonly string  Environmental = "Environmental"; 
        public static readonly string  Finance = "Finance"; 
        public static readonly string  FoodBeverage = "Food & Beverage"; 
        public static readonly string  Government = "Government"; 
        public static readonly string  Healthcare = "Healthcare"; 
        public static readonly string  Hospitality = "Hospitality"; 
        public static readonly string  Insurance = "Insurance"; 
        public static readonly string  Machinery = "Machinery"; 
        public static readonly string  Manufacturing = "Manufacturing"; 
        public static readonly string  Media = "Media"; 
        public static readonly string  NotForProfit = "Not For Profit"; 
        public static readonly string  Recreation = "Recreation"; 
        public static readonly string  Retail = "Retail"; 
        public static readonly string  Shipping = "Shipping"; 
        public static readonly string  Technology = "Technology"; 
        public static readonly string  Telecommunications = "Telecommunications"; 
        public static readonly string  Transportation = "Transportation"; 
        public static readonly string  Utilities = "Utilities"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadCleanInfoIndustry o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadCleanInfoIndustry(string s)
        {
            return new PickLeadCleanInfoIndustry {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadCleanInfoIndustry Parse(string text) => text;

        

    }
    public class PickLeadCleanInfoContactStatusDataDotComConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadCleanInfoContactStatusDataDotCom)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadCleanInfoContactStatusDataDotCom {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadCleanInfoContactStatusDataDotComConverter))]
    public class PickLeadCleanInfoContactStatusDataDotCom
    {
        public static readonly string  IsActiveContactDataDotCom = "IsActiveContactDataDotCom"; 
        public static readonly string  WrongPhoneDataDotCom = "WrongPhoneDataDotCom"; 
        public static readonly string  WrongEmailDataDotCom = "WrongEmailDataDotCom"; 
        public static readonly string  WrongPhoneAndEmailDataDotCom = "WrongPhoneAndEmailDataDotCom"; 
        public static readonly string  NotAtCompanyContactDataDotCom = "NotAtCompanyContactDataDotCom"; 
        public static readonly string  InactiveDataDotCom = "InactiveDataDotCom"; 
        public static readonly string  CompanyOutOfBusinessDataDotCom = "CompanyOutOfBusinessDataDotCom"; 
        public static readonly string  CompanyNeverExistedDataDotCom = "CompanyNeverExistedDataDotCom"; 
        public static readonly string  DeadEmailDomainDataDotCom = "DeadEmailDomainDataDotCom"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadCleanInfoContactStatusDataDotCom o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadCleanInfoContactStatusDataDotCom(string s)
        {
            return new PickLeadCleanInfoContactStatusDataDotCom {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadCleanInfoContactStatusDataDotCom Parse(string text) => text;

        

    }
    public class PickLeadFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadFeedTypeConverter))]
    public class PickLeadFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadFeedType(string s)
        {
            return new PickLeadFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadFeedType Parse(string text) => text;

        

    }
    public class PickLeadHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadHistoryFieldConverter))]
    public class PickLeadHistoryField
    {
        public static readonly string  Address = "Address"; 
        public static readonly string  AnnualRevenue = "AnnualRevenue"; 
        public static readonly string  City = "City"; 
        public static readonly string  CleanStatus = "CleanStatus"; 
        public static readonly string  Company = "Company"; 
        public static readonly string  CompanyDunsNumber = "CompanyDunsNumber"; 
        public static readonly string  Country = "Country"; 
        public static readonly string  created = "created"; 
        public static readonly string  CurrentGeneratorsc = "CurrentGenerators__c"; 
        public static readonly string  DandbCompany = "DandbCompany"; 
        public static readonly string  Jigsaw = "Jigsaw"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  DoNotCall = "DoNotCall"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  EmailBouncedDate = "EmailBouncedDate"; 
        public static readonly string  EmailBouncedReason = "EmailBouncedReason"; 
        public static readonly string  HasOptedOutOfEmail = "HasOptedOutOfEmail"; 
        public static readonly string  Fax = "Fax"; 
        public static readonly string  HasOptedOutOfFax = "HasOptedOutOfFax"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  FirstName = "FirstName"; 
        public static readonly string  GeocodeAccuracy = "GeocodeAccuracy"; 
        public static readonly string  Industry = "Industry"; 
        public static readonly string  LastName = "LastName"; 
        public static readonly string  Latitude = "Latitude"; 
        public static readonly string  leadConverted = "leadConverted"; 
        public static readonly string  leadMerged = "leadMerged"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  LeadSource = "LeadSource"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  Longitude = "Longitude"; 
        public static readonly string  MobilePhone = "MobilePhone"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  NumberOfEmployees = "NumberOfEmployees"; 
        public static readonly string  NumberofLocationsc = "NumberofLocations__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Phone = "Phone"; 
        public static readonly string  Primaryc = "Primary__c"; 
        public static readonly string  ProductInterestc = "ProductInterest__c"; 
        public static readonly string  Rating = "Rating"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  Salutation = "Salutation"; 
        public static readonly string  SICCodec = "SICCode__c"; 
        public static readonly string  State = "State"; 
        public static readonly string  Street = "Street"; 
        public static readonly string  Title = "Title"; 
        public static readonly string  IsUnreadByOwner = "IsUnreadByOwner"; 
        public static readonly string  Website = "Website"; 
        public static readonly string  PostalCode = "PostalCode"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadHistoryField(string s)
        {
            return new PickLeadHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadHistoryField Parse(string text) => text;

        

    }
    public class PickLeadShareLeadAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadShareLeadAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadShareLeadAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadShareLeadAccessLevelConverter))]
    public class PickLeadShareLeadAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadShareLeadAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadShareLeadAccessLevel(string s)
        {
            return new PickLeadShareLeadAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadShareLeadAccessLevel Parse(string text) => text;

        

    }
    public class PickLeadShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLeadShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLeadShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLeadShareRowCauseConverter))]
    public class PickLeadShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLeadShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickLeadShareRowCause(string s)
        {
            return new PickLeadShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLeadShareRowCause Parse(string text) => text;

        

    }
    public class PickLoginHistoryLoginTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLoginHistoryLoginType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLoginHistoryLoginType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLoginHistoryLoginTypeConverter))]
    public class PickLoginHistoryLoginType
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickLoginHistoryLoginType o)
        {
            return o.Value;
        }

        public static implicit operator PickLoginHistoryLoginType(string s)
        {
            return new PickLoginHistoryLoginType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLoginHistoryLoginType Parse(string text) => text;

        

    }
    public class PickLoginIpChallengeMethodConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickLoginIpChallengeMethod)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickLoginIpChallengeMethod {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickLoginIpChallengeMethodConverter))]
    public class PickLoginIpChallengeMethod
    {
        public static readonly string  Email = "Email"; 
        public static readonly string  SMS = "SMS"; 
        public static readonly string  TOTPCHOICE = "TOTP_CHOICE"; 
        public static readonly string  TOTPONLY = "TOTP_ONLY"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickLoginIpChallengeMethod o)
        {
            return o.Value;
        }

        public static implicit operator PickLoginIpChallengeMethod(string s)
        {
            return new PickLoginIpChallengeMethod {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickLoginIpChallengeMethod Parse(string text) => text;

        

    }
    public class PickNameTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickNameType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickNameType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickNameTypeConverter))]
    public class PickNameType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  AccountCleanInfo = "AccountCleanInfo"; 
        public static readonly string  AccountContactRole = "AccountContactRole"; 
        public static readonly string  Announcement = "Announcement"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  CollaborationGroup = "CollaborationGroup"; 
        public static readonly string  CollaborationGroupRecord = "CollaborationGroupRecord"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContactCleanInfo = "ContactCleanInfo"; 
        public static readonly string  ContentDocument = "ContentDocument"; 
        public static readonly string  ContentVersion = "ContentVersion"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  DandBCompany = "DandBCompany"; 
        public static readonly string  Dashboard = "Dashboard"; 
        public static readonly string  DashboardComponent = "DashboardComponent"; 
        public static readonly string  DatacloudOwnedEntity = "DatacloudOwnedEntity"; 
        public static readonly string  DatacloudPurchaseUsage = "DatacloudPurchaseUsage"; 
        public static readonly string  Document = "Document"; 
        public static readonly string  EmailMessage = "EmailMessage"; 
        public static readonly string  Event = "Event"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  IdeaComment = "IdeaComment"; 
        public static readonly string  InstalledMobileApp = "InstalledMobileApp"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  LeadCleanInfo = "LeadCleanInfo"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  OrderItem = "OrderItem"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  Queue = "Queue"; 
        public static readonly string  Report = "Report"; 
        public static readonly string  SelfServiceUser = "SelfServiceUser"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  StreamingChannel = "StreamingChannel"; 
        public static readonly string  Task = "Task"; 
        public static readonly string  Topic = "Topic"; 
        public static readonly string  User = "User"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickNameType o)
        {
            return o.Value;
        }

        public static implicit operator PickNameType(string s)
        {
            return new PickNameType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickNameType Parse(string text) => text;

        

    }
    public class PickObjectPermissionsSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickObjectPermissionsSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickObjectPermissionsSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickObjectPermissionsSobjectTypeConverter))]
    public class PickObjectPermissionsSobjectType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  AddOnDefinition = "AddOnDefinition"; 
        public static readonly string  Address = "Address"; 
        public static readonly string  AggregationRow = "AggregationRow"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  Certification = "Certification"; 
        public static readonly string  CertificationDef = "CertificationDef"; 
        public static readonly string  CertificationSectionDef = "CertificationSectionDef"; 
        public static readonly string  CertificationStep = "CertificationStep"; 
        public static readonly string  CertificationStepDef = "CertificationStepDef"; 
        public static readonly string  CloudServiceProvider = "CloudServiceProvider"; 
        public static readonly string  CloudServiceProviderApi = "CloudServiceProviderApi"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  ContractLineItem = "ContractLineItem"; 
        public static readonly string  DandBCompany = "DandBCompany"; 
        public static readonly string  Document = "Document"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  EditionDefinition = "EditionDefinition"; 
        public static readonly string  Employee = "Employee"; 
        public static readonly string  Entitlement = "Entitlement"; 
        public static readonly string  EntitlementContact = "EntitlementContact"; 
        public static readonly string  EnvironmentHubInvitation = "EnvironmentHubInvitation"; 
        public static readonly string  EnvironmentHubMember = "EnvironmentHubMember"; 
        public static readonly string  FtestAccountChild = "FtestAccountChild"; 
        public static readonly string  FtestChild = "FtestChild"; 
        public static readonly string  FtestError = "FtestError"; 
        public static readonly string  FtestErrorChild = "FtestErrorChild"; 
        public static readonly string  FtestGrandChild = "FtestGrandChild"; 
        public static readonly string  FtestHiddenName = "FtestHiddenName"; 
        public static readonly string  FtestMain = "FtestMain"; 
        public static readonly string  FtestPerson = "FtestPerson"; 
        public static readonly string  FtestVirtualMain = "FtestVirtualMain"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  GoalLink = "GoalLink"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  IdeaTheme = "IdeaTheme"; 
        public static readonly string  IncludedLicenseDefinition = "IncludedLicenseDefinition"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  LicensingError = "LicensingError"; 
        public static readonly string  LicensingRequest = "LicensingRequest"; 
        public static readonly string  LiveAgentSession = "LiveAgentSession"; 
        public static readonly string  LiveChatTranscript = "LiveChatTranscript"; 
        public static readonly string  LiveChatVisitor = "LiveChatVisitor"; 
        public static readonly string  Location = "Location"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  ManagementAddOnLicense = "ManagementAddOnLicense"; 
        public static readonly string  ManagementEditionLicense = "ManagementEditionLicense"; 
        public static readonly string  ManagementPlatformLicense = "ManagementPlatformLicense"; 
        public static readonly string  ManagementUserLicense = "ManagementUserLicense"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  MetricDataLink = "MetricDataLink"; 
        public static readonly string  MyCustomObject = "MyCustomObject"; 
        public static readonly string  OperatingHours = "OperatingHours"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  PersonKey = "PersonKey"; 
        public static readonly string  PlatformLicenseDefinition = "PlatformLicenseDefinition"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  ProductItem = "ProductItem"; 
        public static readonly string  ProfileSkill = "ProfileSkill"; 
        public static readonly string  ProfileSkillEndorsement = "ProfileSkillEndorsement"; 
        public static readonly string  ProfileSkillUser = "ProfileSkillUser"; 
        public static readonly string  PushTopic = "PushTopic"; 
        public static readonly string  Question = "Question"; 
        public static readonly string  QuickText = "QuickText"; 
        public static readonly string  Quote = "Quote"; 
        public static readonly string  RegisteredMobileDevice = "RegisteredMobileDevice"; 
        public static readonly string  ServiceAppointment = "ServiceAppointment"; 
        public static readonly string  ServiceContract = "ServiceContract"; 
        public static readonly string  ServiceResource = "ServiceResource"; 
        public static readonly string  ServiceTerritory = "ServiceTerritory"; 
        public static readonly string  SignupRequest = "SignupRequest"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  SOSSession = "SOSSession"; 
        public static readonly string  StreamingChannel = "StreamingChannel"; 
        public static readonly string  Survey = "Survey"; 
        public static readonly string  SurveyQuestionResponse = "SurveyQuestionResponse"; 
        public static readonly string  Tenant = "Tenant"; 
        public static readonly string  TenantParameterMap = "TenantParameterMap"; 
        public static readonly string  UsageEntitlement = "UsageEntitlement"; 
        public static readonly string  UserLicenseDefinition = "UserLicenseDefinition"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkGoal = "WorkGoal"; 
        public static readonly string  WorkGoalCollaborator = "WorkGoalCollaborator"; 
        public static readonly string  WorkGoalLink = "WorkGoalLink"; 
        public static readonly string  WorkOrder = "WorkOrder"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
        public static readonly string  WorkReward = "WorkReward"; 
        public static readonly string  WorkRewardFund = "WorkRewardFund"; 
        public static readonly string  WorkRewardFundType = "WorkRewardFundType"; 
        public static readonly string  WorkType = "WorkType"; 
        public static readonly string  WorkUpgradeAction = "WorkUpgradeAction"; 
        public static readonly string  WorkUpgradeCustomer = "WorkUpgradeCustomer"; 
        public static readonly string  WorkUpgradeUser = "WorkUpgradeUser"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickObjectPermissionsSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickObjectPermissionsSobjectType(string s)
        {
            return new PickObjectPermissionsSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickObjectPermissionsSobjectType Parse(string text) => text;

        

    }
    public class PickOpenActivityStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpenActivityStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpenActivityStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpenActivityStatusConverter))]
    public class PickOpenActivityStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Waitingonsomeoneelse = "Waiting on someone else"; 
        public static readonly string  Deferred = "Deferred"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpenActivityStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickOpenActivityStatus(string s)
        {
            return new PickOpenActivityStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpenActivityStatus Parse(string text) => text;

        

    }
    public class PickOpenActivityPriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpenActivityPriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpenActivityPriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpenActivityPriorityConverter))]
    public class PickOpenActivityPriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Normal = "Normal"; 
        public static readonly string  Low = "Low"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpenActivityPriority o)
        {
            return o.Value;
        }

        public static implicit operator PickOpenActivityPriority(string s)
        {
            return new PickOpenActivityPriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpenActivityPriority Parse(string text) => text;

        

    }
    public class PickOpenActivityActivityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpenActivityActivityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpenActivityActivityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpenActivityActivityTypeConverter))]
    public class PickOpenActivityActivityType
    {
        public static readonly string  Call = "Call"; 
        public static readonly string  Email = "Email"; 
        public static readonly string  Meeting = "Meeting"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpenActivityActivityType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpenActivityActivityType(string s)
        {
            return new PickOpenActivityActivityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpenActivityActivityType Parse(string text) => text;

        

    }
    public class PickOpenActivityCallTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpenActivityCallType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpenActivityCallType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpenActivityCallTypeConverter))]
    public class PickOpenActivityCallType
    {
        public static readonly string  Internal = "Internal"; 
        public static readonly string  Inbound = "Inbound"; 
        public static readonly string  Outbound = "Outbound"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpenActivityCallType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpenActivityCallType(string s)
        {
            return new PickOpenActivityCallType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpenActivityCallType Parse(string text) => text;

        

    }
    public class PickOpportunityStageNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityStageName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityStageName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityStageNameConverter))]
    public class PickOpportunityStageName
    {
        public static readonly string  Prospecting = "Prospecting"; 
        public static readonly string  Qualification = "Qualification"; 
        public static readonly string  NeedsAnalysis = "Needs Analysis"; 
        public static readonly string  ValueProposition = "Value Proposition"; 
        public static readonly string  IdDecisionMakers = "Id. Decision Makers"; 
        public static readonly string  PerceptionAnalysis = "Perception Analysis"; 
        public static readonly string  ProposalPriceQuote = "Proposal/Price Quote"; 
        public static readonly string  NegotiationReview = "Negotiation/Review"; 
        public static readonly string  ClosedWon = "Closed Won"; 
        public static readonly string  ClosedLost = "Closed Lost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityStageName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityStageName(string s)
        {
            return new PickOpportunityStageName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityStageName Parse(string text) => text;

        

    }
    public class PickOpportunityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityTypeConverter))]
    public class PickOpportunityType
    {
        public static readonly string  ExistingCustomerUpgrade = "Existing Customer - Upgrade"; 
        public static readonly string  ExistingCustomerReplacement = "Existing Customer - Replacement"; 
        public static readonly string  ExistingCustomerDowngrade = "Existing Customer - Downgrade"; 
        public static readonly string  NewCustomer = "New Customer"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityType(string s)
        {
            return new PickOpportunityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityType Parse(string text) => text;

        

    }
    public class PickOpportunityLeadSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityLeadSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityLeadSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityLeadSourceConverter))]
    public class PickOpportunityLeadSource
    {
        public static readonly string  Web = "Web"; 
        public static readonly string  PhoneInquiry = "Phone Inquiry"; 
        public static readonly string  PartnerReferral = "Partner Referral"; 
        public static readonly string  PurchasedList = "Purchased List"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityLeadSource o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityLeadSource(string s)
        {
            return new PickOpportunityLeadSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityLeadSource Parse(string text) => text;

        

    }
    public class PickOpportunityForecastCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityForecastCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityForecastCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityForecastCategoryConverter))]
    public class PickOpportunityForecastCategory
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "BestCase"; 
        public static readonly string  Forecast = "Forecast"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityForecastCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityForecastCategory(string s)
        {
            return new PickOpportunityForecastCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityForecastCategory Parse(string text) => text;

        

    }
    public class PickOpportunityForecastCategoryNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityForecastCategoryName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityForecastCategoryName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityForecastCategoryNameConverter))]
    public class PickOpportunityForecastCategoryName
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "Best Case"; 
        public static readonly string  Commit = "Commit"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityForecastCategoryName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityForecastCategoryName(string s)
        {
            return new PickOpportunityForecastCategoryName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityForecastCategoryName Parse(string text) => text;

        

    }
    public class PickOpportunityDeliveryInstallationStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityDeliveryInstallationStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityDeliveryInstallationStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityDeliveryInstallationStatusConverter))]
    public class PickOpportunityDeliveryInstallationStatus
    {
        public static readonly string  Inprogress = "In progress"; 
        public static readonly string  Yettobegin = "Yet to begin"; 
        public static readonly string  Completed = "Completed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityDeliveryInstallationStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityDeliveryInstallationStatus(string s)
        {
            return new PickOpportunityDeliveryInstallationStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityDeliveryInstallationStatus Parse(string text) => text;

        

    }
    public class PickOpportunityContactRoleRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityContactRoleRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityContactRoleRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityContactRoleRoleConverter))]
    public class PickOpportunityContactRoleRole
    {
        public static readonly string  BusinessUser = "Business User"; 
        public static readonly string  DecisionMaker = "Decision Maker"; 
        public static readonly string  EconomicBuyer = "Economic Buyer"; 
        public static readonly string  EconomicDecisionMaker = "Economic Decision Maker"; 
        public static readonly string  Evaluator = "Evaluator"; 
        public static readonly string  ExecutiveSponsor = "Executive Sponsor"; 
        public static readonly string  Influencer = "Influencer"; 
        public static readonly string  TechnicalBuyer = "Technical Buyer"; 
        public static readonly string  Other = "Other"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityContactRoleRole o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityContactRoleRole(string s)
        {
            return new PickOpportunityContactRoleRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityContactRoleRole Parse(string text) => text;

        

    }
    public class PickOpportunityFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityFeedTypeConverter))]
    public class PickOpportunityFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityFeedType(string s)
        {
            return new PickOpportunityFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityFeedType Parse(string text) => text;

        

    }
    public class PickOpportunityFieldHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityFieldHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityFieldHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityFieldHistoryFieldConverter))]
    public class PickOpportunityFieldHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Amount = "Amount"; 
        public static readonly string  CloseDate = "CloseDate"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  created = "created"; 
        public static readonly string  opportunityCreatedFromLead = "opportunityCreatedFromLead"; 
        public static readonly string  CurrentGeneratorsc = "CurrentGenerators__c"; 
        public static readonly string  DeliveryInstallationStatusc = "DeliveryInstallationStatus__c"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  ForecastCategoryName = "ForecastCategoryName"; 
        public static readonly string  LeadSource = "LeadSource"; 
        public static readonly string  MainCompetitorsc = "MainCompetitors__c"; 
        public static readonly string  NextStep = "NextStep"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  OrderNumberc = "OrderNumber__c"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  IsPrivate = "IsPrivate"; 
        public static readonly string  Probability = "Probability"; 
        public static readonly string  TotalOpportunityQuantity = "TotalOpportunityQuantity"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  StageName = "StageName"; 
        public static readonly string  TrackingNumberc = "TrackingNumber__c"; 
        public static readonly string  Type = "Type"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityFieldHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityFieldHistoryField(string s)
        {
            return new PickOpportunityFieldHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityFieldHistoryField Parse(string text) => text;

        

    }
    public class PickOpportunityHistoryStageNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityHistoryStageName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityHistoryStageName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityHistoryStageNameConverter))]
    public class PickOpportunityHistoryStageName
    {
        public static readonly string  Prospecting = "Prospecting"; 
        public static readonly string  Qualification = "Qualification"; 
        public static readonly string  NeedsAnalysis = "Needs Analysis"; 
        public static readonly string  ValueProposition = "Value Proposition"; 
        public static readonly string  IdDecisionMakers = "Id. Decision Makers"; 
        public static readonly string  PerceptionAnalysis = "Perception Analysis"; 
        public static readonly string  ProposalPriceQuote = "Proposal/Price Quote"; 
        public static readonly string  NegotiationReview = "Negotiation/Review"; 
        public static readonly string  ClosedWon = "Closed Won"; 
        public static readonly string  ClosedLost = "Closed Lost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityHistoryStageName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityHistoryStageName(string s)
        {
            return new PickOpportunityHistoryStageName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityHistoryStageName Parse(string text) => text;

        

    }
    public class PickOpportunityHistoryForecastCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityHistoryForecastCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityHistoryForecastCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityHistoryForecastCategoryConverter))]
    public class PickOpportunityHistoryForecastCategory
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "BestCase"; 
        public static readonly string  Forecast = "Forecast"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityHistoryForecastCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityHistoryForecastCategory(string s)
        {
            return new PickOpportunityHistoryForecastCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityHistoryForecastCategory Parse(string text) => text;

        

    }
    public class PickOpportunityPartnerRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityPartnerRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityPartnerRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityPartnerRoleConverter))]
    public class PickOpportunityPartnerRole
    {
        public static readonly string  SystemIntegrator = "System Integrator"; 
        public static readonly string  Agency = "Agency"; 
        public static readonly string  Advertiser = "Advertiser"; 
        public static readonly string  VARReseller = "VAR/Reseller"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  Developer = "Developer"; 
        public static readonly string  Broker = "Broker"; 
        public static readonly string  Lender = "Lender"; 
        public static readonly string  Supplier = "Supplier"; 
        public static readonly string  Institution = "Institution"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  Dealer = "Dealer"; 
        public static readonly string  Consultant = "Consultant"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityPartnerRole o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityPartnerRole(string s)
        {
            return new PickOpportunityPartnerRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityPartnerRole Parse(string text) => text;

        

    }
    public class PickOpportunityShareOpportunityAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityShareOpportunityAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityShareOpportunityAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityShareOpportunityAccessLevelConverter))]
    public class PickOpportunityShareOpportunityAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityShareOpportunityAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityShareOpportunityAccessLevel(string s)
        {
            return new PickOpportunityShareOpportunityAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityShareOpportunityAccessLevel Parse(string text) => text;

        

    }
    public class PickOpportunityShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityShareRowCauseConverter))]
    public class PickOpportunityShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityShareRowCause(string s)
        {
            return new PickOpportunityShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityShareRowCause Parse(string text) => text;

        

    }
    public class PickOpportunityStageForecastCategoryConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityStageForecastCategory)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityStageForecastCategory {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityStageForecastCategoryConverter))]
    public class PickOpportunityStageForecastCategory
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "BestCase"; 
        public static readonly string  Forecast = "Forecast"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityStageForecastCategory o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityStageForecastCategory(string s)
        {
            return new PickOpportunityStageForecastCategory {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityStageForecastCategory Parse(string text) => text;

        

    }
    public class PickOpportunityStageForecastCategoryNameConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOpportunityStageForecastCategoryName)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOpportunityStageForecastCategoryName {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOpportunityStageForecastCategoryNameConverter))]
    public class PickOpportunityStageForecastCategoryName
    {
        public static readonly string  Omitted = "Omitted"; 
        public static readonly string  Pipeline = "Pipeline"; 
        public static readonly string  BestCase = "Best Case"; 
        public static readonly string  Commit = "Commit"; 
        public static readonly string  Closed = "Closed"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOpportunityStageForecastCategoryName o)
        {
            return o.Value;
        }

        public static implicit operator PickOpportunityStageForecastCategoryName(string s)
        {
            return new PickOpportunityStageForecastCategoryName {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOpportunityStageForecastCategoryName Parse(string text) => text;

        

    }
    public class PickOrderStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderStatusConverter))]
    public class PickOrderStatus
    {
        public static readonly string  Draft = "Draft"; 
        public static readonly string  Activated = "Activated"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderStatus(string s)
        {
            return new PickOrderStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderStatus Parse(string text) => text;

        

    }
    public class PickOrderTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderTypeConverter))]
    public class PickOrderType
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderType o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderType(string s)
        {
            return new PickOrderType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderType Parse(string text) => text;

        

    }
    public class PickOrderStatusCodeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderStatusCode)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderStatusCode {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderStatusCodeConverter))]
    public class PickOrderStatusCode
    {
        public static readonly string  D = "D"; 
        public static readonly string  A = "A"; 
        public static readonly string  C = "C"; 
        public static readonly string  E = "E"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderStatusCode o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderStatusCode(string s)
        {
            return new PickOrderStatusCode {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderStatusCode Parse(string text) => text;

        

    }
    public class PickOrderFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderFeedTypeConverter))]
    public class PickOrderFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderFeedType(string s)
        {
            return new PickOrderFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderFeedType Parse(string text) => text;

        

    }
    public class PickOrderHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderHistoryFieldConverter))]
    public class PickOrderHistoryField
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  ActivatedBy = "ActivatedBy"; 
        public static readonly string  ActivatedDate = "ActivatedDate"; 
        public static readonly string  BillingAddress = "BillingAddress"; 
        public static readonly string  BillingCity = "BillingCity"; 
        public static readonly string  BillingCountry = "BillingCountry"; 
        public static readonly string  BillingGeocodeAccuracy = "BillingGeocodeAccuracy"; 
        public static readonly string  BillingLatitude = "BillingLatitude"; 
        public static readonly string  BillingLongitude = "BillingLongitude"; 
        public static readonly string  BillingState = "BillingState"; 
        public static readonly string  BillingStreet = "BillingStreet"; 
        public static readonly string  BillingPostalCode = "BillingPostalCode"; 
        public static readonly string  BillToContact = "BillToContact"; 
        public static readonly string  CompanyAuthorizedBy = "CompanyAuthorizedBy"; 
        public static readonly string  CompanyAuthorizedDate = "CompanyAuthorizedDate"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  created = "created"; 
        public static readonly string  CustomerAuthorizedBy = "CustomerAuthorizedBy"; 
        public static readonly string  CustomerAuthorizedDate = "CustomerAuthorizedDate"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  orderActivated = "orderActivated"; 
        public static readonly string  orderApproved = "orderApproved"; 
        public static readonly string  orderCancelled = "orderCancelled"; 
        public static readonly string  orderDeactivated = "orderDeactivated"; 
        public static readonly string  EndDate = "EndDate"; 
        public static readonly string  orderExpired = "orderExpired"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  OrderReferenceNumber = "OrderReferenceNumber"; 
        public static readonly string  EffectiveDate = "EffectiveDate"; 
        public static readonly string  orderSubmitted = "orderSubmitted"; 
        public static readonly string  Type = "Type"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  PoDate = "PoDate"; 
        public static readonly string  PoNumber = "PoNumber"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  ShippingAddress = "ShippingAddress"; 
        public static readonly string  ShippingCity = "ShippingCity"; 
        public static readonly string  ShippingCountry = "ShippingCountry"; 
        public static readonly string  ShippingGeocodeAccuracy = "ShippingGeocodeAccuracy"; 
        public static readonly string  ShippingLatitude = "ShippingLatitude"; 
        public static readonly string  ShippingLongitude = "ShippingLongitude"; 
        public static readonly string  ShippingState = "ShippingState"; 
        public static readonly string  ShippingStreet = "ShippingStreet"; 
        public static readonly string  ShippingPostalCode = "ShippingPostalCode"; 
        public static readonly string  ShipToContact = "ShipToContact"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  StatusCode = "StatusCode"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderHistoryField(string s)
        {
            return new PickOrderHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderHistoryField Parse(string text) => text;

        

    }
    public class PickOrderItemFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderItemFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderItemFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderItemFeedTypeConverter))]
    public class PickOrderItemFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderItemFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderItemFeedType(string s)
        {
            return new PickOrderItemFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderItemFeedType Parse(string text) => text;

        

    }
    public class PickOrderItemHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrderItemHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrderItemHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrderItemHistoryFieldConverter))]
    public class PickOrderItemHistoryField
    {
        public static readonly string  created = "created"; 
        public static readonly string  EndDate = "EndDate"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Quantity = "Quantity"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  ServiceDate = "ServiceDate"; 
        public static readonly string  UnitPrice = "UnitPrice"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrderItemHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickOrderItemHistoryField(string s)
        {
            return new PickOrderItemHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrderItemHistoryField Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultLocaleSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultLocaleSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultLocaleSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultLocaleSidKeyConverter))]
    public class PickOrganizationDefaultLocaleSidKey
    {
        public static readonly string  sqAL = "sq_AL"; 
        public static readonly string  arBH = "ar_BH"; 
        public static readonly string  arEG = "ar_EG"; 
        public static readonly string  arJO = "ar_JO"; 
        public static readonly string  arKW = "ar_KW"; 
        public static readonly string  arLB = "ar_LB"; 
        public static readonly string  arQA = "ar_QA"; 
        public static readonly string  arSA = "ar_SA"; 
        public static readonly string  arAE = "ar_AE"; 
        public static readonly string  hyAM = "hy_AM"; 
        public static readonly string  azAZ = "az_AZ"; 
        public static readonly string  euES = "eu_ES"; 
        public static readonly string  beBY = "be_BY"; 
        public static readonly string  bnBD = "bn_BD"; 
        public static readonly string  bsBA = "bs_BA"; 
        public static readonly string  bgBG = "bg_BG"; 
        public static readonly string  caES = "ca_ES"; 
        public static readonly string  zhCNPINYIN = "zh_CN_PINYIN"; 
        public static readonly string  zhCNSTROKE = "zh_CN_STROKE"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  zhHKSTROKE = "zh_HK_STROKE"; 
        public static readonly string  zhHK = "zh_HK"; 
        public static readonly string  zhMO = "zh_MO"; 
        public static readonly string  zhSG = "zh_SG"; 
        public static readonly string  zhTWSTROKE = "zh_TW_STROKE"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  hrHR = "hr_HR"; 
        public static readonly string  csCZ = "cs_CZ"; 
        public static readonly string  daDK = "da_DK"; 
        public static readonly string  nlBE = "nl_BE"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  nlSR = "nl_SR"; 
        public static readonly string  enAU = "en_AU"; 
        public static readonly string  enBB = "en_BB"; 
        public static readonly string  enBM = "en_BM"; 
        public static readonly string  enCA = "en_CA"; 
        public static readonly string  enGH = "en_GH"; 
        public static readonly string  enIN = "en_IN"; 
        public static readonly string  enID = "en_ID"; 
        public static readonly string  enIE = "en_IE"; 
        public static readonly string  enMY = "en_MY"; 
        public static readonly string  enNZ = "en_NZ"; 
        public static readonly string  enNG = "en_NG"; 
        public static readonly string  enPK = "en_PK"; 
        public static readonly string  enPH = "en_PH"; 
        public static readonly string  enSG = "en_SG"; 
        public static readonly string  enZA = "en_ZA"; 
        public static readonly string  enGB = "en_GB"; 
        public static readonly string  enUS = "en_US"; 
        public static readonly string  etEE = "et_EE"; 
        public static readonly string  fiFI = "fi_FI"; 
        public static readonly string  frBE = "fr_BE"; 
        public static readonly string  frCA = "fr_CA"; 
        public static readonly string  frFR = "fr_FR"; 
        public static readonly string  frLU = "fr_LU"; 
        public static readonly string  frMC = "fr_MC"; 
        public static readonly string  frCH = "fr_CH"; 
        public static readonly string  kaGE = "ka_GE"; 
        public static readonly string  deAT = "de_AT"; 
        public static readonly string  deDE = "de_DE"; 
        public static readonly string  deLU = "de_LU"; 
        public static readonly string  deCH = "de_CH"; 
        public static readonly string  elGR = "el_GR"; 
        public static readonly string  iwIL = "iw_IL"; 
        public static readonly string  hiIN = "hi_IN"; 
        public static readonly string  huHU = "hu_HU"; 
        public static readonly string  isIS = "is_IS"; 
        public static readonly string  inID = "in_ID"; 
        public static readonly string  gaIE = "ga_IE"; 
        public static readonly string  itIT = "it_IT"; 
        public static readonly string  itCH = "it_CH"; 
        public static readonly string  jaJP = "ja_JP"; 
        public static readonly string  kkKZ = "kk_KZ"; 
        public static readonly string  kmKH = "km_KH"; 
        public static readonly string  koKR = "ko_KR"; 
        public static readonly string  kyKG = "ky_KG"; 
        public static readonly string  lvLV = "lv_LV"; 
        public static readonly string  ltLT = "lt_LT"; 
        public static readonly string  lbLU = "lb_LU"; 
        public static readonly string  mkMK = "mk_MK"; 
        public static readonly string  msBN = "ms_BN"; 
        public static readonly string  msMY = "ms_MY"; 
        public static readonly string  mtMT = "mt_MT"; 
        public static readonly string  shME = "sh_ME"; 
        public static readonly string  noNO = "no_NO"; 
        public static readonly string  plPL = "pl_PL"; 
        public static readonly string  ptAO = "pt_AO"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  ptPT = "pt_PT"; 
        public static readonly string  roMD = "ro_MD"; 
        public static readonly string  roRO = "ro_RO"; 
        public static readonly string  rmCH = "rm_CH"; 
        public static readonly string  ruRU = "ru_RU"; 
        public static readonly string  srBA = "sr_BA"; 
        public static readonly string  shBA = "sh_BA"; 
        public static readonly string  shCS = "sh_CS"; 
        public static readonly string  srCS = "sr_CS"; 
        public static readonly string  skSK = "sk_SK"; 
        public static readonly string  slSI = "sl_SI"; 
        public static readonly string  esAR = "es_AR"; 
        public static readonly string  esBO = "es_BO"; 
        public static readonly string  esCL = "es_CL"; 
        public static readonly string  esCO = "es_CO"; 
        public static readonly string  esCR = "es_CR"; 
        public static readonly string  esDO = "es_DO"; 
        public static readonly string  esEC = "es_EC"; 
        public static readonly string  esSV = "es_SV"; 
        public static readonly string  esGT = "es_GT"; 
        public static readonly string  esHN = "es_HN"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  esPA = "es_PA"; 
        public static readonly string  esPY = "es_PY"; 
        public static readonly string  esPE = "es_PE"; 
        public static readonly string  esPR = "es_PR"; 
        public static readonly string  esES = "es_ES"; 
        public static readonly string  esUY = "es_UY"; 
        public static readonly string  esVE = "es_VE"; 
        public static readonly string  svSE = "sv_SE"; 
        public static readonly string  tlPH = "tl_PH"; 
        public static readonly string  tgTJ = "tg_TJ"; 
        public static readonly string  thTH = "th_TH"; 
        public static readonly string  trTR = "tr_TR"; 
        public static readonly string  ukUA = "uk_UA"; 
        public static readonly string  urPK = "ur_PK"; 
        public static readonly string  viVN = "vi_VN"; 
        public static readonly string  cyGB = "cy_GB"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultLocaleSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultLocaleSidKey(string s)
        {
            return new PickOrganizationDefaultLocaleSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultLocaleSidKey Parse(string text) => text;

        

    }
    public class PickOrganizationLanguageLocaleKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationLanguageLocaleKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationLanguageLocaleKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationLanguageLocaleKeyConverter))]
    public class PickOrganizationLanguageLocaleKey
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationLanguageLocaleKey o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationLanguageLocaleKey(string s)
        {
            return new PickOrganizationLanguageLocaleKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationLanguageLocaleKey Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultAccountAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultAccountAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultAccountAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultAccountAccessConverter))]
    public class PickOrganizationDefaultAccountAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultAccountAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultAccountAccess(string s)
        {
            return new PickOrganizationDefaultAccountAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultAccountAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultContactAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultContactAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultContactAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultContactAccessConverter))]
    public class PickOrganizationDefaultContactAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  ControlledByParent = "ControlledByParent"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultContactAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultContactAccess(string s)
        {
            return new PickOrganizationDefaultContactAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultContactAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultOpportunityAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultOpportunityAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultOpportunityAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultOpportunityAccessConverter))]
    public class PickOrganizationDefaultOpportunityAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultOpportunityAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultOpportunityAccess(string s)
        {
            return new PickOrganizationDefaultOpportunityAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultOpportunityAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultLeadAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultLeadAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultLeadAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultLeadAccessConverter))]
    public class PickOrganizationDefaultLeadAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  ReadEditTransfer = "ReadEditTransfer"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultLeadAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultLeadAccess(string s)
        {
            return new PickOrganizationDefaultLeadAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultLeadAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultCaseAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultCaseAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultCaseAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultCaseAccessConverter))]
    public class PickOrganizationDefaultCaseAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  ReadEditTransfer = "ReadEditTransfer"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultCaseAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultCaseAccess(string s)
        {
            return new PickOrganizationDefaultCaseAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultCaseAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultCalendarAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultCalendarAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultCalendarAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultCalendarAccessConverter))]
    public class PickOrganizationDefaultCalendarAccess
    {
        public static readonly string  HideDetails = "HideDetails"; 
        public static readonly string  HideDetailsInsert = "HideDetailsInsert"; 
        public static readonly string  ShowDetails = "ShowDetails"; 
        public static readonly string  ShowDetailsInsert = "ShowDetailsInsert"; 
        public static readonly string  AllowEdits = "AllowEdits"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultCalendarAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultCalendarAccess(string s)
        {
            return new PickOrganizationDefaultCalendarAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultCalendarAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultPricebookAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultPricebookAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultPricebookAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultPricebookAccessConverter))]
    public class PickOrganizationDefaultPricebookAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  ReadSelect = "ReadSelect"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultPricebookAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultPricebookAccess(string s)
        {
            return new PickOrganizationDefaultPricebookAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultPricebookAccess Parse(string text) => text;

        

    }
    public class PickOrganizationDefaultCampaignAccessConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationDefaultCampaignAccess)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationDefaultCampaignAccess {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationDefaultCampaignAccessConverter))]
    public class PickOrganizationDefaultCampaignAccess
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationDefaultCampaignAccess o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationDefaultCampaignAccess(string s)
        {
            return new PickOrganizationDefaultCampaignAccess {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationDefaultCampaignAccess Parse(string text) => text;

        

    }
    public class PickOrganizationUiSkinConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationUiSkin)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationUiSkin {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationUiSkinConverter))]
    public class PickOrganizationUiSkin
    {
        public static readonly string  Theme1 = "Theme1"; 
        public static readonly string  Theme2 = "Theme2"; 
        public static readonly string  PortalDefault = "PortalDefault"; 
        public static readonly string  Webstore = "Webstore"; 
        public static readonly string  Theme3 = "Theme3"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationUiSkin o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationUiSkin(string s)
        {
            return new PickOrganizationUiSkin {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationUiSkin Parse(string text) => text;

        

    }
    public class PickOrganizationOrganizationTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickOrganizationOrganizationType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickOrganizationOrganizationType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickOrganizationOrganizationTypeConverter))]
    public class PickOrganizationOrganizationType
    {
        public static readonly string  TeamEdition = "Team Edition"; 
        public static readonly string  ProfessionalEdition = "Professional Edition"; 
        public static readonly string  EnterpriseEdition = "Enterprise Edition"; 
        public static readonly string  DeveloperEdition = "Developer Edition"; 
        public static readonly string  PersonalEdition = "Personal Edition"; 
        public static readonly string  UnlimitedEdition = "Unlimited Edition"; 
        public static readonly string  ContactManagerEdition = "Contact Manager Edition"; 
        public static readonly string  BaseEdition = "Base Edition"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickOrganizationOrganizationType o)
        {
            return o.Value;
        }

        public static implicit operator PickOrganizationOrganizationType(string s)
        {
            return new PickOrganizationOrganizationType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickOrganizationOrganizationType Parse(string text) => text;

        

    }
    public class PickPartnerRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPartnerRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPartnerRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPartnerRoleConverter))]
    public class PickPartnerRole
    {
        public static readonly string  SystemIntegrator = "System Integrator"; 
        public static readonly string  Agency = "Agency"; 
        public static readonly string  Advertiser = "Advertiser"; 
        public static readonly string  VARReseller = "VAR/Reseller"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  Developer = "Developer"; 
        public static readonly string  Broker = "Broker"; 
        public static readonly string  Lender = "Lender"; 
        public static readonly string  Supplier = "Supplier"; 
        public static readonly string  Institution = "Institution"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  Dealer = "Dealer"; 
        public static readonly string  Consultant = "Consultant"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPartnerRole o)
        {
            return o.Value;
        }

        public static implicit operator PickPartnerRole(string s)
        {
            return new PickPartnerRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPartnerRole Parse(string text) => text;

        

    }
    public class PickPartnerRoleReverseRoleConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPartnerRoleReverseRole)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPartnerRoleReverseRole {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPartnerRoleReverseRoleConverter))]
    public class PickPartnerRoleReverseRole
    {
        public static readonly string  SystemIntegrator = "System Integrator"; 
        public static readonly string  Agency = "Agency"; 
        public static readonly string  Advertiser = "Advertiser"; 
        public static readonly string  VARReseller = "VAR/Reseller"; 
        public static readonly string  Distributor = "Distributor"; 
        public static readonly string  Developer = "Developer"; 
        public static readonly string  Broker = "Broker"; 
        public static readonly string  Lender = "Lender"; 
        public static readonly string  Supplier = "Supplier"; 
        public static readonly string  Institution = "Institution"; 
        public static readonly string  Contractor = "Contractor"; 
        public static readonly string  Dealer = "Dealer"; 
        public static readonly string  Consultant = "Consultant"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPartnerRoleReverseRole o)
        {
            return o.Value;
        }

        public static implicit operator PickPartnerRoleReverseRole(string s)
        {
            return new PickPartnerRoleReverseRole {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPartnerRoleReverseRole Parse(string text) => text;

        

    }
    public class PickPeriodTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPeriodType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPeriodType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPeriodTypeConverter))]
    public class PickPeriodType
    {
        public static readonly string  Month = "Month"; 
        public static readonly string  Quarter = "Quarter"; 
        public static readonly string  Week = "Week"; 
        public static readonly string  Year = "Year"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPeriodType o)
        {
            return o.Value;
        }

        public static implicit operator PickPeriodType(string s)
        {
            return new PickPeriodType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPeriodType Parse(string text) => text;

        

    }
    public class PickPeriodQuarterLabelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPeriodQuarterLabel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPeriodQuarterLabel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPeriodQuarterLabelConverter))]
    public class PickPeriodQuarterLabel
    {
        public static readonly string  Spring = "Spring"; 
        public static readonly string  Summer = "Summer"; 
        public static readonly string  Fall = "Fall"; 
        public static readonly string  Winter = "Winter"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPeriodQuarterLabel o)
        {
            return o.Value;
        }

        public static implicit operator PickPeriodQuarterLabel(string s)
        {
            return new PickPeriodQuarterLabel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPeriodQuarterLabel Parse(string text) => text;

        

    }
    public class PickPeriodPeriodLabelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPeriodPeriodLabel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPeriodPeriodLabel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPeriodPeriodLabelConverter))]
    public class PickPeriodPeriodLabel
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickPeriodPeriodLabel o)
        {
            return o.Value;
        }

        public static implicit operator PickPeriodPeriodLabel(string s)
        {
            return new PickPeriodPeriodLabel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPeriodPeriodLabel Parse(string text) => text;

        

    }
    public class PickPermissionSetLicenseLanguageConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPermissionSetLicenseLanguage)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPermissionSetLicenseLanguage {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPermissionSetLicenseLanguageConverter))]
    public class PickPermissionSetLicenseLanguage
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPermissionSetLicenseLanguage o)
        {
            return o.Value;
        }

        public static implicit operator PickPermissionSetLicenseLanguage(string s)
        {
            return new PickPermissionSetLicenseLanguage {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPermissionSetLicenseLanguage Parse(string text) => text;

        

    }
    public class PickPermissionSetLicenseStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPermissionSetLicenseStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPermissionSetLicenseStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPermissionSetLicenseStatusConverter))]
    public class PickPermissionSetLicenseStatus
    {
        public static readonly string  Active = "Active"; 
        public static readonly string  Disabled = "Disabled"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPermissionSetLicenseStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickPermissionSetLicenseStatus(string s)
        {
            return new PickPermissionSetLicenseStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPermissionSetLicenseStatus Parse(string text) => text;

        

    }
    public class PickPricebook2HistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPricebook2HistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPricebook2HistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPricebook2HistoryFieldConverter))]
    public class PickPricebook2HistoryField
    {
        public static readonly string  IsActive = "IsActive"; 
        public static readonly string  IsArchived = "IsArchived"; 
        public static readonly string  created = "created"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  IsStandard = "IsStandard"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPricebook2HistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickPricebook2HistoryField(string s)
        {
            return new PickPricebook2HistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPricebook2HistoryField Parse(string text) => text;

        

    }
    public class PickProcessDefinitionTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessDefinitionType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessDefinitionType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessDefinitionTypeConverter))]
    public class PickProcessDefinitionType
    {
        public static readonly string  Approval = "Approval"; 
        public static readonly string  State = "State"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessDefinitionType o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessDefinitionType(string s)
        {
            return new PickProcessDefinitionType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessDefinitionType Parse(string text) => text;

        

    }
    public class PickProcessDefinitionTableEnumOrIdConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessDefinitionTableEnumOrId)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessDefinitionTableEnumOrId {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessDefinitionTableEnumOrIdConverter))]
    public class PickProcessDefinitionTableEnumOrId
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  AssistantProgress = "AssistantProgress"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  DuplicateRecordItem = "DuplicateRecordItem"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  EmailMessage = "EmailMessage"; 
        public static readonly string  ExchangeUserMapping = "ExchangeUserMapping"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  KnowledgeArticle = "KnowledgeArticle"; 
        public static readonly string  KnowledgeArticleVersion = "KnowledgeArticleVersion"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  StreamingChannel = "StreamingChannel"; 
        public static readonly string  UserProvisioningRequest = "UserProvisioningRequest"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessDefinitionTableEnumOrId o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessDefinitionTableEnumOrId(string s)
        {
            return new PickProcessDefinitionTableEnumOrId {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessDefinitionTableEnumOrId Parse(string text) => text;

        

    }
    public class PickProcessDefinitionLockTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessDefinitionLockType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessDefinitionLockType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessDefinitionLockTypeConverter))]
    public class PickProcessDefinitionLockType
    {
        public static readonly string  Total = "Total"; 
        public static readonly string  Admin = "Admin"; 
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Workitem = "Workitem"; 
        public static readonly string  Node = "Node"; 
        public static readonly string  none = "none"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessDefinitionLockType o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessDefinitionLockType(string s)
        {
            return new PickProcessDefinitionLockType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessDefinitionLockType Parse(string text) => text;

        

    }
    public class PickProcessDefinitionStateConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessDefinitionState)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessDefinitionState {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessDefinitionStateConverter))]
    public class PickProcessDefinitionState
    {
        public static readonly string  Active = "Active"; 
        public static readonly string  Inactive = "Inactive"; 
        public static readonly string  Obsolete = "Obsolete"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessDefinitionState o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessDefinitionState(string s)
        {
            return new PickProcessDefinitionState {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessDefinitionState Parse(string text) => text;

        

    }
    public class PickProcessInstanceStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessInstanceStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessInstanceStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessInstanceStatusConverter))]
    public class PickProcessInstanceStatus
    {
        public static readonly string  Approved = "Approved"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Removed = "Removed"; 
        public static readonly string  Fault = "Fault"; 
        public static readonly string  Pending = "Pending"; 
        public static readonly string  Held = "Held"; 
        public static readonly string  Reassigned = "Reassigned"; 
        public static readonly string  Started = "Started"; 
        public static readonly string  NoResponse = "NoResponse"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessInstanceStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessInstanceStatus(string s)
        {
            return new PickProcessInstanceStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessInstanceStatus Parse(string text) => text;

        

    }
    public class PickProcessInstanceHistoryStepStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessInstanceHistoryStepStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessInstanceHistoryStepStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessInstanceHistoryStepStatusConverter))]
    public class PickProcessInstanceHistoryStepStatus
    {
        public static readonly string  Approved = "Approved"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Removed = "Removed"; 
        public static readonly string  Fault = "Fault"; 
        public static readonly string  Pending = "Pending"; 
        public static readonly string  Held = "Held"; 
        public static readonly string  Reassigned = "Reassigned"; 
        public static readonly string  Started = "Started"; 
        public static readonly string  NoResponse = "NoResponse"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessInstanceHistoryStepStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessInstanceHistoryStepStatus(string s)
        {
            return new PickProcessInstanceHistoryStepStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessInstanceHistoryStepStatus Parse(string text) => text;

        

    }
    public class PickProcessInstanceStepStepStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProcessInstanceStepStepStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProcessInstanceStepStepStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProcessInstanceStepStepStatusConverter))]
    public class PickProcessInstanceStepStepStatus
    {
        public static readonly string  Approved = "Approved"; 
        public static readonly string  Rejected = "Rejected"; 
        public static readonly string  Removed = "Removed"; 
        public static readonly string  Fault = "Fault"; 
        public static readonly string  Pending = "Pending"; 
        public static readonly string  Held = "Held"; 
        public static readonly string  Reassigned = "Reassigned"; 
        public static readonly string  Started = "Started"; 
        public static readonly string  NoResponse = "NoResponse"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProcessInstanceStepStepStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickProcessInstanceStepStepStatus(string s)
        {
            return new PickProcessInstanceStepStepStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProcessInstanceStepStepStatus Parse(string text) => text;

        

    }
    public class PickProduct2FamilyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2Family)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2Family {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2FamilyConverter))]
    public class PickProduct2Family
    {
        public static readonly string  None = "None"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2Family o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2Family(string s)
        {
            return new PickProduct2Family {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2Family Parse(string text) => text;

        

    }
    public class PickProduct2FeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProduct2FeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProduct2FeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProduct2FeedTypeConverter))]
    public class PickProduct2FeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProduct2FeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickProduct2FeedType(string s)
        {
            return new PickProduct2FeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProduct2FeedType Parse(string text) => text;

        

    }
    public class PickProfileUserTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickProfileUserType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickProfileUserType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickProfileUserTypeConverter))]
    public class PickProfileUserType
    {
        public static readonly string  Standard = "Standard"; 
        public static readonly string  PowerPartner = "PowerPartner"; 
        public static readonly string  PowerCustomerSuccess = "PowerCustomerSuccess"; 
        public static readonly string  CustomerSuccess = "CustomerSuccess"; 
        public static readonly string  Guest = "Guest"; 
        public static readonly string  CspLitePortal = "CspLitePortal"; 
        public static readonly string  CsnOnly = "CsnOnly"; 
        public static readonly string  SelfService = "SelfService"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickProfileUserType o)
        {
            return o.Value;
        }

        public static implicit operator PickProfileUserType(string s)
        {
            return new PickProfileUserType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickProfileUserType Parse(string text) => text;

        

    }
    public class PickPushTopicNotifyForFieldsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPushTopicNotifyForFields)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPushTopicNotifyForFields {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPushTopicNotifyForFieldsConverter))]
    public class PickPushTopicNotifyForFields
    {
        public static readonly string  Select = "Select"; 
        public static readonly string  Where = "Where"; 
        public static readonly string  Referenced = "Referenced"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPushTopicNotifyForFields o)
        {
            return o.Value;
        }

        public static implicit operator PickPushTopicNotifyForFields(string s)
        {
            return new PickPushTopicNotifyForFields {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPushTopicNotifyForFields Parse(string text) => text;

        

    }
    public class PickPushTopicNotifyForOperationsConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickPushTopicNotifyForOperations)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickPushTopicNotifyForOperations {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickPushTopicNotifyForOperationsConverter))]
    public class PickPushTopicNotifyForOperations
    {
        public static readonly string  Create = "Create"; 
        public static readonly string  Update = "Update"; 
        public static readonly string  All = "All"; 
        public static readonly string  Extended = "Extended"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickPushTopicNotifyForOperations o)
        {
            return o.Value;
        }

        public static implicit operator PickPushTopicNotifyForOperations(string s)
        {
            return new PickPushTopicNotifyForOperations {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickPushTopicNotifyForOperations Parse(string text) => text;

        

    }
    public class PickQueueSobjectSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickQueueSobjectSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickQueueSobjectSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickQueueSobjectSobjectTypeConverter))]
    public class PickQueueSobjectSobjectType
    {
        public static readonly string  Case = "Case"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  UserProvisioningRequest = "UserProvisioningRequest"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickQueueSobjectSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickQueueSobjectSobjectType(string s)
        {
            return new PickQueueSobjectSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickQueueSobjectSobjectType Parse(string text) => text;

        

    }
    public class PickRecentlyViewedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickRecentlyViewedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickRecentlyViewedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickRecentlyViewedTypeConverter))]
    public class PickRecentlyViewedType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  CollaborationGroup = "CollaborationGroup"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContentDocument = "ContentDocument"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  Dashboard = "Dashboard"; 
        public static readonly string  Document = "Document"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  PricebookEntry = "PricebookEntry"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  Profile = "Profile"; 
        public static readonly string  Report = "Report"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  StreamingChannel = "StreamingChannel"; 
        public static readonly string  Topic = "Topic"; 
        public static readonly string  User = "User"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickRecentlyViewedType o)
        {
            return o.Value;
        }

        public static implicit operator PickRecentlyViewedType(string s)
        {
            return new PickRecentlyViewedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickRecentlyViewedType Parse(string text) => text;

        

    }
    public class PickRecentlyViewedLanguageConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickRecentlyViewedLanguage)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickRecentlyViewedLanguage {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickRecentlyViewedLanguageConverter))]
    public class PickRecentlyViewedLanguage
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickRecentlyViewedLanguage o)
        {
            return o.Value;
        }

        public static implicit operator PickRecentlyViewedLanguage(string s)
        {
            return new PickRecentlyViewedLanguage {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickRecentlyViewedLanguage Parse(string text) => text;

        

    }
    public class PickRecordTypeSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickRecordTypeSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickRecordTypeSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickRecordTypeSobjectTypeConverter))]
    public class PickRecordTypeSobjectType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Announcement = "Announcement"; 
        public static readonly string  AssistantProgress = "AssistantProgress"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  CampaignMember = "CampaignMember"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  CollaborationGroupRecord = "CollaborationGroupRecord"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContentVersion = "ContentVersion"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  DuplicateErrorLog = "DuplicateErrorLog"; 
        public static readonly string  DuplicateRecordItem = "DuplicateRecordItem"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  Event = "Event"; 
        public static readonly string  FileSearchActivity = "FileSearchActivity"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  GoalLink = "GoalLink"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  InboundSocialPost = "InboundSocialPost"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  MacroAction = "MacroAction"; 
        public static readonly string  MacroInstruction = "MacroInstruction"; 
        public static readonly string  ManagedContentBlock = "ManagedContentBlock"; 
        public static readonly string  ManagedContentBlockVersion = "ManagedContentBlockVersion"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  MetricDataLink = "MetricDataLink"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  Pricebook2 = "Pricebook2"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  RecordOrigin = "RecordOrigin"; 
        public static readonly string  SearchActivity = "SearchActivity"; 
        public static readonly string  SearchPromotionRule = "SearchPromotionRule"; 
        public static readonly string  SetupAssistantAnswer = "SetupAssistantAnswer"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  SyncTransactionLog = "SyncTransactionLog"; 
        public static readonly string  Task = "Task"; 
        public static readonly string  TransactionSecurityAction = "TransactionSecurityAction"; 
        public static readonly string  TransactionSecurityActionEvent = "TransactionSecurityActionEvent"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickRecordTypeSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickRecordTypeSobjectType(string s)
        {
            return new PickRecordTypeSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickRecordTypeSobjectType Parse(string text) => text;

        

    }
    public class PickReportFormatConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickReportFormat)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickReportFormat {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickReportFormatConverter))]
    public class PickReportFormat
    {
        public static readonly string  MultiBlock = "MultiBlock"; 
        public static readonly string  Matrix = "Matrix"; 
        public static readonly string  Summary = "Summary"; 
        public static readonly string  Tabular = "Tabular"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickReportFormat o)
        {
            return o.Value;
        }

        public static implicit operator PickReportFormat(string s)
        {
            return new PickReportFormat {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickReportFormat Parse(string text) => text;

        

    }
    public class PickReportFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickReportFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickReportFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickReportFeedTypeConverter))]
    public class PickReportFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickReportFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickReportFeedType(string s)
        {
            return new PickReportFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickReportFeedType Parse(string text) => text;

        

    }
    public class PickScontrolEncodingKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickScontrolEncodingKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickScontrolEncodingKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickScontrolEncodingKeyConverter))]
    public class PickScontrolEncodingKey
    {
        public static readonly string  UTF8 = "UTF-8"; 
        public static readonly string  ISO88591 = "ISO-8859-1"; 
        public static readonly string  ShiftJIS = "Shift_JIS"; 
        public static readonly string  ISO2022JP = "ISO-2022-JP"; 
        public static readonly string  EUCJP = "EUC-JP"; 
        public static readonly string  ksc56011987 = "ks_c_5601-1987"; 
        public static readonly string  Big5 = "Big5"; 
        public static readonly string  GB2312 = "GB2312"; 
        public static readonly string  Big5HKSCS = "Big5-HKSCS"; 
        public static readonly string  xSJIS0213 = "x-SJIS_0213"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickScontrolEncodingKey o)
        {
            return o.Value;
        }

        public static implicit operator PickScontrolEncodingKey(string s)
        {
            return new PickScontrolEncodingKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickScontrolEncodingKey Parse(string text) => text;

        

    }
    public class PickScontrolContentSourceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickScontrolContentSource)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickScontrolContentSource {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickScontrolContentSourceConverter))]
    public class PickScontrolContentSource
    {
        public static readonly string  HTML = "HTML"; 
        public static readonly string  URL = "URL"; 
        public static readonly string  Snippet = "Snippet"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickScontrolContentSource o)
        {
            return o.Value;
        }

        public static implicit operator PickScontrolContentSource(string s)
        {
            return new PickScontrolContentSource {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickScontrolContentSource Parse(string text) => text;

        

    }
    public class PickSecureAgentLanguageConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSecureAgentLanguage)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSecureAgentLanguage {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSecureAgentLanguageConverter))]
    public class PickSecureAgentLanguage
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSecureAgentLanguage o)
        {
            return o.Value;
        }

        public static implicit operator PickSecureAgentLanguage(string s)
        {
            return new PickSecureAgentLanguage {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSecureAgentLanguage Parse(string text) => text;

        

    }
    public class PickSetupEntityAccessSetupEntityTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSetupEntityAccessSetupEntityType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSetupEntityAccessSetupEntityType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSetupEntityAccessSetupEntityTypeConverter))]
    public class PickSetupEntityAccessSetupEntityType
    {
        public static readonly string  ApexClass = "ApexClass"; 
        public static readonly string  ApexPage = "ApexPage"; 
        public static readonly string  ExternalDataSource = "ExternalDataSource"; 
        public static readonly string  TabSet = "TabSet"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSetupEntityAccessSetupEntityType o)
        {
            return o.Value;
        }

        public static implicit operator PickSetupEntityAccessSetupEntityType(string s)
        {
            return new PickSetupEntityAccessSetupEntityType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSetupEntityAccessSetupEntityType Parse(string text) => text;

        

    }
    public class PickSiteStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSiteStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSiteStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSiteStatusConverter))]
    public class PickSiteStatus
    {
        public static readonly string  Active = "Active"; 
        public static readonly string  Inactive = "Inactive"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSiteStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickSiteStatus(string s)
        {
            return new PickSiteStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSiteStatus Parse(string text) => text;

        

    }
    public class PickSiteSiteTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSiteSiteType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSiteSiteType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSiteSiteTypeConverter))]
    public class PickSiteSiteType
    {
        public static readonly string  Siteforce = "Siteforce"; 
        public static readonly string  Visualforce = "Visualforce"; 
        public static readonly string  User = "User"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSiteSiteType o)
        {
            return o.Value;
        }

        public static implicit operator PickSiteSiteType(string s)
        {
            return new PickSiteSiteType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSiteSiteType Parse(string text) => text;

        

    }
    public class PickSiteClickjackProtectionLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSiteClickjackProtectionLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSiteClickjackProtectionLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSiteClickjackProtectionLevelConverter))]
    public class PickSiteClickjackProtectionLevel
    {
        public static readonly string  AllowAllFraming = "AllowAllFraming"; 
        public static readonly string  SameOriginOnly = "SameOriginOnly"; 
        public static readonly string  NoFraming = "NoFraming"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSiteClickjackProtectionLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickSiteClickjackProtectionLevel(string s)
        {
            return new PickSiteClickjackProtectionLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSiteClickjackProtectionLevel Parse(string text) => text;

        

    }
    public class PickSiteFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSiteFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSiteFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSiteFeedTypeConverter))]
    public class PickSiteFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSiteFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickSiteFeedType(string s)
        {
            return new PickSiteFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSiteFeedType Parse(string text) => text;

        

    }
    public class PickSiteHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSiteHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSiteHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSiteHistoryFieldConverter))]
    public class PickSiteHistoryField
    {
        public static readonly string  siteActive = "siteActive"; 
        public static readonly string  IndexPage = "IndexPage"; 
        public static readonly string  SiteAllowStandardPortalPages = "SiteAllowStandardPortalPages"; 
        public static readonly string  AnalyticsTrackingCode = "AnalyticsTrackingCode"; 
        public static readonly string  siteOverride401 = "siteOverride401"; 
        public static readonly string  siteOverrideChangePassword = "siteOverrideChangePassword"; 
        public static readonly string  ClickjackProtectionLevel = "ClickjackProtectionLevel"; 
        public static readonly string  created = "created"; 
        public static readonly string  SiteDeleteDomain = "SiteDeleteDomain"; 
        public static readonly string  siteNewDomain = "siteNewDomain"; 
        public static readonly string  TopLevelDomain = "TopLevelDomain"; 
        public static readonly string  DefaultDomain = "DefaultDomain"; 
        public static readonly string  siteSetPrimaryDomain = "siteSetPrimaryDomain"; 
        public static readonly string  UrlPathPrefix = "UrlPathPrefix"; 
        public static readonly string  siteBTDisabled = "siteBTDisabled"; 
        public static readonly string  siteEnableFeeds = "siteEnableFeeds"; 
        public static readonly string  siteAllowStandardAnswersPages = "siteAllowStandardAnswersPages"; 
        public static readonly string  siteAllowHomePage = "siteAllowHomePage"; 
        public static readonly string  siteAllowStandardIdeasPages = "siteAllowStandardIdeasPages"; 
        public static readonly string  siteAllowStandardSearch = "siteAllowStandardSearch"; 
        public static readonly string  siteAllowStandardLookups = "siteAllowStandardLookups"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  siteOverrideForgotPassword = "siteOverrideForgotPassword"; 
        public static readonly string  siteOverride500 = "siteOverride500"; 
        public static readonly string  GuestUser = "GuestUser"; 
        public static readonly string  siteOverrideInactive = "siteOverrideInactive"; 
        public static readonly string  siteOverride509 = "siteOverride509"; 
        public static readonly string  siteOverride503 = "siteOverride503"; 
        public static readonly string  sitePageLimitExceeded = "sitePageLimitExceeded"; 
        public static readonly string  siteOverrideMyProfile = "siteOverrideMyProfile"; 
        public static readonly string  NewPassTemplate = "NewPassTemplate"; 
        public static readonly string  NewUserTemplate = "NewUserTemplate"; 
        public static readonly string  Options = "Options"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  siteOverride404 = "siteOverride404"; 
        public static readonly string  Portal = "Portal"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  siteNewRedirect = "siteNewRedirect"; 
        public static readonly string  siteDeleteRedirect = "siteDeleteRedirect"; 
        public static readonly string  siteChangeRedirect = "siteChangeRedirect"; 
        public static readonly string  siteRequireInsecurePortalAccess = "siteRequireInsecurePortalAccess"; 
        public static readonly string  siteRequireHttps = "siteRequireHttps"; 
        public static readonly string  siteOverrideSelfReg = "siteOverrideSelfReg"; 
        public static readonly string  ServerIsDown = "ServerIsDown"; 
        public static readonly string  Admin = "Admin"; 
        public static readonly string  Description = "Description"; 
        public static readonly string  FavoriteIcon = "FavoriteIcon"; 
        public static readonly string  MasterLabel = "MasterLabel"; 
        public static readonly string  Language = "Language"; 
        public static readonly string  Name = "Name"; 
        public static readonly string  siteOverrideRobotsTxt = "siteOverrideRobotsTxt"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  Subdomain = "Subdomain"; 
        public static readonly string  siteOverrideTemplate = "siteOverrideTemplate"; 
        public static readonly string  SiteType = "SiteType"; 
        public static readonly string  Guid = "Guid"; 
        public static readonly string  UrlRewriterClass = "UrlRewriterClass"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSiteHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickSiteHistoryField(string s)
        {
            return new PickSiteHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSiteHistoryField Parse(string text) => text;

        

    }
    public class PickSolutionStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSolutionStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSolutionStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSolutionStatusConverter))]
    public class PickSolutionStatus
    {
        public static readonly string  Draft = "Draft"; 
        public static readonly string  Reviewed = "Reviewed"; 
        public static readonly string  Duplicate = "Duplicate"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSolutionStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickSolutionStatus(string s)
        {
            return new PickSolutionStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSolutionStatus Parse(string text) => text;

        

    }
    public class PickSolutionFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSolutionFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSolutionFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSolutionFeedTypeConverter))]
    public class PickSolutionFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSolutionFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickSolutionFeedType(string s)
        {
            return new PickSolutionFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSolutionFeedType Parse(string text) => text;

        

    }
    public class PickSolutionHistoryFieldConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickSolutionHistoryField)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickSolutionHistoryField {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickSolutionHistoryFieldConverter))]
    public class PickSolutionHistoryField
    {
        public static readonly string  created = "created"; 
        public static readonly string  feedEvent = "feedEvent"; 
        public static readonly string  ownerAccepted = "ownerAccepted"; 
        public static readonly string  ownerAssignment = "ownerAssignment"; 
        public static readonly string  IsPublished = "IsPublished"; 
        public static readonly string  locked = "locked"; 
        public static readonly string  unlocked = "unlocked"; 
        public static readonly string  SolutionNote = "SolutionNote"; 
        public static readonly string  SolutionName = "SolutionName"; 
        public static readonly string  Status = "Status"; 
        public static readonly string  IsPublishedInPublicKb = "IsPublishedInPublicKb"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickSolutionHistoryField o)
        {
            return o.Value;
        }

        public static implicit operator PickSolutionHistoryField(string s)
        {
            return new PickSolutionHistoryField {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickSolutionHistoryField Parse(string text) => text;

        

    }
    public class PickStaticResourceCacheControlConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStaticResourceCacheControl)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStaticResourceCacheControl {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStaticResourceCacheControlConverter))]
    public class PickStaticResourceCacheControl
    {
        public static readonly string  Private = "Private"; 
        public static readonly string  Public = "Public"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStaticResourceCacheControl o)
        {
            return o.Value;
        }

        public static implicit operator PickStaticResourceCacheControl(string s)
        {
            return new PickStaticResourceCacheControl {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStaticResourceCacheControl Parse(string text) => text;

        

    }
    public class PickStreamingChannelShareAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStreamingChannelShareAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStreamingChannelShareAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStreamingChannelShareAccessLevelConverter))]
    public class PickStreamingChannelShareAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStreamingChannelShareAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickStreamingChannelShareAccessLevel(string s)
        {
            return new PickStreamingChannelShareAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStreamingChannelShareAccessLevel Parse(string text) => text;

        

    }
    public class PickStreamingChannelShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickStreamingChannelShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickStreamingChannelShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickStreamingChannelShareRowCauseConverter))]
    public class PickStreamingChannelShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickStreamingChannelShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickStreamingChannelShareRowCause(string s)
        {
            return new PickStreamingChannelShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickStreamingChannelShareRowCause Parse(string text) => text;

        

    }
    public class PickTaskStatusConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskStatus)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskStatus {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskStatusConverter))]
    public class PickTaskStatus
    {
        public static readonly string  NotStarted = "Not Started"; 
        public static readonly string  InProgress = "In Progress"; 
        public static readonly string  Completed = "Completed"; 
        public static readonly string  Waitingonsomeoneelse = "Waiting on someone else"; 
        public static readonly string  Deferred = "Deferred"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskStatus o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskStatus(string s)
        {
            return new PickTaskStatus {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskStatus Parse(string text) => text;

        

    }
    public class PickTaskPriorityConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskPriority)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskPriority {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskPriorityConverter))]
    public class PickTaskPriority
    {
        public static readonly string  High = "High"; 
        public static readonly string  Normal = "Normal"; 
        public static readonly string  Low = "Low"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskPriority o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskPriority(string s)
        {
            return new PickTaskPriority {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskPriority Parse(string text) => text;

        

    }
    public class PickTaskCallTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskCallType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskCallType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskCallTypeConverter))]
    public class PickTaskCallType
    {
        public static readonly string  Internal = "Internal"; 
        public static readonly string  Inbound = "Inbound"; 
        public static readonly string  Outbound = "Outbound"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskCallType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskCallType(string s)
        {
            return new PickTaskCallType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskCallType Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceTimeZoneSidKeyConverter))]
    public class PickTaskRecurrenceTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceTimeZoneSidKey(string s)
        {
            return new PickTaskRecurrenceTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceTypeConverter))]
    public class PickTaskRecurrenceType
    {
        public static readonly string  RecursDaily = "RecursDaily"; 
        public static readonly string  RecursEveryWeekday = "RecursEveryWeekday"; 
        public static readonly string  RecursMonthly = "RecursMonthly"; 
        public static readonly string  RecursMonthlyNth = "RecursMonthlyNth"; 
        public static readonly string  RecursWeekly = "RecursWeekly"; 
        public static readonly string  RecursYearly = "RecursYearly"; 
        public static readonly string  RecursYearlyNth = "RecursYearlyNth"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceType(string s)
        {
            return new PickTaskRecurrenceType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceType Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceInstanceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceInstance)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceInstance {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceInstanceConverter))]
    public class PickTaskRecurrenceInstance
    {
        public static readonly string  First = "First"; 
        public static readonly string  Second = "Second"; 
        public static readonly string  Third = "Third"; 
        public static readonly string  Fourth = "Fourth"; 
        public static readonly string  Last = "Last"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceInstance o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceInstance(string s)
        {
            return new PickTaskRecurrenceInstance {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceInstance Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceMonthOfYearConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceMonthOfYear)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceMonthOfYear {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceMonthOfYearConverter))]
    public class PickTaskRecurrenceMonthOfYear
    {
        public static readonly string  January = "January"; 
        public static readonly string  February = "February"; 
        public static readonly string  March = "March"; 
        public static readonly string  April = "April"; 
        public static readonly string  May = "May"; 
        public static readonly string  June = "June"; 
        public static readonly string  July = "July"; 
        public static readonly string  August = "August"; 
        public static readonly string  September = "September"; 
        public static readonly string  October = "October"; 
        public static readonly string  November = "November"; 
        public static readonly string  December = "December"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceMonthOfYear o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceMonthOfYear(string s)
        {
            return new PickTaskRecurrenceMonthOfYear {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceMonthOfYear Parse(string text) => text;

        

    }
    public class PickTaskRecurrenceRegeneratedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskRecurrenceRegeneratedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskRecurrenceRegeneratedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskRecurrenceRegeneratedTypeConverter))]
    public class PickTaskRecurrenceRegeneratedType
    {
        public static readonly string  RecurrenceRegenerateAfterDueDate = "RecurrenceRegenerateAfterDueDate"; 
        public static readonly string  RecurrenceRegenerateAfterToday = "RecurrenceRegenerateAfterToday"; 
        public static readonly string  RecurrenceRegenerated = "RecurrenceRegenerated"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskRecurrenceRegeneratedType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskRecurrenceRegeneratedType(string s)
        {
            return new PickTaskRecurrenceRegeneratedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskRecurrenceRegeneratedType Parse(string text) => text;

        

    }
    public class PickTaskFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTaskFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTaskFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTaskFeedTypeConverter))]
    public class PickTaskFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTaskFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickTaskFeedType(string s)
        {
            return new PickTaskFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTaskFeedType Parse(string text) => text;

        

    }
    public class PickTenantUsageEntitlementFrequencyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTenantUsageEntitlementFrequency)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTenantUsageEntitlementFrequency {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTenantUsageEntitlementFrequencyConverter))]
    public class PickTenantUsageEntitlementFrequency
    {
        public static readonly string  Weekly = "Weekly"; 
        public static readonly string  Fortnightly = "Fortnightly"; 
        public static readonly string  Monthly = "Monthly"; 
        public static readonly string  Once = "Once"; 
        public static readonly string  Quarterly = "Quarterly"; 
        public static readonly string  Yearly = "Yearly"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTenantUsageEntitlementFrequency o)
        {
            return o.Value;
        }

        public static implicit operator PickTenantUsageEntitlementFrequency(string s)
        {
            return new PickTenantUsageEntitlementFrequency {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTenantUsageEntitlementFrequency Parse(string text) => text;

        

    }
    public class PickTopicFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickTopicFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickTopicFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickTopicFeedTypeConverter))]
    public class PickTopicFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickTopicFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickTopicFeedType(string s)
        {
            return new PickTopicFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickTopicFeedType Parse(string text) => text;

        

    }
    public class PickUserTimeZoneSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserTimeZoneSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserTimeZoneSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserTimeZoneSidKeyConverter))]
    public class PickUserTimeZoneSidKey
    {
        public static readonly string  PacificKiritimati = "Pacific/Kiritimati"; 
        public static readonly string  PacificEnderbury = "Pacific/Enderbury"; 
        public static readonly string  PacificTongatapu = "Pacific/Tongatapu"; 
        public static readonly string  PacificChatham = "Pacific/Chatham"; 
        public static readonly string  AsiaKamchatka = "Asia/Kamchatka"; 
        public static readonly string  PacificAuckland = "Pacific/Auckland"; 
        public static readonly string  PacificFiji = "Pacific/Fiji"; 
        public static readonly string  PacificGuadalcanal = "Pacific/Guadalcanal"; 
        public static readonly string  PacificNorfolk = "Pacific/Norfolk"; 
        public static readonly string  AustraliaLordHowe = "Australia/Lord_Howe"; 
        public static readonly string  AustraliaBrisbane = "Australia/Brisbane"; 
        public static readonly string  AustraliaSydney = "Australia/Sydney"; 
        public static readonly string  AustraliaAdelaide = "Australia/Adelaide"; 
        public static readonly string  AustraliaDarwin = "Australia/Darwin"; 
        public static readonly string  AsiaSeoul = "Asia/Seoul"; 
        public static readonly string  AsiaTokyo = "Asia/Tokyo"; 
        public static readonly string  AsiaHongKong = "Asia/Hong_Kong"; 
        public static readonly string  AsiaKualaLumpur = "Asia/Kuala_Lumpur"; 
        public static readonly string  AsiaManila = "Asia/Manila"; 
        public static readonly string  AsiaShanghai = "Asia/Shanghai"; 
        public static readonly string  AsiaSingapore = "Asia/Singapore"; 
        public static readonly string  AsiaTaipei = "Asia/Taipei"; 
        public static readonly string  AustraliaPerth = "Australia/Perth"; 
        public static readonly string  AsiaBangkok = "Asia/Bangkok"; 
        public static readonly string  AsiaHoChiMinh = "Asia/Ho_Chi_Minh"; 
        public static readonly string  AsiaJakarta = "Asia/Jakarta"; 
        public static readonly string  AsiaRangoon = "Asia/Rangoon"; 
        public static readonly string  AsiaDhaka = "Asia/Dhaka"; 
        public static readonly string  AsiaKathmandu = "Asia/Kathmandu"; 
        public static readonly string  AsiaColombo = "Asia/Colombo"; 
        public static readonly string  AsiaKolkata = "Asia/Kolkata"; 
        public static readonly string  AsiaKarachi = "Asia/Karachi"; 
        public static readonly string  AsiaTashkent = "Asia/Tashkent"; 
        public static readonly string  AsiaYekaterinburg = "Asia/Yekaterinburg"; 
        public static readonly string  AsiaKabul = "Asia/Kabul"; 
        public static readonly string  AsiaTehran = "Asia/Tehran"; 
        public static readonly string  AsiaBaku = "Asia/Baku"; 
        public static readonly string  AsiaDubai = "Asia/Dubai"; 
        public static readonly string  AsiaTbilisi = "Asia/Tbilisi"; 
        public static readonly string  AsiaYerevan = "Asia/Yerevan"; 
        public static readonly string  AfricaNairobi = "Africa/Nairobi"; 
        public static readonly string  AsiaBaghdad = "Asia/Baghdad"; 
        public static readonly string  AsiaBeirut = "Asia/Beirut"; 
        public static readonly string  AsiaJerusalem = "Asia/Jerusalem"; 
        public static readonly string  AsiaKuwait = "Asia/Kuwait"; 
        public static readonly string  AsiaRiyadh = "Asia/Riyadh"; 
        public static readonly string  EuropeAthens = "Europe/Athens"; 
        public static readonly string  EuropeBucharest = "Europe/Bucharest"; 
        public static readonly string  EuropeHelsinki = "Europe/Helsinki"; 
        public static readonly string  EuropeIstanbul = "Europe/Istanbul"; 
        public static readonly string  EuropeMinsk = "Europe/Minsk"; 
        public static readonly string  EuropeMoscow = "Europe/Moscow"; 
        public static readonly string  AfricaCairo = "Africa/Cairo"; 
        public static readonly string  AfricaJohannesburg = "Africa/Johannesburg"; 
        public static readonly string  EuropeAmsterdam = "Europe/Amsterdam"; 
        public static readonly string  EuropeBerlin = "Europe/Berlin"; 
        public static readonly string  EuropeBrussels = "Europe/Brussels"; 
        public static readonly string  EuropeParis = "Europe/Paris"; 
        public static readonly string  EuropePrague = "Europe/Prague"; 
        public static readonly string  EuropeRome = "Europe/Rome"; 
        public static readonly string  AfricaAlgiers = "Africa/Algiers"; 
        public static readonly string  AfricaCasablanca = "Africa/Casablanca"; 
        public static readonly string  EuropeDublin = "Europe/Dublin"; 
        public static readonly string  EuropeLisbon = "Europe/Lisbon"; 
        public static readonly string  EuropeLondon = "Europe/London"; 
        public static readonly string  AmericaScoresbysund = "America/Scoresbysund"; 
        public static readonly string  AtlanticAzores = "Atlantic/Azores"; 
        public static readonly string  GMT = "GMT"; 
        public static readonly string  AtlanticCapeVerde = "Atlantic/Cape_Verde"; 
        public static readonly string  AtlanticSouthGeorgia = "Atlantic/South_Georgia"; 
        public static readonly string  AmericaStJohns = "America/St_Johns"; 
        public static readonly string  AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires"; 
        public static readonly string  AmericaHalifax = "America/Halifax"; 
        public static readonly string  AmericaSantiago = "America/Santiago"; 
        public static readonly string  AmericaSaoPaulo = "America/Sao_Paulo"; 
        public static readonly string  AtlanticBermuda = "Atlantic/Bermuda"; 
        public static readonly string  AmericaCaracas = "America/Caracas"; 
        public static readonly string  AmericaIndianaIndianapolis = "America/Indiana/Indianapolis"; 
        public static readonly string  AmericaNewYork = "America/New_York"; 
        public static readonly string  AmericaPuertoRico = "America/Puerto_Rico"; 
        public static readonly string  AmericaBogota = "America/Bogota"; 
        public static readonly string  AmericaChicago = "America/Chicago"; 
        public static readonly string  AmericaLima = "America/Lima"; 
        public static readonly string  AmericaMexicoCity = "America/Mexico_City"; 
        public static readonly string  AmericaPanama = "America/Panama"; 
        public static readonly string  AmericaDenver = "America/Denver"; 
        public static readonly string  AmericaElSalvador = "America/El_Salvador"; 
        public static readonly string  AmericaMazatlan = "America/Mazatlan"; 
        public static readonly string  AmericaLosAngeles = "America/Los_Angeles"; 
        public static readonly string  AmericaPhoenix = "America/Phoenix"; 
        public static readonly string  AmericaTijuana = "America/Tijuana"; 
        public static readonly string  AmericaAnchorage = "America/Anchorage"; 
        public static readonly string  PacificPitcairn = "Pacific/Pitcairn"; 
        public static readonly string  AmericaAdak = "America/Adak"; 
        public static readonly string  PacificGambier = "Pacific/Gambier"; 
        public static readonly string  PacificMarquesas = "Pacific/Marquesas"; 
        public static readonly string  PacificHonolulu = "Pacific/Honolulu"; 
        public static readonly string  PacificNiue = "Pacific/Niue"; 
        public static readonly string  PacificPagoPago = "Pacific/Pago_Pago"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserTimeZoneSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserTimeZoneSidKey(string s)
        {
            return new PickUserTimeZoneSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserTimeZoneSidKey Parse(string text) => text;

        

    }
    public class PickUserLocaleSidKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserLocaleSidKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserLocaleSidKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserLocaleSidKeyConverter))]
    public class PickUserLocaleSidKey
    {
        public static readonly string  sqAL = "sq_AL"; 
        public static readonly string  arBH = "ar_BH"; 
        public static readonly string  arEG = "ar_EG"; 
        public static readonly string  arJO = "ar_JO"; 
        public static readonly string  arKW = "ar_KW"; 
        public static readonly string  arLB = "ar_LB"; 
        public static readonly string  arQA = "ar_QA"; 
        public static readonly string  arSA = "ar_SA"; 
        public static readonly string  arAE = "ar_AE"; 
        public static readonly string  hyAM = "hy_AM"; 
        public static readonly string  azAZ = "az_AZ"; 
        public static readonly string  euES = "eu_ES"; 
        public static readonly string  beBY = "be_BY"; 
        public static readonly string  bnBD = "bn_BD"; 
        public static readonly string  bsBA = "bs_BA"; 
        public static readonly string  bgBG = "bg_BG"; 
        public static readonly string  caES = "ca_ES"; 
        public static readonly string  zhCNPINYIN = "zh_CN_PINYIN"; 
        public static readonly string  zhCNSTROKE = "zh_CN_STROKE"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  zhHKSTROKE = "zh_HK_STROKE"; 
        public static readonly string  zhHK = "zh_HK"; 
        public static readonly string  zhMO = "zh_MO"; 
        public static readonly string  zhSG = "zh_SG"; 
        public static readonly string  zhTWSTROKE = "zh_TW_STROKE"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  hrHR = "hr_HR"; 
        public static readonly string  csCZ = "cs_CZ"; 
        public static readonly string  daDK = "da_DK"; 
        public static readonly string  nlBE = "nl_BE"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  nlSR = "nl_SR"; 
        public static readonly string  enAU = "en_AU"; 
        public static readonly string  enBB = "en_BB"; 
        public static readonly string  enBM = "en_BM"; 
        public static readonly string  enCA = "en_CA"; 
        public static readonly string  enGH = "en_GH"; 
        public static readonly string  enIN = "en_IN"; 
        public static readonly string  enID = "en_ID"; 
        public static readonly string  enIE = "en_IE"; 
        public static readonly string  enMY = "en_MY"; 
        public static readonly string  enNZ = "en_NZ"; 
        public static readonly string  enNG = "en_NG"; 
        public static readonly string  enPK = "en_PK"; 
        public static readonly string  enPH = "en_PH"; 
        public static readonly string  enSG = "en_SG"; 
        public static readonly string  enZA = "en_ZA"; 
        public static readonly string  enGB = "en_GB"; 
        public static readonly string  enUS = "en_US"; 
        public static readonly string  etEE = "et_EE"; 
        public static readonly string  fiFI = "fi_FI"; 
        public static readonly string  frBE = "fr_BE"; 
        public static readonly string  frCA = "fr_CA"; 
        public static readonly string  frFR = "fr_FR"; 
        public static readonly string  frLU = "fr_LU"; 
        public static readonly string  frMC = "fr_MC"; 
        public static readonly string  frCH = "fr_CH"; 
        public static readonly string  kaGE = "ka_GE"; 
        public static readonly string  deAT = "de_AT"; 
        public static readonly string  deDE = "de_DE"; 
        public static readonly string  deLU = "de_LU"; 
        public static readonly string  deCH = "de_CH"; 
        public static readonly string  elGR = "el_GR"; 
        public static readonly string  iwIL = "iw_IL"; 
        public static readonly string  hiIN = "hi_IN"; 
        public static readonly string  huHU = "hu_HU"; 
        public static readonly string  isIS = "is_IS"; 
        public static readonly string  inID = "in_ID"; 
        public static readonly string  gaIE = "ga_IE"; 
        public static readonly string  itIT = "it_IT"; 
        public static readonly string  itCH = "it_CH"; 
        public static readonly string  jaJP = "ja_JP"; 
        public static readonly string  kkKZ = "kk_KZ"; 
        public static readonly string  kmKH = "km_KH"; 
        public static readonly string  koKR = "ko_KR"; 
        public static readonly string  kyKG = "ky_KG"; 
        public static readonly string  lvLV = "lv_LV"; 
        public static readonly string  ltLT = "lt_LT"; 
        public static readonly string  lbLU = "lb_LU"; 
        public static readonly string  mkMK = "mk_MK"; 
        public static readonly string  msBN = "ms_BN"; 
        public static readonly string  msMY = "ms_MY"; 
        public static readonly string  mtMT = "mt_MT"; 
        public static readonly string  shME = "sh_ME"; 
        public static readonly string  noNO = "no_NO"; 
        public static readonly string  plPL = "pl_PL"; 
        public static readonly string  ptAO = "pt_AO"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  ptPT = "pt_PT"; 
        public static readonly string  roMD = "ro_MD"; 
        public static readonly string  roRO = "ro_RO"; 
        public static readonly string  rmCH = "rm_CH"; 
        public static readonly string  ruRU = "ru_RU"; 
        public static readonly string  srBA = "sr_BA"; 
        public static readonly string  shBA = "sh_BA"; 
        public static readonly string  shCS = "sh_CS"; 
        public static readonly string  srCS = "sr_CS"; 
        public static readonly string  skSK = "sk_SK"; 
        public static readonly string  slSI = "sl_SI"; 
        public static readonly string  esAR = "es_AR"; 
        public static readonly string  esBO = "es_BO"; 
        public static readonly string  esCL = "es_CL"; 
        public static readonly string  esCO = "es_CO"; 
        public static readonly string  esCR = "es_CR"; 
        public static readonly string  esDO = "es_DO"; 
        public static readonly string  esEC = "es_EC"; 
        public static readonly string  esSV = "es_SV"; 
        public static readonly string  esGT = "es_GT"; 
        public static readonly string  esHN = "es_HN"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  esPA = "es_PA"; 
        public static readonly string  esPY = "es_PY"; 
        public static readonly string  esPE = "es_PE"; 
        public static readonly string  esPR = "es_PR"; 
        public static readonly string  esES = "es_ES"; 
        public static readonly string  esUY = "es_UY"; 
        public static readonly string  esVE = "es_VE"; 
        public static readonly string  svSE = "sv_SE"; 
        public static readonly string  tlPH = "tl_PH"; 
        public static readonly string  tgTJ = "tg_TJ"; 
        public static readonly string  thTH = "th_TH"; 
        public static readonly string  trTR = "tr_TR"; 
        public static readonly string  ukUA = "uk_UA"; 
        public static readonly string  urPK = "ur_PK"; 
        public static readonly string  viVN = "vi_VN"; 
        public static readonly string  cyGB = "cy_GB"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserLocaleSidKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserLocaleSidKey(string s)
        {
            return new PickUserLocaleSidKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserLocaleSidKey Parse(string text) => text;

        

    }
    public class PickUserEmailEncodingKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserEmailEncodingKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserEmailEncodingKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserEmailEncodingKeyConverter))]
    public class PickUserEmailEncodingKey
    {
        public static readonly string  UTF8 = "UTF-8"; 
        public static readonly string  ISO88591 = "ISO-8859-1"; 
        public static readonly string  ShiftJIS = "Shift_JIS"; 
        public static readonly string  ISO2022JP = "ISO-2022-JP"; 
        public static readonly string  EUCJP = "EUC-JP"; 
        public static readonly string  ksc56011987 = "ks_c_5601-1987"; 
        public static readonly string  Big5 = "Big5"; 
        public static readonly string  GB2312 = "GB2312"; 
        public static readonly string  Big5HKSCS = "Big5-HKSCS"; 
        public static readonly string  xSJIS0213 = "x-SJIS_0213"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserEmailEncodingKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserEmailEncodingKey(string s)
        {
            return new PickUserEmailEncodingKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserEmailEncodingKey Parse(string text) => text;

        

    }
    public class PickUserUserTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserUserType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserUserType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserUserTypeConverter))]
    public class PickUserUserType
    {
        public static readonly string  Standard = "Standard"; 
        public static readonly string  PowerPartner = "PowerPartner"; 
        public static readonly string  PowerCustomerSuccess = "PowerCustomerSuccess"; 
        public static readonly string  CustomerSuccess = "CustomerSuccess"; 
        public static readonly string  Guest = "Guest"; 
        public static readonly string  CspLitePortal = "CspLitePortal"; 
        public static readonly string  CsnOnly = "CsnOnly"; 
        public static readonly string  SelfService = "SelfService"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserUserType o)
        {
            return o.Value;
        }

        public static implicit operator PickUserUserType(string s)
        {
            return new PickUserUserType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserUserType Parse(string text) => text;

        

    }
    public class PickUserLanguageLocaleKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserLanguageLocaleKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserLanguageLocaleKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserLanguageLocaleKeyConverter))]
    public class PickUserLanguageLocaleKey
    {
        public static readonly string  enUS = "en_US"; 
        public static readonly string  de = "de"; 
        public static readonly string  es = "es"; 
        public static readonly string  fr = "fr"; 
        public static readonly string  it = "it"; 
        public static readonly string  ja = "ja"; 
        public static readonly string  sv = "sv"; 
        public static readonly string  ko = "ko"; 
        public static readonly string  zhTW = "zh_TW"; 
        public static readonly string  zhCN = "zh_CN"; 
        public static readonly string  ptBR = "pt_BR"; 
        public static readonly string  nlNL = "nl_NL"; 
        public static readonly string  da = "da"; 
        public static readonly string  th = "th"; 
        public static readonly string  fi = "fi"; 
        public static readonly string  ru = "ru"; 
        public static readonly string  esMX = "es_MX"; 
        public static readonly string  no = "no"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserLanguageLocaleKey o)
        {
            return o.Value;
        }

        public static implicit operator PickUserLanguageLocaleKey(string s)
        {
            return new PickUserLanguageLocaleKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserLanguageLocaleKey Parse(string text) => text;

        

    }
    public class PickUserDigestFrequencyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserDigestFrequency)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserDigestFrequency {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserDigestFrequencyConverter))]
    public class PickUserDigestFrequency
    {
        public static readonly string  D = "D"; 
        public static readonly string  W = "W"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserDigestFrequency o)
        {
            return o.Value;
        }

        public static implicit operator PickUserDigestFrequency(string s)
        {
            return new PickUserDigestFrequency {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserDigestFrequency Parse(string text) => text;

        

    }
    public class PickUserDefaultGroupNotificationFrequencyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserDefaultGroupNotificationFrequency)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserDefaultGroupNotificationFrequency {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserDefaultGroupNotificationFrequencyConverter))]
    public class PickUserDefaultGroupNotificationFrequency
    {
        public static readonly string  P = "P"; 
        public static readonly string  D = "D"; 
        public static readonly string  W = "W"; 
        public static readonly string  N = "N"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserDefaultGroupNotificationFrequency o)
        {
            return o.Value;
        }

        public static implicit operator PickUserDefaultGroupNotificationFrequency(string s)
        {
            return new PickUserDefaultGroupNotificationFrequency {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserDefaultGroupNotificationFrequency Parse(string text) => text;

        

    }
    public class PickUserFeedTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserFeedType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserFeedType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserFeedTypeConverter))]
    public class PickUserFeedType
    {
        public static readonly string  TrackedChange = "TrackedChange"; 
        public static readonly string  UserStatus = "UserStatus"; 
        public static readonly string  TextPost = "TextPost"; 
        public static readonly string  AdvancedTextPost = "AdvancedTextPost"; 
        public static readonly string  LinkPost = "LinkPost"; 
        public static readonly string  ContentPost = "ContentPost"; 
        public static readonly string  PollPost = "PollPost"; 
        public static readonly string  RypplePost = "RypplePost"; 
        public static readonly string  ProfileSkillPost = "ProfileSkillPost"; 
        public static readonly string  DashboardComponentSnapshot = "DashboardComponentSnapshot"; 
        public static readonly string  ApprovalPost = "ApprovalPost"; 
        public static readonly string  CaseCommentPost = "CaseCommentPost"; 
        public static readonly string  ReplyPost = "ReplyPost"; 
        public static readonly string  EmailMessageEvent = "EmailMessageEvent"; 
        public static readonly string  CallLogPost = "CallLogPost"; 
        public static readonly string  ChangeStatusPost = "ChangeStatusPost"; 
        public static readonly string  AttachArticleEvent = "AttachArticleEvent"; 
        public static readonly string  MilestoneEvent = "MilestoneEvent"; 
        public static readonly string  ActivityEvent = "ActivityEvent"; 
        public static readonly string  ChatTranscriptPost = "ChatTranscriptPost"; 
        public static readonly string  CollaborationGroupCreated = "CollaborationGroupCreated"; 
        public static readonly string  CollaborationGroupUnarchived = "CollaborationGroupUnarchived"; 
        public static readonly string  SocialPost = "SocialPost"; 
        public static readonly string  QuestionPost = "QuestionPost"; 
        public static readonly string  FacebookPost = "FacebookPost"; 
        public static readonly string  BasicTemplateFeedItem = "BasicTemplateFeedItem"; 
        public static readonly string  CreateRecordEvent = "CreateRecordEvent"; 
        public static readonly string  CanvasPost = "CanvasPost"; 
        public static readonly string  AnnouncementPost = "AnnouncementPost"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserFeedType o)
        {
            return o.Value;
        }

        public static implicit operator PickUserFeedType(string s)
        {
            return new PickUserFeedType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserFeedType Parse(string text) => text;

        

    }
    public class PickUserPreferencePreferenceConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserPreferencePreference)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserPreferencePreference {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserPreferencePreferenceConverter))]
    public class PickUserPreferencePreference
    {
        public static readonly string _57 = "57"; 
        public static readonly string _58 = "58"; 
        public static readonly string _91 = "91"; 
        public static readonly string _92 = "92"; 
        public static readonly string _93 = "93"; 
        public static readonly string _94 = "94"; 
        public static readonly string _96 = "96"; 
        public static readonly string _97 = "97"; 
        public static readonly string _98 = "98"; 
        public static readonly string _99 = "99"; 
        public static readonly string _100 = "100"; 
        public static readonly string _101 = "101"; 
        public static readonly string _102 = "102"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserPreferencePreference o)
        {
            return o.Value;
        }

        public static implicit operator PickUserPreferencePreference(string s)
        {
            return new PickUserPreferencePreference {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserPreferencePreference Parse(string text) => text;

        

    }
    public class PickUserRecordAccessRecordIdConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRecordAccessRecordId)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRecordAccessRecordId {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRecordAccessRecordIdConverter))]
    public class PickUserRecordAccessRecordId
    {
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRecordAccessRecordId o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRecordAccessRecordId(string s)
        {
            return new PickUserRecordAccessRecordId {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRecordAccessRecordId Parse(string text) => text;

        

    }
    public class PickUserRecordAccessMaxAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRecordAccessMaxAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRecordAccessMaxAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRecordAccessMaxAccessLevelConverter))]
    public class PickUserRecordAccessMaxAccessLevel
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
        public static readonly string  Delete = "Delete"; 
        public static readonly string  Transfer = "Transfer"; 
        public static readonly string  All = "All"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRecordAccessMaxAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRecordAccessMaxAccessLevel(string s)
        {
            return new PickUserRecordAccessMaxAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRecordAccessMaxAccessLevel Parse(string text) => text;

        

    }
    public class PickUserRoleOpportunityAccessForAccountOwnerConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRoleOpportunityAccessForAccountOwner)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRoleOpportunityAccessForAccountOwner {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRoleOpportunityAccessForAccountOwnerConverter))]
    public class PickUserRoleOpportunityAccessForAccountOwner
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRoleOpportunityAccessForAccountOwner o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRoleOpportunityAccessForAccountOwner(string s)
        {
            return new PickUserRoleOpportunityAccessForAccountOwner {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRoleOpportunityAccessForAccountOwner Parse(string text) => text;

        

    }
    public class PickUserRoleCaseAccessForAccountOwnerConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRoleCaseAccessForAccountOwner)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRoleCaseAccessForAccountOwner {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRoleCaseAccessForAccountOwnerConverter))]
    public class PickUserRoleCaseAccessForAccountOwner
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRoleCaseAccessForAccountOwner o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRoleCaseAccessForAccountOwner(string s)
        {
            return new PickUserRoleCaseAccessForAccountOwner {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRoleCaseAccessForAccountOwner Parse(string text) => text;

        

    }
    public class PickUserRoleContactAccessForAccountOwnerConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRoleContactAccessForAccountOwner)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRoleContactAccessForAccountOwner {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRoleContactAccessForAccountOwnerConverter))]
    public class PickUserRoleContactAccessForAccountOwner
    {
        public static readonly string  None = "None"; 
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRoleContactAccessForAccountOwner o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRoleContactAccessForAccountOwner(string s)
        {
            return new PickUserRoleContactAccessForAccountOwner {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRoleContactAccessForAccountOwner Parse(string text) => text;

        

    }
    public class PickUserRolePortalTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserRolePortalType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserRolePortalType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserRolePortalTypeConverter))]
    public class PickUserRolePortalType
    {
        public static readonly string  None = "None"; 
        public static readonly string  CustomerPortal = "CustomerPortal"; 
        public static readonly string  Partner = "Partner"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserRolePortalType o)
        {
            return o.Value;
        }

        public static implicit operator PickUserRolePortalType(string s)
        {
            return new PickUserRolePortalType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserRolePortalType Parse(string text) => text;

        

    }
    public class PickUserShareUserAccessLevelConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserShareUserAccessLevel)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserShareUserAccessLevel {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserShareUserAccessLevelConverter))]
    public class PickUserShareUserAccessLevel
    {
        public static readonly string  Read = "Read"; 
        public static readonly string  Edit = "Edit"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserShareUserAccessLevel o)
        {
            return o.Value;
        }

        public static implicit operator PickUserShareUserAccessLevel(string s)
        {
            return new PickUserShareUserAccessLevel {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserShareUserAccessLevel Parse(string text) => text;

        

    }
    public class PickUserShareRowCauseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickUserShareRowCause)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickUserShareRowCause {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickUserShareRowCauseConverter))]
    public class PickUserShareRowCause
    {
        public static readonly string  Owner = "Owner"; 
        public static readonly string  Manual = "Manual"; 
        public static readonly string  Rule = "Rule"; 
        public static readonly string  ImplicitChild = "ImplicitChild"; 
        public static readonly string  ImplicitParent = "ImplicitParent"; 
        public static readonly string  ImplicitPerson = "ImplicitPerson"; 
        public static readonly string  Team = "Team"; 
        public static readonly string  Territory = "Territory"; 
        public static readonly string  TerritoryManual = "TerritoryManual"; 
        public static readonly string  TerritoryRule = "TerritoryRule"; 
        public static readonly string  Territory2Forecast = "Territory2Forecast"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickUserShareRowCause o)
        {
            return o.Value;
        }

        public static implicit operator PickUserShareRowCause(string s)
        {
            return new PickUserShareRowCause {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickUserShareRowCause Parse(string text) => text;

        

    }
    public class PickVoteTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickVoteType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickVoteType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickVoteTypeConverter))]
    public class PickVoteType
    {
        public static readonly string  Up = "Up"; 
        public static readonly string  Down = "Down"; 
        public static readonly string _1 = "1"; 
        public static readonly string _2 = "2"; 
        public static readonly string _3 = "3"; 
        public static readonly string _4 = "4"; 
        public static readonly string _5 = "5"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickVoteType o)
        {
            return o.Value;
        }

        public static implicit operator PickVoteType(string s)
        {
            return new PickVoteType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickVoteType Parse(string text) => text;

        

    }
    public class PickWebLinkPageOrSobjectTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickWebLinkPageOrSobjectType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickWebLinkPageOrSobjectType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickWebLinkPageOrSobjectTypeConverter))]
    public class PickWebLinkPageOrSobjectType
    {
        public static readonly string  Account = "Account"; 
        public static readonly string  Activity = "Activity"; 
        public static readonly string  Asset = "Asset"; 
        public static readonly string  Campaign = "Campaign"; 
        public static readonly string  CampaignMember = "CampaignMember"; 
        public static readonly string  Case = "Case"; 
        public static readonly string  Contact = "Contact"; 
        public static readonly string  ContentVersion = "ContentVersion"; 
        public static readonly string  Contract = "Contract"; 
        public static readonly string  CustomPageItem = "CustomPageItem"; 
        public static readonly string  DandBCompany = "DandBCompany"; 
        public static readonly string  DashboardComponent = "DashboardComponent"; 
        public static readonly string  DuplicateRecordItem = "DuplicateRecordItem"; 
        public static readonly string  DuplicateRecordSet = "DuplicateRecordSet"; 
        public static readonly string  EmailMessage = "EmailMessage"; 
        public static readonly string  Event = "Event"; 
        public static readonly string  Goal = "Goal"; 
        public static readonly string  GoalLink = "GoalLink"; 
        public static readonly string  Idea = "Idea"; 
        public static readonly string  Lead = "Lead"; 
        public static readonly string  Macro = "Macro"; 
        public static readonly string  Metric = "Metric"; 
        public static readonly string  Opportunity = "Opportunity"; 
        public static readonly string  OpportunityLineItem = "OpportunityLineItem"; 
        public static readonly string  Order = "Order"; 
        public static readonly string  OrderItem = "OrderItem"; 
        public static readonly string  Product2 = "Product2"; 
        public static readonly string  SocialPersona = "SocialPersona"; 
        public static readonly string  Solution = "Solution"; 
        public static readonly string  Task = "Task"; 
        public static readonly string  User = "User"; 
        public static readonly string  UserProvisioningRequest = "UserProvisioningRequest"; 
        public static readonly string  WorkCoaching = "WorkCoaching"; 
        public static readonly string  WorkFeedback = "WorkFeedback"; 
        public static readonly string  WorkFeedbackQuestion = "WorkFeedbackQuestion"; 
        public static readonly string  WorkFeedbackQuestionSet = "WorkFeedbackQuestionSet"; 
        public static readonly string  WorkFeedbackRequest = "WorkFeedbackRequest"; 
        public static readonly string  WorkFeedbackTemplate = "WorkFeedbackTemplate"; 
        public static readonly string  WorkPerformanceCycle = "WorkPerformanceCycle"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickWebLinkPageOrSobjectType o)
        {
            return o.Value;
        }

        public static implicit operator PickWebLinkPageOrSobjectType(string s)
        {
            return new PickWebLinkPageOrSobjectType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickWebLinkPageOrSobjectType Parse(string text) => text;

        

    }
    public class PickWebLinkEncodingKeyConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickWebLinkEncodingKey)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickWebLinkEncodingKey {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickWebLinkEncodingKeyConverter))]
    public class PickWebLinkEncodingKey
    {
        public static readonly string  UTF8 = "UTF-8"; 
        public static readonly string  ISO88591 = "ISO-8859-1"; 
        public static readonly string  ShiftJIS = "Shift_JIS"; 
        public static readonly string  ISO2022JP = "ISO-2022-JP"; 
        public static readonly string  EUCJP = "EUC-JP"; 
        public static readonly string  ksc56011987 = "ks_c_5601-1987"; 
        public static readonly string  Big5 = "Big5"; 
        public static readonly string  GB2312 = "GB2312"; 
        public static readonly string  Big5HKSCS = "Big5-HKSCS"; 
        public static readonly string  xSJIS0213 = "x-SJIS_0213"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickWebLinkEncodingKey o)
        {
            return o.Value;
        }

        public static implicit operator PickWebLinkEncodingKey(string s)
        {
            return new PickWebLinkEncodingKey {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickWebLinkEncodingKey Parse(string text) => text;

        

    }
    public class PickWebLinkLinkTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickWebLinkLinkType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickWebLinkLinkType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickWebLinkLinkTypeConverter))]
    public class PickWebLinkLinkType
    {
        public static readonly string  url = "url"; 
        public static readonly string  sControl = "sControl"; 
        public static readonly string  javascript = "javascript"; 
        public static readonly string  page = "page"; 
        public static readonly string  flow = "flow"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickWebLinkLinkType o)
        {
            return o.Value;
        }

        public static implicit operator PickWebLinkLinkType(string s)
        {
            return new PickWebLinkLinkType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickWebLinkLinkType Parse(string text) => text;

        

    }
    public class PickWebLinkOpenTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickWebLinkOpenType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickWebLinkOpenType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickWebLinkOpenTypeConverter))]
    public class PickWebLinkOpenType
    {
        public static readonly string  newWindow = "newWindow"; 
        public static readonly string  sidebar = "sidebar"; 
        public static readonly string  noSidebar = "noSidebar"; 
        public static readonly string  replace = "replace"; 
        public static readonly string  onClickJavaScript = "onClickJavaScript"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickWebLinkOpenType o)
        {
            return o.Value;
        }

        public static implicit operator PickWebLinkOpenType(string s)
        {
            return new PickWebLinkOpenType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickWebLinkOpenType Parse(string text) => text;

        

    }
    public class PickWebLinkPositionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickWebLinkPosition)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickWebLinkPosition {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickWebLinkPositionConverter))]
    public class PickWebLinkPosition
    {
        public static readonly string  fullScreen = "fullScreen"; 
        public static readonly string  none = "none"; 
        public static readonly string  topLeft = "topLeft"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickWebLinkPosition o)
        {
            return o.Value;
        }

        public static implicit operator PickWebLinkPosition(string s)
        {
            return new PickWebLinkPosition {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickWebLinkPosition Parse(string text) => text;

        

    }
    public class PickWebLinkDisplayTypeConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) 
            => sourceType == typeof(string);

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            => destinationType == typeof(string);

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            var o = (PickWebLinkDisplayType)value;
            return destinationType == typeof(string) ? o.Value : base.ConvertTo(context, culture, value, destinationType);
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value is string)
                return new PickWebLinkDisplayType {Value = (string)value};
            return base.ConvertFrom(context, culture, value);
        }
    }
    [TypeConverter(typeof(PickWebLinkDisplayTypeConverter))]
    public class PickWebLinkDisplayType
    {
        public static readonly string  L = "L"; 
        public static readonly string  B = "B"; 
        public static readonly string  M = "M"; 
    
        public string Value { get; set; }

        public static implicit operator string(PickWebLinkDisplayType o)
        {
            return o.Value;
        }

        public static implicit operator PickWebLinkDisplayType(string s)
        {
            return new PickWebLinkDisplayType {Value = s};
        }

        public override string ToString()
        {
            return Value;
        }

        public static PickWebLinkDisplayType Parse(string text) => text;

        

    }
    [EntityName("AcceptedEventRelation")]
    public class AcceptedEventRelation : ISalesforceEntity
    {
    [JsonConstructor]
        private AcceptedEventRelation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AcceptedEventRelation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RelationId;
        [EntityField(true)]
        public System.String RelationId
        {
            get { return __RelationId; }
            set { SetField(ref __RelationId, value, "RelationId"); }
        }
        private System.String __EventId;
        [EntityField(true)]
        public System.String EventId
        {
            get { return __EventId; }
            set { SetField(ref __EventId, value, "EventId"); }
        }
        private System.DateTime? __RespondedDate;
        [EntityField(true)]
        public System.DateTime? RespondedDate
        {
            get { return __RespondedDate; }
            set { SetField(ref __RespondedDate, value, "RespondedDate"); }
        }
        private System.String __Response;
        [EntityField(true)]
        public System.String Response
        {
            get { return __Response; }
            set { SetField(ref __Response, value, "Response"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Type;
        [EntityField(true)]
        public System.String Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
    }
    [EntityName("Account")]
    public class Account : ISalesforceEntity
    {
    [JsonConstructor]
        private Account(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Account()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __MasterRecordId;
        [EntityField(true)]
        public System.String MasterRecordId
        {
            get { return __MasterRecordId; }
            set { SetField(ref __MasterRecordId, value, "MasterRecordId"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickAccountType __Type;
        [EntityField(true)]
        public PickAccountType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __BillingStreet;
        [EntityField(true)]
        public System.String BillingStreet
        {
            get { return __BillingStreet; }
            set { SetField(ref __BillingStreet, value, "BillingStreet"); }
        }
        private System.String __BillingCity;
        [EntityField(true)]
        public System.String BillingCity
        {
            get { return __BillingCity; }
            set { SetField(ref __BillingCity, value, "BillingCity"); }
        }
        private System.String __BillingState;
        [EntityField(true)]
        public System.String BillingState
        {
            get { return __BillingState; }
            set { SetField(ref __BillingState, value, "BillingState"); }
        }
        private System.String __BillingPostalCode;
        [EntityField(true)]
        public System.String BillingPostalCode
        {
            get { return __BillingPostalCode; }
            set { SetField(ref __BillingPostalCode, value, "BillingPostalCode"); }
        }
        private System.String __BillingCountry;
        [EntityField(true)]
        public System.String BillingCountry
        {
            get { return __BillingCountry; }
            set { SetField(ref __BillingCountry, value, "BillingCountry"); }
        }
        private System.Double? __BillingLatitude;
        [EntityField(true)]
        public System.Double? BillingLatitude
        {
            get { return __BillingLatitude; }
            set { SetField(ref __BillingLatitude, value, "BillingLatitude"); }
        }
        private System.Double? __BillingLongitude;
        [EntityField(true)]
        public System.Double? BillingLongitude
        {
            get { return __BillingLongitude; }
            set { SetField(ref __BillingLongitude, value, "BillingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __BillingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address BillingAddress
        {
            get { return __BillingAddress; }
            set { SetField(ref __BillingAddress, value, "BillingAddress"); }
        }
        private System.String __ShippingStreet;
        [EntityField(true)]
        public System.String ShippingStreet
        {
            get { return __ShippingStreet; }
            set { SetField(ref __ShippingStreet, value, "ShippingStreet"); }
        }
        private System.String __ShippingCity;
        [EntityField(true)]
        public System.String ShippingCity
        {
            get { return __ShippingCity; }
            set { SetField(ref __ShippingCity, value, "ShippingCity"); }
        }
        private System.String __ShippingState;
        [EntityField(true)]
        public System.String ShippingState
        {
            get { return __ShippingState; }
            set { SetField(ref __ShippingState, value, "ShippingState"); }
        }
        private System.String __ShippingPostalCode;
        [EntityField(true)]
        public System.String ShippingPostalCode
        {
            get { return __ShippingPostalCode; }
            set { SetField(ref __ShippingPostalCode, value, "ShippingPostalCode"); }
        }
        private System.String __ShippingCountry;
        [EntityField(true)]
        public System.String ShippingCountry
        {
            get { return __ShippingCountry; }
            set { SetField(ref __ShippingCountry, value, "ShippingCountry"); }
        }
        private System.Double? __ShippingLatitude;
        [EntityField(true)]
        public System.Double? ShippingLatitude
        {
            get { return __ShippingLatitude; }
            set { SetField(ref __ShippingLatitude, value, "ShippingLatitude"); }
        }
        private System.Double? __ShippingLongitude;
        [EntityField(true)]
        public System.Double? ShippingLongitude
        {
            get { return __ShippingLongitude; }
            set { SetField(ref __ShippingLongitude, value, "ShippingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __ShippingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address ShippingAddress
        {
            get { return __ShippingAddress; }
            set { SetField(ref __ShippingAddress, value, "ShippingAddress"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __AccountNumber;
        [EntityField(true)]
        public System.String AccountNumber
        {
            get { return __AccountNumber; }
            set { SetField(ref __AccountNumber, value, "AccountNumber"); }
        }
        private System.String __Website;
        [EntityField(true)]
        public System.String Website
        {
            get { return __Website; }
            set { SetField(ref __Website, value, "Website"); }
        }
        private System.String __PhotoUrl;
        [EntityField(true)]
        public System.String PhotoUrl
        {
            get { return __PhotoUrl; }
            set { SetField(ref __PhotoUrl, value, "PhotoUrl"); }
        }
        private System.String __Sic;
        [EntityField(true)]
        public System.String Sic
        {
            get { return __Sic; }
            set { SetField(ref __Sic, value, "Sic"); }
        }
        private PickAccountIndustry __Industry;
        [EntityField(true)]
        public PickAccountIndustry Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private PickAccountOwnership __Ownership;
        [EntityField(true)]
        public PickAccountOwnership Ownership
        {
            get { return __Ownership; }
            set { SetField(ref __Ownership, value, "Ownership"); }
        }
        private System.String __TickerSymbol;
        [EntityField(true)]
        public System.String TickerSymbol
        {
            get { return __TickerSymbol; }
            set { SetField(ref __TickerSymbol, value, "TickerSymbol"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickAccountRating __Rating;
        [EntityField(true)]
        public PickAccountRating Rating
        {
            get { return __Rating; }
            set { SetField(ref __Rating, value, "Rating"); }
        }
        private System.String __Site;
        [EntityField(true)]
        public System.String Site
        {
            get { return __Site; }
            set { SetField(ref __Site, value, "Site"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __Jigsaw;
        [EntityField(true)]
        public System.String Jigsaw
        {
            get { return __Jigsaw; }
            set { SetField(ref __Jigsaw, value, "Jigsaw"); }
        }
        private System.String __JigsawCompanyId;
        [EntityField(true)]
        public System.String JigsawCompanyId
        {
            get { return __JigsawCompanyId; }
            set { SetField(ref __JigsawCompanyId, value, "JigsawCompanyId"); }
        }
        private PickAccountCleanStatus __CleanStatus;
        [EntityField(true)]
        public PickAccountCleanStatus CleanStatus
        {
            get { return __CleanStatus; }
            set { SetField(ref __CleanStatus, value, "CleanStatus"); }
        }
        private PickAccountAccountSource __AccountSource;
        [EntityField(true)]
        public PickAccountAccountSource AccountSource
        {
            get { return __AccountSource; }
            set { SetField(ref __AccountSource, value, "AccountSource"); }
        }
        private System.String __DunsNumber;
        [EntityField(true)]
        public System.String DunsNumber
        {
            get { return __DunsNumber; }
            set { SetField(ref __DunsNumber, value, "DunsNumber"); }
        }
        private System.String __Tradestyle;
        [EntityField(true)]
        public System.String Tradestyle
        {
            get { return __Tradestyle; }
            set { SetField(ref __Tradestyle, value, "Tradestyle"); }
        }
        private System.String __NaicsCode;
        [EntityField(true)]
        public System.String NaicsCode
        {
            get { return __NaicsCode; }
            set { SetField(ref __NaicsCode, value, "NaicsCode"); }
        }
        private System.String __NaicsDesc;
        [EntityField(true)]
        public System.String NaicsDesc
        {
            get { return __NaicsDesc; }
            set { SetField(ref __NaicsDesc, value, "NaicsDesc"); }
        }
        private System.String __YearStarted;
        [EntityField(true)]
        public System.String YearStarted
        {
            get { return __YearStarted; }
            set { SetField(ref __YearStarted, value, "YearStarted"); }
        }
        private System.String __SicDesc;
        [EntityField(true)]
        public System.String SicDesc
        {
            get { return __SicDesc; }
            set { SetField(ref __SicDesc, value, "SicDesc"); }
        }
        private System.String __DandbCompanyId;
        [EntityField(true)]
        public System.String DandbCompanyId
        {
            get { return __DandbCompanyId; }
            set { SetField(ref __DandbCompanyId, value, "DandbCompanyId"); }
        }
        private PickAccountCustomerPriority __CustomerPriorityc;
        [JsonProperty(PropertyName = "CustomerPriority__c")]
        [EntityField(true)]
        public PickAccountCustomerPriority CustomerPriorityc
        {
            get { return __CustomerPriorityc; }
            set { SetField(ref __CustomerPriorityc, value, "CustomerPriority__c"); }
        }
        private PickAccountSLA __SLAc;
        [JsonProperty(PropertyName = "SLA__c")]
        [EntityField(true)]
        public PickAccountSLA SLAc
        {
            get { return __SLAc; }
            set { SetField(ref __SLAc, value, "SLA__c"); }
        }
        private PickAccountActive __Activec;
        [JsonProperty(PropertyName = "Active__c")]
        [EntityField(true)]
        public PickAccountActive Activec
        {
            get { return __Activec; }
            set { SetField(ref __Activec, value, "Active__c"); }
        }
        private System.Double? __NumberofLocationsc;
        [JsonProperty(PropertyName = "NumberofLocations__c")]
        [EntityField(true)]
        public System.Double? NumberofLocationsc
        {
            get { return __NumberofLocationsc; }
            set { SetField(ref __NumberofLocationsc, value, "NumberofLocations__c"); }
        }
        private PickAccountUpsellOpportunity __UpsellOpportunityc;
        [JsonProperty(PropertyName = "UpsellOpportunity__c")]
        [EntityField(true)]
        public PickAccountUpsellOpportunity UpsellOpportunityc
        {
            get { return __UpsellOpportunityc; }
            set { SetField(ref __UpsellOpportunityc, value, "UpsellOpportunity__c"); }
        }
        private System.String __SLASerialNumberc;
        [JsonProperty(PropertyName = "SLASerialNumber__c")]
        [EntityField(true)]
        public System.String SLASerialNumberc
        {
            get { return __SLASerialNumberc; }
            set { SetField(ref __SLASerialNumberc, value, "SLASerialNumber__c"); }
        }
        private System.DateTime? __SLAExpirationDatec;
        [JsonProperty(PropertyName = "SLAExpirationDate__c")]
        [EntityField(true)]
        public System.DateTime? SLAExpirationDatec
        {
            get { return __SLAExpirationDatec; }
            set { SetField(ref __SLAExpirationDatec, value, "SLAExpirationDate__c"); }
        }
        private System.Double? __NumberBugc;
        [JsonProperty(PropertyName = "NumberBug__c")]
        [EntityField(true)]
        public System.Double? NumberBugc
        {
            get { return __NumberBugc; }
            set { SetField(ref __NumberBugc, value, "NumberBug__c"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickAccountActivityType> __ActivityTypec;
        [JsonProperty(PropertyName = "ActivityType__c")]
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickAccountActivityType> ActivityTypec
        {
            get { return __ActivityTypec; }
            set { SetField(ref __ActivityTypec, value, "ActivityType__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,Account> ChildAccounts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,AccountCleanInfo> AccountCleanInfos
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,AccountContactRole> AccountContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,AccountFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,AccountHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountFromId")]
        public RelationShip<Account,AccountPartner> AccountPartnersFrom
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountToId")]
        public RelationShip<Account,AccountPartner> AccountPartnersTo
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,AccountShare> Shares
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Asset> Assets
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Account,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Account,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Contact> Contacts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Account,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Contract> Contracts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Account,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Account,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Opportunity> Opportunities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountToId")]
        public RelationShip<Account,OpportunityPartner> OpportunityPartnersTo
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountId")]
        public RelationShip<Account,Order> Orders
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountFromId")]
        public RelationShip<Account,Partner> PartnersFrom
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AccountToId")]
        public RelationShip<Account,Partner> PartnersTo
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Account,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Account,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Account,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Account,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("AccountCleanInfo")]
    public class AccountCleanInfo : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountCleanInfo(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountCleanInfo()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __AccountId;
        [EntityField(false)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.DateTime __LastMatchedDate;
        [EntityField(false)]
        public System.DateTime LastMatchedDate
        {
            get { return __LastMatchedDate; }
            set { SetField(ref __LastMatchedDate, value, "LastMatchedDate"); }
        }
        private System.DateTime? __LastStatusChangedDate;
        [EntityField(true)]
        public System.DateTime? LastStatusChangedDate
        {
            get { return __LastStatusChangedDate; }
            set { SetField(ref __LastStatusChangedDate, value, "LastStatusChangedDate"); }
        }
        private System.String __LastStatusChangedById;
        [EntityField(true)]
        public System.String LastStatusChangedById
        {
            get { return __LastStatusChangedById; }
            set { SetField(ref __LastStatusChangedById, value, "LastStatusChangedById"); }
        }
        private System.Boolean __IsInactive;
        [EntityField(false)]
        public System.Boolean IsInactive
        {
            get { return __IsInactive; }
            set { SetField(ref __IsInactive, value, "IsInactive"); }
        }
        private System.String __CompanyName;
        [EntityField(true)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Website;
        [EntityField(true)]
        public System.String Website
        {
            get { return __Website; }
            set { SetField(ref __Website, value, "Website"); }
        }
        private System.String __TickerSymbol;
        [EntityField(true)]
        public System.String TickerSymbol
        {
            get { return __TickerSymbol; }
            set { SetField(ref __TickerSymbol, value, "TickerSymbol"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private PickAccountCleanInfoIndustry __Industry;
        [EntityField(true)]
        public PickAccountCleanInfoIndustry Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private PickAccountCleanInfoOwnership __Ownership;
        [EntityField(true)]
        public PickAccountCleanInfoOwnership Ownership
        {
            get { return __Ownership; }
            set { SetField(ref __Ownership, value, "Ownership"); }
        }
        private System.String __DunsNumber;
        [EntityField(true)]
        public System.String DunsNumber
        {
            get { return __DunsNumber; }
            set { SetField(ref __DunsNumber, value, "DunsNumber"); }
        }
        private System.String __Sic;
        [EntityField(true)]
        public System.String Sic
        {
            get { return __Sic; }
            set { SetField(ref __Sic, value, "Sic"); }
        }
        private System.String __SicDescription;
        [EntityField(true)]
        public System.String SicDescription
        {
            get { return __SicDescription; }
            set { SetField(ref __SicDescription, value, "SicDescription"); }
        }
        private System.String __NaicsCode;
        [EntityField(true)]
        public System.String NaicsCode
        {
            get { return __NaicsCode; }
            set { SetField(ref __NaicsCode, value, "NaicsCode"); }
        }
        private System.String __NaicsDescription;
        [EntityField(true)]
        public System.String NaicsDescription
        {
            get { return __NaicsDescription; }
            set { SetField(ref __NaicsDescription, value, "NaicsDescription"); }
        }
        private System.String __YearStarted;
        [EntityField(true)]
        public System.String YearStarted
        {
            get { return __YearStarted; }
            set { SetField(ref __YearStarted, value, "YearStarted"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __AccountSite;
        [EntityField(true)]
        public System.String AccountSite
        {
            get { return __AccountSite; }
            set { SetField(ref __AccountSite, value, "AccountSite"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __Tradestyle;
        [EntityField(true)]
        public System.String Tradestyle
        {
            get { return __Tradestyle; }
            set { SetField(ref __Tradestyle, value, "Tradestyle"); }
        }
        private System.String __DandBCompanyDunsNumber;
        [EntityField(true)]
        public System.String DandBCompanyDunsNumber
        {
            get { return __DandBCompanyDunsNumber; }
            set { SetField(ref __DandBCompanyDunsNumber, value, "DandBCompanyDunsNumber"); }
        }
        private System.String __DunsRightMatchGrade;
        [EntityField(true)]
        public System.String DunsRightMatchGrade
        {
            get { return __DunsRightMatchGrade; }
            set { SetField(ref __DunsRightMatchGrade, value, "DunsRightMatchGrade"); }
        }
        private System.Int32? __DunsRightMatchConfidence;
        [EntityField(true)]
        public System.Int32? DunsRightMatchConfidence
        {
            get { return __DunsRightMatchConfidence; }
            set { SetField(ref __DunsRightMatchConfidence, value, "DunsRightMatchConfidence"); }
        }
        private PickAccountCleanInfoCompanyStatusDataDotCom __CompanyStatusDataDotCom;
        [EntityField(true)]
        public PickAccountCleanInfoCompanyStatusDataDotCom CompanyStatusDataDotCom
        {
            get { return __CompanyStatusDataDotCom; }
            set { SetField(ref __CompanyStatusDataDotCom, value, "CompanyStatusDataDotCom"); }
        }
        private System.Boolean __IsReviewedCompanyName;
        [EntityField(false)]
        public System.Boolean IsReviewedCompanyName
        {
            get { return __IsReviewedCompanyName; }
            set { SetField(ref __IsReviewedCompanyName, value, "IsReviewedCompanyName"); }
        }
        private System.Boolean __IsReviewedPhone;
        [EntityField(false)]
        public System.Boolean IsReviewedPhone
        {
            get { return __IsReviewedPhone; }
            set { SetField(ref __IsReviewedPhone, value, "IsReviewedPhone"); }
        }
        private System.Boolean __IsReviewedAddress;
        [EntityField(false)]
        public System.Boolean IsReviewedAddress
        {
            get { return __IsReviewedAddress; }
            set { SetField(ref __IsReviewedAddress, value, "IsReviewedAddress"); }
        }
        private System.Boolean __IsReviewedWebsite;
        [EntityField(false)]
        public System.Boolean IsReviewedWebsite
        {
            get { return __IsReviewedWebsite; }
            set { SetField(ref __IsReviewedWebsite, value, "IsReviewedWebsite"); }
        }
        private System.Boolean __IsReviewedTickerSymbol;
        [EntityField(false)]
        public System.Boolean IsReviewedTickerSymbol
        {
            get { return __IsReviewedTickerSymbol; }
            set { SetField(ref __IsReviewedTickerSymbol, value, "IsReviewedTickerSymbol"); }
        }
        private System.Boolean __IsReviewedAnnualRevenue;
        [EntityField(false)]
        public System.Boolean IsReviewedAnnualRevenue
        {
            get { return __IsReviewedAnnualRevenue; }
            set { SetField(ref __IsReviewedAnnualRevenue, value, "IsReviewedAnnualRevenue"); }
        }
        private System.Boolean __IsReviewedNumberOfEmployees;
        [EntityField(false)]
        public System.Boolean IsReviewedNumberOfEmployees
        {
            get { return __IsReviewedNumberOfEmployees; }
            set { SetField(ref __IsReviewedNumberOfEmployees, value, "IsReviewedNumberOfEmployees"); }
        }
        private System.Boolean __IsReviewedIndustry;
        [EntityField(false)]
        public System.Boolean IsReviewedIndustry
        {
            get { return __IsReviewedIndustry; }
            set { SetField(ref __IsReviewedIndustry, value, "IsReviewedIndustry"); }
        }
        private System.Boolean __IsReviewedOwnership;
        [EntityField(false)]
        public System.Boolean IsReviewedOwnership
        {
            get { return __IsReviewedOwnership; }
            set { SetField(ref __IsReviewedOwnership, value, "IsReviewedOwnership"); }
        }
        private System.Boolean __IsReviewedDunsNumber;
        [EntityField(false)]
        public System.Boolean IsReviewedDunsNumber
        {
            get { return __IsReviewedDunsNumber; }
            set { SetField(ref __IsReviewedDunsNumber, value, "IsReviewedDunsNumber"); }
        }
        private System.Boolean __IsReviewedSic;
        [EntityField(false)]
        public System.Boolean IsReviewedSic
        {
            get { return __IsReviewedSic; }
            set { SetField(ref __IsReviewedSic, value, "IsReviewedSic"); }
        }
        private System.Boolean __IsReviewedSicDescription;
        [EntityField(false)]
        public System.Boolean IsReviewedSicDescription
        {
            get { return __IsReviewedSicDescription; }
            set { SetField(ref __IsReviewedSicDescription, value, "IsReviewedSicDescription"); }
        }
        private System.Boolean __IsReviewedNaicsCode;
        [EntityField(false)]
        public System.Boolean IsReviewedNaicsCode
        {
            get { return __IsReviewedNaicsCode; }
            set { SetField(ref __IsReviewedNaicsCode, value, "IsReviewedNaicsCode"); }
        }
        private System.Boolean __IsReviewedNaicsDescription;
        [EntityField(false)]
        public System.Boolean IsReviewedNaicsDescription
        {
            get { return __IsReviewedNaicsDescription; }
            set { SetField(ref __IsReviewedNaicsDescription, value, "IsReviewedNaicsDescription"); }
        }
        private System.Boolean __IsReviewedYearStarted;
        [EntityField(false)]
        public System.Boolean IsReviewedYearStarted
        {
            get { return __IsReviewedYearStarted; }
            set { SetField(ref __IsReviewedYearStarted, value, "IsReviewedYearStarted"); }
        }
        private System.Boolean __IsReviewedFax;
        [EntityField(false)]
        public System.Boolean IsReviewedFax
        {
            get { return __IsReviewedFax; }
            set { SetField(ref __IsReviewedFax, value, "IsReviewedFax"); }
        }
        private System.Boolean __IsReviewedAccountSite;
        [EntityField(false)]
        public System.Boolean IsReviewedAccountSite
        {
            get { return __IsReviewedAccountSite; }
            set { SetField(ref __IsReviewedAccountSite, value, "IsReviewedAccountSite"); }
        }
        private System.Boolean __IsReviewedDescription;
        [EntityField(false)]
        public System.Boolean IsReviewedDescription
        {
            get { return __IsReviewedDescription; }
            set { SetField(ref __IsReviewedDescription, value, "IsReviewedDescription"); }
        }
        private System.Boolean __IsReviewedTradestyle;
        [EntityField(false)]
        public System.Boolean IsReviewedTradestyle
        {
            get { return __IsReviewedTradestyle; }
            set { SetField(ref __IsReviewedTradestyle, value, "IsReviewedTradestyle"); }
        }
        private System.Boolean __IsReviewedDandBCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsReviewedDandBCompanyDunsNumber
        {
            get { return __IsReviewedDandBCompanyDunsNumber; }
            set { SetField(ref __IsReviewedDandBCompanyDunsNumber, value, "IsReviewedDandBCompanyDunsNumber"); }
        }
        private System.Boolean __IsDifferentCompanyName;
        [EntityField(false)]
        public System.Boolean IsDifferentCompanyName
        {
            get { return __IsDifferentCompanyName; }
            set { SetField(ref __IsDifferentCompanyName, value, "IsDifferentCompanyName"); }
        }
        private System.Boolean __IsDifferentPhone;
        [EntityField(false)]
        public System.Boolean IsDifferentPhone
        {
            get { return __IsDifferentPhone; }
            set { SetField(ref __IsDifferentPhone, value, "IsDifferentPhone"); }
        }
        private System.Boolean __IsDifferentStreet;
        [EntityField(false)]
        public System.Boolean IsDifferentStreet
        {
            get { return __IsDifferentStreet; }
            set { SetField(ref __IsDifferentStreet, value, "IsDifferentStreet"); }
        }
        private System.Boolean __IsDifferentCity;
        [EntityField(false)]
        public System.Boolean IsDifferentCity
        {
            get { return __IsDifferentCity; }
            set { SetField(ref __IsDifferentCity, value, "IsDifferentCity"); }
        }
        private System.Boolean __IsDifferentState;
        [EntityField(false)]
        public System.Boolean IsDifferentState
        {
            get { return __IsDifferentState; }
            set { SetField(ref __IsDifferentState, value, "IsDifferentState"); }
        }
        private System.Boolean __IsDifferentPostalCode;
        [EntityField(false)]
        public System.Boolean IsDifferentPostalCode
        {
            get { return __IsDifferentPostalCode; }
            set { SetField(ref __IsDifferentPostalCode, value, "IsDifferentPostalCode"); }
        }
        private System.Boolean __IsDifferentCountry;
        [EntityField(false)]
        public System.Boolean IsDifferentCountry
        {
            get { return __IsDifferentCountry; }
            set { SetField(ref __IsDifferentCountry, value, "IsDifferentCountry"); }
        }
        private System.Boolean __IsDifferentWebsite;
        [EntityField(false)]
        public System.Boolean IsDifferentWebsite
        {
            get { return __IsDifferentWebsite; }
            set { SetField(ref __IsDifferentWebsite, value, "IsDifferentWebsite"); }
        }
        private System.Boolean __IsDifferentTickerSymbol;
        [EntityField(false)]
        public System.Boolean IsDifferentTickerSymbol
        {
            get { return __IsDifferentTickerSymbol; }
            set { SetField(ref __IsDifferentTickerSymbol, value, "IsDifferentTickerSymbol"); }
        }
        private System.Boolean __IsDifferentAnnualRevenue;
        [EntityField(false)]
        public System.Boolean IsDifferentAnnualRevenue
        {
            get { return __IsDifferentAnnualRevenue; }
            set { SetField(ref __IsDifferentAnnualRevenue, value, "IsDifferentAnnualRevenue"); }
        }
        private System.Boolean __IsDifferentNumberOfEmployees;
        [EntityField(false)]
        public System.Boolean IsDifferentNumberOfEmployees
        {
            get { return __IsDifferentNumberOfEmployees; }
            set { SetField(ref __IsDifferentNumberOfEmployees, value, "IsDifferentNumberOfEmployees"); }
        }
        private System.Boolean __IsDifferentIndustry;
        [EntityField(false)]
        public System.Boolean IsDifferentIndustry
        {
            get { return __IsDifferentIndustry; }
            set { SetField(ref __IsDifferentIndustry, value, "IsDifferentIndustry"); }
        }
        private System.Boolean __IsDifferentOwnership;
        [EntityField(false)]
        public System.Boolean IsDifferentOwnership
        {
            get { return __IsDifferentOwnership; }
            set { SetField(ref __IsDifferentOwnership, value, "IsDifferentOwnership"); }
        }
        private System.Boolean __IsDifferentDunsNumber;
        [EntityField(false)]
        public System.Boolean IsDifferentDunsNumber
        {
            get { return __IsDifferentDunsNumber; }
            set { SetField(ref __IsDifferentDunsNumber, value, "IsDifferentDunsNumber"); }
        }
        private System.Boolean __IsDifferentSic;
        [EntityField(false)]
        public System.Boolean IsDifferentSic
        {
            get { return __IsDifferentSic; }
            set { SetField(ref __IsDifferentSic, value, "IsDifferentSic"); }
        }
        private System.Boolean __IsDifferentSicDescription;
        [EntityField(false)]
        public System.Boolean IsDifferentSicDescription
        {
            get { return __IsDifferentSicDescription; }
            set { SetField(ref __IsDifferentSicDescription, value, "IsDifferentSicDescription"); }
        }
        private System.Boolean __IsDifferentNaicsCode;
        [EntityField(false)]
        public System.Boolean IsDifferentNaicsCode
        {
            get { return __IsDifferentNaicsCode; }
            set { SetField(ref __IsDifferentNaicsCode, value, "IsDifferentNaicsCode"); }
        }
        private System.Boolean __IsDifferentNaicsDescription;
        [EntityField(false)]
        public System.Boolean IsDifferentNaicsDescription
        {
            get { return __IsDifferentNaicsDescription; }
            set { SetField(ref __IsDifferentNaicsDescription, value, "IsDifferentNaicsDescription"); }
        }
        private System.Boolean __IsDifferentYearStarted;
        [EntityField(false)]
        public System.Boolean IsDifferentYearStarted
        {
            get { return __IsDifferentYearStarted; }
            set { SetField(ref __IsDifferentYearStarted, value, "IsDifferentYearStarted"); }
        }
        private System.Boolean __IsDifferentFax;
        [EntityField(false)]
        public System.Boolean IsDifferentFax
        {
            get { return __IsDifferentFax; }
            set { SetField(ref __IsDifferentFax, value, "IsDifferentFax"); }
        }
        private System.Boolean __IsDifferentAccountSite;
        [EntityField(false)]
        public System.Boolean IsDifferentAccountSite
        {
            get { return __IsDifferentAccountSite; }
            set { SetField(ref __IsDifferentAccountSite, value, "IsDifferentAccountSite"); }
        }
        private System.Boolean __IsDifferentDescription;
        [EntityField(false)]
        public System.Boolean IsDifferentDescription
        {
            get { return __IsDifferentDescription; }
            set { SetField(ref __IsDifferentDescription, value, "IsDifferentDescription"); }
        }
        private System.Boolean __IsDifferentTradestyle;
        [EntityField(false)]
        public System.Boolean IsDifferentTradestyle
        {
            get { return __IsDifferentTradestyle; }
            set { SetField(ref __IsDifferentTradestyle, value, "IsDifferentTradestyle"); }
        }
        private System.Boolean __IsDifferentDandBCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsDifferentDandBCompanyDunsNumber
        {
            get { return __IsDifferentDandBCompanyDunsNumber; }
            set { SetField(ref __IsDifferentDandBCompanyDunsNumber, value, "IsDifferentDandBCompanyDunsNumber"); }
        }
        private System.Boolean __IsDifferentStateCode;
        [EntityField(false)]
        public System.Boolean IsDifferentStateCode
        {
            get { return __IsDifferentStateCode; }
            set { SetField(ref __IsDifferentStateCode, value, "IsDifferentStateCode"); }
        }
        private System.Boolean __IsDifferentCountryCode;
        [EntityField(false)]
        public System.Boolean IsDifferentCountryCode
        {
            get { return __IsDifferentCountryCode; }
            set { SetField(ref __IsDifferentCountryCode, value, "IsDifferentCountryCode"); }
        }
        private System.Boolean __CleanedByJob;
        [EntityField(false)]
        public System.Boolean CleanedByJob
        {
            get { return __CleanedByJob; }
            set { SetField(ref __CleanedByJob, value, "CleanedByJob"); }
        }
        private System.Boolean __CleanedByUser;
        [EntityField(false)]
        public System.Boolean CleanedByUser
        {
            get { return __CleanedByUser; }
            set { SetField(ref __CleanedByUser, value, "CleanedByUser"); }
        }
        private System.Boolean __IsFlaggedWrongCompanyName;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongCompanyName
        {
            get { return __IsFlaggedWrongCompanyName; }
            set { SetField(ref __IsFlaggedWrongCompanyName, value, "IsFlaggedWrongCompanyName"); }
        }
        private System.Boolean __IsFlaggedWrongPhone;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongPhone
        {
            get { return __IsFlaggedWrongPhone; }
            set { SetField(ref __IsFlaggedWrongPhone, value, "IsFlaggedWrongPhone"); }
        }
        private System.Boolean __IsFlaggedWrongAddress;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongAddress
        {
            get { return __IsFlaggedWrongAddress; }
            set { SetField(ref __IsFlaggedWrongAddress, value, "IsFlaggedWrongAddress"); }
        }
        private System.Boolean __IsFlaggedWrongWebsite;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongWebsite
        {
            get { return __IsFlaggedWrongWebsite; }
            set { SetField(ref __IsFlaggedWrongWebsite, value, "IsFlaggedWrongWebsite"); }
        }
        private System.Boolean __IsFlaggedWrongTickerSymbol;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongTickerSymbol
        {
            get { return __IsFlaggedWrongTickerSymbol; }
            set { SetField(ref __IsFlaggedWrongTickerSymbol, value, "IsFlaggedWrongTickerSymbol"); }
        }
        private System.Boolean __IsFlaggedWrongAnnualRevenue;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongAnnualRevenue
        {
            get { return __IsFlaggedWrongAnnualRevenue; }
            set { SetField(ref __IsFlaggedWrongAnnualRevenue, value, "IsFlaggedWrongAnnualRevenue"); }
        }
        private System.Boolean __IsFlaggedWrongNumberOfEmployees;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongNumberOfEmployees
        {
            get { return __IsFlaggedWrongNumberOfEmployees; }
            set { SetField(ref __IsFlaggedWrongNumberOfEmployees, value, "IsFlaggedWrongNumberOfEmployees"); }
        }
        private System.Boolean __IsFlaggedWrongIndustry;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongIndustry
        {
            get { return __IsFlaggedWrongIndustry; }
            set { SetField(ref __IsFlaggedWrongIndustry, value, "IsFlaggedWrongIndustry"); }
        }
        private System.Boolean __IsFlaggedWrongOwnership;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongOwnership
        {
            get { return __IsFlaggedWrongOwnership; }
            set { SetField(ref __IsFlaggedWrongOwnership, value, "IsFlaggedWrongOwnership"); }
        }
        private System.Boolean __IsFlaggedWrongDunsNumber;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongDunsNumber
        {
            get { return __IsFlaggedWrongDunsNumber; }
            set { SetField(ref __IsFlaggedWrongDunsNumber, value, "IsFlaggedWrongDunsNumber"); }
        }
        private System.Boolean __IsFlaggedWrongSic;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongSic
        {
            get { return __IsFlaggedWrongSic; }
            set { SetField(ref __IsFlaggedWrongSic, value, "IsFlaggedWrongSic"); }
        }
        private System.Boolean __IsFlaggedWrongSicDescription;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongSicDescription
        {
            get { return __IsFlaggedWrongSicDescription; }
            set { SetField(ref __IsFlaggedWrongSicDescription, value, "IsFlaggedWrongSicDescription"); }
        }
        private System.Boolean __IsFlaggedWrongNaicsCode;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongNaicsCode
        {
            get { return __IsFlaggedWrongNaicsCode; }
            set { SetField(ref __IsFlaggedWrongNaicsCode, value, "IsFlaggedWrongNaicsCode"); }
        }
        private System.Boolean __IsFlaggedWrongNaicsDescription;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongNaicsDescription
        {
            get { return __IsFlaggedWrongNaicsDescription; }
            set { SetField(ref __IsFlaggedWrongNaicsDescription, value, "IsFlaggedWrongNaicsDescription"); }
        }
        private System.Boolean __IsFlaggedWrongYearStarted;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongYearStarted
        {
            get { return __IsFlaggedWrongYearStarted; }
            set { SetField(ref __IsFlaggedWrongYearStarted, value, "IsFlaggedWrongYearStarted"); }
        }
        private System.Boolean __IsFlaggedWrongFax;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongFax
        {
            get { return __IsFlaggedWrongFax; }
            set { SetField(ref __IsFlaggedWrongFax, value, "IsFlaggedWrongFax"); }
        }
        private System.Boolean __IsFlaggedWrongAccountSite;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongAccountSite
        {
            get { return __IsFlaggedWrongAccountSite; }
            set { SetField(ref __IsFlaggedWrongAccountSite, value, "IsFlaggedWrongAccountSite"); }
        }
        private System.Boolean __IsFlaggedWrongDescription;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongDescription
        {
            get { return __IsFlaggedWrongDescription; }
            set { SetField(ref __IsFlaggedWrongDescription, value, "IsFlaggedWrongDescription"); }
        }
        private System.Boolean __IsFlaggedWrongTradestyle;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongTradestyle
        {
            get { return __IsFlaggedWrongTradestyle; }
            set { SetField(ref __IsFlaggedWrongTradestyle, value, "IsFlaggedWrongTradestyle"); }
        }
        private System.String __DataDotComId;
        [EntityField(true)]
        public System.String DataDotComId
        {
            get { return __DataDotComId; }
            set { SetField(ref __DataDotComId, value, "DataDotComId"); }
        }
    }
    [EntityName("AccountContactRole")]
    public class AccountContactRole : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountContactRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountContactRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __AccountId;
        [EntityField(false)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private PickAccountContactRoleRole __Role;
        [EntityField(true)]
        public PickAccountContactRoleRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.Boolean __IsPrimary;
        [EntityField(false)]
        public System.Boolean IsPrimary
        {
            get { return __IsPrimary; }
            set { SetField(ref __IsPrimary, value, "IsPrimary"); }
        }
    }
    [EntityName("AccountFeed")]
    public class AccountFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickAccountFeedType __Type;
        [EntityField(true)]
        public PickAccountFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<AccountFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<AccountFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<AccountFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("AccountHistory")]
    public class AccountHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __AccountId;
        [EntityField(false)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickAccountHistoryField __Field;
        [EntityField(false)]
        public PickAccountHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("AccountPartner")]
    public class AccountPartner : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountPartner(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountPartner()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __AccountFromId;
        [EntityField(false)]
        public System.String AccountFromId
        {
            get { return __AccountFromId; }
            set { SetField(ref __AccountFromId, value, "AccountFromId"); }
        }
        private System.String __AccountToId;
        [EntityField(true)]
        public System.String AccountToId
        {
            get { return __AccountToId; }
            set { SetField(ref __AccountToId, value, "AccountToId"); }
        }
        private System.String __OpportunityId;
        [EntityField(true)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private PickAccountPartnerRole __Role;
        [EntityField(true)]
        public PickAccountPartnerRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.Boolean __IsPrimary;
        [EntityField(false)]
        public System.Boolean IsPrimary
        {
            get { return __IsPrimary; }
            set { SetField(ref __IsPrimary, value, "IsPrimary"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ReversePartnerId;
        [EntityField(true)]
        public System.String ReversePartnerId
        {
            get { return __ReversePartnerId; }
            set { SetField(ref __ReversePartnerId, value, "ReversePartnerId"); }
        }
    }
    [EntityName("AccountShare")]
    public class AccountShare : ISalesforceEntity
    {
    [JsonConstructor]
        private AccountShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AccountShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __AccountId;
        [EntityField(false)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickAccountShareAccountAccessLevel __AccountAccessLevel;
        [EntityField(false)]
        public PickAccountShareAccountAccessLevel AccountAccessLevel
        {
            get { return __AccountAccessLevel; }
            set { SetField(ref __AccountAccessLevel, value, "AccountAccessLevel"); }
        }
        private PickAccountShareOpportunityAccessLevel __OpportunityAccessLevel;
        [EntityField(false)]
        public PickAccountShareOpportunityAccessLevel OpportunityAccessLevel
        {
            get { return __OpportunityAccessLevel; }
            set { SetField(ref __OpportunityAccessLevel, value, "OpportunityAccessLevel"); }
        }
        private PickAccountShareCaseAccessLevel __CaseAccessLevel;
        [EntityField(false)]
        public PickAccountShareCaseAccessLevel CaseAccessLevel
        {
            get { return __CaseAccessLevel; }
            set { SetField(ref __CaseAccessLevel, value, "CaseAccessLevel"); }
        }
        private PickAccountShareContactAccessLevel __ContactAccessLevel;
        [EntityField(true)]
        public PickAccountShareContactAccessLevel ContactAccessLevel
        {
            get { return __ContactAccessLevel; }
            set { SetField(ref __ContactAccessLevel, value, "ContactAccessLevel"); }
        }
        private PickAccountShareRowCause __RowCause;
        [EntityField(true)]
        public PickAccountShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("ActivityHistory")]
    public class ActivityHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ActivityHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ActivityHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.Boolean __IsTask;
        [EntityField(false)]
        public System.Boolean IsTask
        {
            get { return __IsTask; }
            set { SetField(ref __IsTask, value, "IsTask"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private System.String __OwnerId;
        [EntityField(true)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private PickActivityHistoryStatus __Status;
        [EntityField(true)]
        public PickActivityHistoryStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickActivityHistoryPriority __Priority;
        [EntityField(true)]
        public PickActivityHistoryPriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private PickActivityHistoryActivityType __ActivityType;
        [EntityField(true)]
        public PickActivityHistoryActivityType ActivityType
        {
            get { return __ActivityType; }
            set { SetField(ref __ActivityType, value, "ActivityType"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.Boolean __IsAllDayEvent;
        [EntityField(false)]
        public System.Boolean IsAllDayEvent
        {
            get { return __IsAllDayEvent; }
            set { SetField(ref __IsAllDayEvent, value, "IsAllDayEvent"); }
        }
        private System.Boolean __IsVisibleInSelfService;
        [EntityField(false)]
        public System.Boolean IsVisibleInSelfService
        {
            get { return __IsVisibleInSelfService; }
            set { SetField(ref __IsVisibleInSelfService, value, "IsVisibleInSelfService"); }
        }
        private System.Int32? __DurationInMinutes;
        [EntityField(true)]
        public System.Int32? DurationInMinutes
        {
            get { return __DurationInMinutes; }
            set { SetField(ref __DurationInMinutes, value, "DurationInMinutes"); }
        }
        private System.String __Location;
        [EntityField(true)]
        public System.String Location
        {
            get { return __Location; }
            set { SetField(ref __Location, value, "Location"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32? __CallDurationInSeconds;
        [EntityField(true)]
        public System.Int32? CallDurationInSeconds
        {
            get { return __CallDurationInSeconds; }
            set { SetField(ref __CallDurationInSeconds, value, "CallDurationInSeconds"); }
        }
        private PickActivityHistoryCallType __CallType;
        [EntityField(true)]
        public PickActivityHistoryCallType CallType
        {
            get { return __CallType; }
            set { SetField(ref __CallType, value, "CallType"); }
        }
        private System.String __CallDisposition;
        [EntityField(true)]
        public System.String CallDisposition
        {
            get { return __CallDisposition; }
            set { SetField(ref __CallDisposition, value, "CallDisposition"); }
        }
        private System.String __CallObject;
        [EntityField(true)]
        public System.String CallObject
        {
            get { return __CallObject; }
            set { SetField(ref __CallObject, value, "CallObject"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        private System.DateTime? __EndDateTime;
        [EntityField(true)]
        public System.DateTime? EndDateTime
        {
            get { return __EndDateTime; }
            set { SetField(ref __EndDateTime, value, "EndDateTime"); }
        }
        private System.DateTime? __StartDateTime;
        [EntityField(true)]
        public System.DateTime? StartDateTime
        {
            get { return __StartDateTime; }
            set { SetField(ref __StartDateTime, value, "StartDateTime"); }
        }
    }
    [EntityName("AdditionalNumber")]
    public class AdditionalNumber : ISalesforceEntity
    {
    [JsonConstructor]
        private AdditionalNumber(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AdditionalNumber()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CallCenterId;
        [EntityField(true)]
        public System.String CallCenterId
        {
            get { return __CallCenterId; }
            set { SetField(ref __CallCenterId, value, "CallCenterId"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("AggregateResult")]
    public class AggregateResult : ISalesforceEntity
    {
    [JsonConstructor]
        private AggregateResult(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AggregateResult()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
    }
    [EntityName("Announcement")]
    public class Announcement : ISalesforceEntity
    {
    [JsonConstructor]
        private Announcement(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Announcement()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __FeedItemId;
        [EntityField(false)]
        public System.String FeedItemId
        {
            get { return __FeedItemId; }
            set { SetField(ref __FeedItemId, value, "FeedItemId"); }
        }
        private System.DateTime __ExpirationDate;
        [EntityField(false)]
        public System.DateTime ExpirationDate
        {
            get { return __ExpirationDate; }
            set { SetField(ref __ExpirationDate, value, "ExpirationDate"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
    }
    [EntityName("ApexClass")]
    public class ApexClass : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexClass(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexClass()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private PickApexClassStatus __Status;
        [EntityField(false)]
        public PickApexClassStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Boolean __IsValid;
        [EntityField(false)]
        public System.Boolean IsValid
        {
            get { return __IsValid; }
            set { SetField(ref __IsValid, value, "IsValid"); }
        }
        private System.Double? __BodyCrc;
        [EntityField(true)]
        public System.Double? BodyCrc
        {
            get { return __BodyCrc; }
            set { SetField(ref __BodyCrc, value, "BodyCrc"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.Int32 __LengthWithoutComments;
        [EntityField(false)]
        public System.Int32 LengthWithoutComments
        {
            get { return __LengthWithoutComments; }
            set { SetField(ref __LengthWithoutComments, value, "LengthWithoutComments"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("SetupEntityId")]
        public RelationShip<ApexClass,SetupEntityAccess> SetupEntityAccessItems
        {
            get;set;
        }
    }
    [EntityName("ApexComponent")]
    public class ApexComponent : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexComponent(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexComponent()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickApexComponentControllerType __ControllerType;
        [EntityField(false)]
        public PickApexComponentControllerType ControllerType
        {
            get { return __ControllerType; }
            set { SetField(ref __ControllerType, value, "ControllerType"); }
        }
        private System.String __ControllerKey;
        [EntityField(true)]
        public System.String ControllerKey
        {
            get { return __ControllerKey; }
            set { SetField(ref __ControllerKey, value, "ControllerKey"); }
        }
        private System.String __Markup;
        [EntityField(false)]
        public System.String Markup
        {
            get { return __Markup; }
            set { SetField(ref __Markup, value, "Markup"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ApexLog")]
    public class ApexLog : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexLog(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexLog()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __LogUserId;
        [EntityField(true)]
        public System.String LogUserId
        {
            get { return __LogUserId; }
            set { SetField(ref __LogUserId, value, "LogUserId"); }
        }
        private System.Int32 __LogLength;
        [EntityField(false)]
        public System.Int32 LogLength
        {
            get { return __LogLength; }
            set { SetField(ref __LogLength, value, "LogLength"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __Request;
        [EntityField(false)]
        public System.String Request
        {
            get { return __Request; }
            set { SetField(ref __Request, value, "Request"); }
        }
        private System.String __Operation;
        [EntityField(false)]
        public System.String Operation
        {
            get { return __Operation; }
            set { SetField(ref __Operation, value, "Operation"); }
        }
        private System.String __Application;
        [EntityField(false)]
        public System.String Application
        {
            get { return __Application; }
            set { SetField(ref __Application, value, "Application"); }
        }
        private System.String __Status;
        [EntityField(false)]
        public System.String Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Int32 __DurationMilliseconds;
        [EntityField(false)]
        public System.Int32 DurationMilliseconds
        {
            get { return __DurationMilliseconds; }
            set { SetField(ref __DurationMilliseconds, value, "DurationMilliseconds"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __StartTime;
        [EntityField(false)]
        public System.DateTime StartTime
        {
            get { return __StartTime; }
            set { SetField(ref __StartTime, value, "StartTime"); }
        }
        private PickApexLogLocation __Location;
        [EntityField(true)]
        public PickApexLogLocation Location
        {
            get { return __Location; }
            set { SetField(ref __Location, value, "Location"); }
        }
    }
    [EntityName("ApexPage")]
    public class ApexPage : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexPage(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexPage()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickApexPageControllerType __ControllerType;
        [EntityField(false)]
        public PickApexPageControllerType ControllerType
        {
            get { return __ControllerType; }
            set { SetField(ref __ControllerType, value, "ControllerType"); }
        }
        private System.String __ControllerKey;
        [EntityField(true)]
        public System.String ControllerKey
        {
            get { return __ControllerKey; }
            set { SetField(ref __ControllerKey, value, "ControllerKey"); }
        }
        private System.Boolean __IsAvailableInTouch;
        [EntityField(false)]
        public System.Boolean IsAvailableInTouch
        {
            get { return __IsAvailableInTouch; }
            set { SetField(ref __IsAvailableInTouch, value, "IsAvailableInTouch"); }
        }
        private System.Boolean __IsConfirmationTokenRequired;
        [EntityField(false)]
        public System.Boolean IsConfirmationTokenRequired
        {
            get { return __IsConfirmationTokenRequired; }
            set { SetField(ref __IsConfirmationTokenRequired, value, "IsConfirmationTokenRequired"); }
        }
        private System.String __Markup;
        [EntityField(false)]
        public System.String Markup
        {
            get { return __Markup; }
            set { SetField(ref __Markup, value, "Markup"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("SetupEntityId")]
        public RelationShip<ApexPage,SetupEntityAccess> SetupEntityAccessItems
        {
            get;set;
        }
    }
    [EntityName("ApexTestQueueItem")]
    public class ApexTestQueueItem : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexTestQueueItem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexTestQueueItem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ApexClassId;
        [EntityField(false)]
        public System.String ApexClassId
        {
            get { return __ApexClassId; }
            set { SetField(ref __ApexClassId, value, "ApexClassId"); }
        }
        private PickApexTestQueueItemStatus __Status;
        [EntityField(false)]
        public PickApexTestQueueItemStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __ExtendedStatus;
        [EntityField(true)]
        public System.String ExtendedStatus
        {
            get { return __ExtendedStatus; }
            set { SetField(ref __ExtendedStatus, value, "ExtendedStatus"); }
        }
        private System.String __ParentJobId;
        [EntityField(true)]
        public System.String ParentJobId
        {
            get { return __ParentJobId; }
            set { SetField(ref __ParentJobId, value, "ParentJobId"); }
        }
    }
    [EntityName("ApexTestResult")]
    public class ApexTestResult : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexTestResult(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexTestResult()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __TestTimestamp;
        [EntityField(false)]
        public System.DateTime TestTimestamp
        {
            get { return __TestTimestamp; }
            set { SetField(ref __TestTimestamp, value, "TestTimestamp"); }
        }
        private PickApexTestResultOutcome __Outcome;
        [EntityField(false)]
        public PickApexTestResultOutcome Outcome
        {
            get { return __Outcome; }
            set { SetField(ref __Outcome, value, "Outcome"); }
        }
        private System.String __ApexClassId;
        [EntityField(false)]
        public System.String ApexClassId
        {
            get { return __ApexClassId; }
            set { SetField(ref __ApexClassId, value, "ApexClassId"); }
        }
        private System.String __MethodName;
        [EntityField(true)]
        public System.String MethodName
        {
            get { return __MethodName; }
            set { SetField(ref __MethodName, value, "MethodName"); }
        }
        private System.String __Message;
        [EntityField(true)]
        public System.String Message
        {
            get { return __Message; }
            set { SetField(ref __Message, value, "Message"); }
        }
        private System.String __StackTrace;
        [EntityField(true)]
        public System.String StackTrace
        {
            get { return __StackTrace; }
            set { SetField(ref __StackTrace, value, "StackTrace"); }
        }
        private System.String __AsyncApexJobId;
        [EntityField(true)]
        public System.String AsyncApexJobId
        {
            get { return __AsyncApexJobId; }
            set { SetField(ref __AsyncApexJobId, value, "AsyncApexJobId"); }
        }
        private System.String __QueueItemId;
        [EntityField(true)]
        public System.String QueueItemId
        {
            get { return __QueueItemId; }
            set { SetField(ref __QueueItemId, value, "QueueItemId"); }
        }
        private System.String __ApexLogId;
        [EntityField(true)]
        public System.String ApexLogId
        {
            get { return __ApexLogId; }
            set { SetField(ref __ApexLogId, value, "ApexLogId"); }
        }
    }
    [EntityName("ApexTrigger")]
    public class ApexTrigger : ISalesforceEntity
    {
    [JsonConstructor]
        private ApexTrigger(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ApexTrigger()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickApexTriggerTableEnumOrId __TableEnumOrId;
        [EntityField(true)]
        public PickApexTriggerTableEnumOrId TableEnumOrId
        {
            get { return __TableEnumOrId; }
            set { SetField(ref __TableEnumOrId, value, "TableEnumOrId"); }
        }
        private System.Boolean __UsageBeforeInsert;
        [EntityField(false)]
        public System.Boolean UsageBeforeInsert
        {
            get { return __UsageBeforeInsert; }
            set { SetField(ref __UsageBeforeInsert, value, "UsageBeforeInsert"); }
        }
        private System.Boolean __UsageAfterInsert;
        [EntityField(false)]
        public System.Boolean UsageAfterInsert
        {
            get { return __UsageAfterInsert; }
            set { SetField(ref __UsageAfterInsert, value, "UsageAfterInsert"); }
        }
        private System.Boolean __UsageBeforeUpdate;
        [EntityField(false)]
        public System.Boolean UsageBeforeUpdate
        {
            get { return __UsageBeforeUpdate; }
            set { SetField(ref __UsageBeforeUpdate, value, "UsageBeforeUpdate"); }
        }
        private System.Boolean __UsageAfterUpdate;
        [EntityField(false)]
        public System.Boolean UsageAfterUpdate
        {
            get { return __UsageAfterUpdate; }
            set { SetField(ref __UsageAfterUpdate, value, "UsageAfterUpdate"); }
        }
        private System.Boolean __UsageBeforeDelete;
        [EntityField(false)]
        public System.Boolean UsageBeforeDelete
        {
            get { return __UsageBeforeDelete; }
            set { SetField(ref __UsageBeforeDelete, value, "UsageBeforeDelete"); }
        }
        private System.Boolean __UsageAfterDelete;
        [EntityField(false)]
        public System.Boolean UsageAfterDelete
        {
            get { return __UsageAfterDelete; }
            set { SetField(ref __UsageAfterDelete, value, "UsageAfterDelete"); }
        }
        private System.Boolean __UsageIsBulk;
        [EntityField(false)]
        public System.Boolean UsageIsBulk
        {
            get { return __UsageIsBulk; }
            set { SetField(ref __UsageIsBulk, value, "UsageIsBulk"); }
        }
        private System.Boolean __UsageAfterUndelete;
        [EntityField(false)]
        public System.Boolean UsageAfterUndelete
        {
            get { return __UsageAfterUndelete; }
            set { SetField(ref __UsageAfterUndelete, value, "UsageAfterUndelete"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private PickApexTriggerStatus __Status;
        [EntityField(false)]
        public PickApexTriggerStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Boolean __IsValid;
        [EntityField(false)]
        public System.Boolean IsValid
        {
            get { return __IsValid; }
            set { SetField(ref __IsValid, value, "IsValid"); }
        }
        private System.Double? __BodyCrc;
        [EntityField(true)]
        public System.Double? BodyCrc
        {
            get { return __BodyCrc; }
            set { SetField(ref __BodyCrc, value, "BodyCrc"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.Int32 __LengthWithoutComments;
        [EntityField(false)]
        public System.Int32 LengthWithoutComments
        {
            get { return __LengthWithoutComments; }
            set { SetField(ref __LengthWithoutComments, value, "LengthWithoutComments"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("AppMenuItem")]
    public class AppMenuItem : ISalesforceEntity
    {
    [JsonConstructor]
        private AppMenuItem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AppMenuItem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __SortOrder;
        [EntityField(false)]
        public System.Int32 SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Label;
        [EntityField(true)]
        public System.String Label
        {
            get { return __Label; }
            set { SetField(ref __Label, value, "Label"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __StartUrl;
        [EntityField(true)]
        public System.String StartUrl
        {
            get { return __StartUrl; }
            set { SetField(ref __StartUrl, value, "StartUrl"); }
        }
        private System.String __MobileStartUrl;
        [EntityField(true)]
        public System.String MobileStartUrl
        {
            get { return __MobileStartUrl; }
            set { SetField(ref __MobileStartUrl, value, "MobileStartUrl"); }
        }
        private System.String __LogoUrl;
        [EntityField(true)]
        public System.String LogoUrl
        {
            get { return __LogoUrl; }
            set { SetField(ref __LogoUrl, value, "LogoUrl"); }
        }
        private System.String __IconUrl;
        [EntityField(true)]
        public System.String IconUrl
        {
            get { return __IconUrl; }
            set { SetField(ref __IconUrl, value, "IconUrl"); }
        }
        private System.String __InfoUrl;
        [EntityField(true)]
        public System.String InfoUrl
        {
            get { return __InfoUrl; }
            set { SetField(ref __InfoUrl, value, "InfoUrl"); }
        }
        private System.Boolean __IsUsingAdminAuthorization;
        [EntityField(false)]
        public System.Boolean IsUsingAdminAuthorization
        {
            get { return __IsUsingAdminAuthorization; }
            set { SetField(ref __IsUsingAdminAuthorization, value, "IsUsingAdminAuthorization"); }
        }
        private PickAppMenuItemMobilePlatform __MobilePlatform;
        [EntityField(true)]
        public PickAppMenuItemMobilePlatform MobilePlatform
        {
            get { return __MobilePlatform; }
            set { SetField(ref __MobilePlatform, value, "MobilePlatform"); }
        }
        private System.String __MobileMinOsVer;
        [EntityField(true)]
        public System.String MobileMinOsVer
        {
            get { return __MobileMinOsVer; }
            set { SetField(ref __MobileMinOsVer, value, "MobileMinOsVer"); }
        }
        private System.String __MobileDeviceType;
        [EntityField(true)]
        public System.String MobileDeviceType
        {
            get { return __MobileDeviceType; }
            set { SetField(ref __MobileDeviceType, value, "MobileDeviceType"); }
        }
        private System.Boolean __IsRegisteredDeviceOnly;
        [EntityField(false)]
        public System.Boolean IsRegisteredDeviceOnly
        {
            get { return __IsRegisteredDeviceOnly; }
            set { SetField(ref __IsRegisteredDeviceOnly, value, "IsRegisteredDeviceOnly"); }
        }
        private System.String __MobileAppVer;
        [EntityField(true)]
        public System.String MobileAppVer
        {
            get { return __MobileAppVer; }
            set { SetField(ref __MobileAppVer, value, "MobileAppVer"); }
        }
        private System.DateTime? __MobileAppInstalledDate;
        [EntityField(true)]
        public System.DateTime? MobileAppInstalledDate
        {
            get { return __MobileAppInstalledDate; }
            set { SetField(ref __MobileAppInstalledDate, value, "MobileAppInstalledDate"); }
        }
        private System.String __MobileAppInstalledVersion;
        [EntityField(true)]
        public System.String MobileAppInstalledVersion
        {
            get { return __MobileAppInstalledVersion; }
            set { SetField(ref __MobileAppInstalledVersion, value, "MobileAppInstalledVersion"); }
        }
        private System.String __MobileAppBinaryId;
        [EntityField(true)]
        public System.String MobileAppBinaryId
        {
            get { return __MobileAppBinaryId; }
            set { SetField(ref __MobileAppBinaryId, value, "MobileAppBinaryId"); }
        }
        private System.String __MobileAppInstallUrl;
        [EntityField(true)]
        public System.String MobileAppInstallUrl
        {
            get { return __MobileAppInstallUrl; }
            set { SetField(ref __MobileAppInstallUrl, value, "MobileAppInstallUrl"); }
        }
        private System.Boolean __CanvasEnabled;
        [EntityField(false)]
        public System.Boolean CanvasEnabled
        {
            get { return __CanvasEnabled; }
            set { SetField(ref __CanvasEnabled, value, "CanvasEnabled"); }
        }
        private System.String __CanvasReferenceId;
        [EntityField(true)]
        public System.String CanvasReferenceId
        {
            get { return __CanvasReferenceId; }
            set { SetField(ref __CanvasReferenceId, value, "CanvasReferenceId"); }
        }
        private System.String __CanvasUrl;
        [EntityField(true)]
        public System.String CanvasUrl
        {
            get { return __CanvasUrl; }
            set { SetField(ref __CanvasUrl, value, "CanvasUrl"); }
        }
        private PickAppMenuItemCanvasAccessMethod __CanvasAccessMethod;
        [EntityField(true)]
        public PickAppMenuItemCanvasAccessMethod CanvasAccessMethod
        {
            get { return __CanvasAccessMethod; }
            set { SetField(ref __CanvasAccessMethod, value, "CanvasAccessMethod"); }
        }
        private System.String __CanvasSelectedLocations;
        [EntityField(true)]
        public System.String CanvasSelectedLocations
        {
            get { return __CanvasSelectedLocations; }
            set { SetField(ref __CanvasSelectedLocations, value, "CanvasSelectedLocations"); }
        }
        private System.String __CanvasOptions;
        [EntityField(true)]
        public System.String CanvasOptions
        {
            get { return __CanvasOptions; }
            set { SetField(ref __CanvasOptions, value, "CanvasOptions"); }
        }
        private PickAppMenuItemType __Type;
        [EntityField(true)]
        public PickAppMenuItemType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
    }
    [EntityName("Asset")]
    public class Asset : ISalesforceEntity
    {
    [JsonConstructor]
        private Asset(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Asset()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __Product2Id;
        [EntityField(true)]
        public System.String Product2Id
        {
            get { return __Product2Id; }
            set { SetField(ref __Product2Id, value, "Product2Id"); }
        }
        private System.Boolean __IsCompetitorProduct;
        [EntityField(false)]
        public System.Boolean IsCompetitorProduct
        {
            get { return __IsCompetitorProduct; }
            set { SetField(ref __IsCompetitorProduct, value, "IsCompetitorProduct"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __SerialNumber;
        [EntityField(true)]
        public System.String SerialNumber
        {
            get { return __SerialNumber; }
            set { SetField(ref __SerialNumber, value, "SerialNumber"); }
        }
        private System.DateTime? __InstallDate;
        [EntityField(true)]
        public System.DateTime? InstallDate
        {
            get { return __InstallDate; }
            set { SetField(ref __InstallDate, value, "InstallDate"); }
        }
        private System.DateTime? __PurchaseDate;
        [EntityField(true)]
        public System.DateTime? PurchaseDate
        {
            get { return __PurchaseDate; }
            set { SetField(ref __PurchaseDate, value, "PurchaseDate"); }
        }
        private System.DateTime? __UsageEndDate;
        [EntityField(true)]
        public System.DateTime? UsageEndDate
        {
            get { return __UsageEndDate; }
            set { SetField(ref __UsageEndDate, value, "UsageEndDate"); }
        }
        private PickAssetStatus __Status;
        [EntityField(true)]
        public PickAssetStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __Price;
        [EntityField(true)]
        public System.String Price
        {
            get { return __Price; }
            set { SetField(ref __Price, value, "Price"); }
        }
        private System.Double? __Quantity;
        [EntityField(true)]
        public System.Double? Quantity
        {
            get { return __Quantity; }
            set { SetField(ref __Quantity, value, "Quantity"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Asset,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Asset,AssetFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AssetId")]
        public RelationShip<Asset,AssetHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Asset,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Asset,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AssetId")]
        public RelationShip<Asset,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Asset,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Asset,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Asset,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Asset,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Asset,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Asset,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Asset,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Asset,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Asset,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Asset,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Asset,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("AssetFeed")]
    public class AssetFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private AssetFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AssetFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickAssetFeedType __Type;
        [EntityField(true)]
        public PickAssetFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<AssetFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<AssetFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<AssetFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("AssetHistory")]
    public class AssetHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private AssetHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AssetHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __AssetId;
        [EntityField(false)]
        public System.String AssetId
        {
            get { return __AssetId; }
            set { SetField(ref __AssetId, value, "AssetId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickAssetHistoryField __Field;
        [EntityField(false)]
        public PickAssetHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("AssignmentRule")]
    public class AssignmentRule : ISalesforceEntity
    {
    [JsonConstructor]
        private AssignmentRule(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AssignmentRule()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickAssignmentRuleSobjectType __SobjectType;
        [EntityField(true)]
        public PickAssignmentRuleSobjectType SobjectType
        {
            get { return __SobjectType; }
            set { SetField(ref __SobjectType, value, "SobjectType"); }
        }
        private System.Boolean __Active;
        [EntityField(false)]
        public System.Boolean Active
        {
            get { return __Active; }
            set { SetField(ref __Active, value, "Active"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("AsyncApexJob")]
    public class AsyncApexJob : ISalesforceEntity
    {
    [JsonConstructor]
        private AsyncApexJob(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AsyncApexJob()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private PickAsyncApexJobJobType __JobType;
        [EntityField(false)]
        public PickAsyncApexJobJobType JobType
        {
            get { return __JobType; }
            set { SetField(ref __JobType, value, "JobType"); }
        }
        private System.String __ApexClassId;
        [EntityField(true)]
        public System.String ApexClassId
        {
            get { return __ApexClassId; }
            set { SetField(ref __ApexClassId, value, "ApexClassId"); }
        }
        private PickAsyncApexJobStatus __Status;
        [EntityField(false)]
        public PickAsyncApexJobStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Int32 __JobItemsProcessed;
        [EntityField(false)]
        public System.Int32 JobItemsProcessed
        {
            get { return __JobItemsProcessed; }
            set { SetField(ref __JobItemsProcessed, value, "JobItemsProcessed"); }
        }
        private System.Int32? __TotalJobItems;
        [EntityField(true)]
        public System.Int32? TotalJobItems
        {
            get { return __TotalJobItems; }
            set { SetField(ref __TotalJobItems, value, "TotalJobItems"); }
        }
        private System.Int32? __NumberOfErrors;
        [EntityField(true)]
        public System.Int32? NumberOfErrors
        {
            get { return __NumberOfErrors; }
            set { SetField(ref __NumberOfErrors, value, "NumberOfErrors"); }
        }
        private System.DateTime? __CompletedDate;
        [EntityField(true)]
        public System.DateTime? CompletedDate
        {
            get { return __CompletedDate; }
            set { SetField(ref __CompletedDate, value, "CompletedDate"); }
        }
        private System.String __MethodName;
        [EntityField(true)]
        public System.String MethodName
        {
            get { return __MethodName; }
            set { SetField(ref __MethodName, value, "MethodName"); }
        }
        private System.String __ExtendedStatus;
        [EntityField(true)]
        public System.String ExtendedStatus
        {
            get { return __ExtendedStatus; }
            set { SetField(ref __ExtendedStatus, value, "ExtendedStatus"); }
        }
        private System.String __ParentJobId;
        [EntityField(true)]
        public System.String ParentJobId
        {
            get { return __ParentJobId; }
            set { SetField(ref __ParentJobId, value, "ParentJobId"); }
        }
        private System.String __LastProcessed;
        [EntityField(true)]
        public System.String LastProcessed
        {
            get { return __LastProcessed; }
            set { SetField(ref __LastProcessed, value, "LastProcessed"); }
        }
        private System.Int32? __LastProcessedOffset;
        [EntityField(true)]
        public System.Int32? LastProcessedOffset
        {
            get { return __LastProcessedOffset; }
            set { SetField(ref __LastProcessedOffset, value, "LastProcessedOffset"); }
        }
    }
    [EntityName("AttachedContentDocument")]
    public class AttachedContentDocument : ISalesforceEntity
    {
    [JsonConstructor]
        private AttachedContentDocument(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AttachedContentDocument()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __LinkedEntityId;
        [EntityField(false)]
        public System.String LinkedEntityId
        {
            get { return __LinkedEntityId; }
            set { SetField(ref __LinkedEntityId, value, "LinkedEntityId"); }
        }
        private System.String __ContentDocumentId;
        [EntityField(true)]
        public System.String ContentDocumentId
        {
            get { return __ContentDocumentId; }
            set { SetField(ref __ContentDocumentId, value, "ContentDocumentId"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __FileType;
        [EntityField(true)]
        public System.String FileType
        {
            get { return __FileType; }
            set { SetField(ref __FileType, value, "FileType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
    }
    [EntityName("Attachment")]
    public class Attachment : ISalesforceEntity
    {
    [JsonConstructor]
        private Attachment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Attachment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __BodyLength;
        [EntityField(true)]
        public System.Int32? BodyLength
        {
            get { return __BodyLength; }
            set { SetField(ref __BodyLength, value, "BodyLength"); }
        }
        private System.String __Body;
        [EntityField(false)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
    }
    [EntityName("AuraDefinition")]
    public class AuraDefinition : ISalesforceEntity
    {
    [JsonConstructor]
        private AuraDefinition(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AuraDefinition()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __AuraDefinitionBundleId;
        [EntityField(false)]
        public System.String AuraDefinitionBundleId
        {
            get { return __AuraDefinitionBundleId; }
            set { SetField(ref __AuraDefinitionBundleId, value, "AuraDefinitionBundleId"); }
        }
        private PickAuraDefinitionDefType __DefType;
        [EntityField(false)]
        public PickAuraDefinitionDefType DefType
        {
            get { return __DefType; }
            set { SetField(ref __DefType, value, "DefType"); }
        }
        private PickAuraDefinitionFormat __Format;
        [EntityField(false)]
        public PickAuraDefinitionFormat Format
        {
            get { return __Format; }
            set { SetField(ref __Format, value, "Format"); }
        }
        private System.String __Source;
        [EntityField(false)]
        public System.String Source
        {
            get { return __Source; }
            set { SetField(ref __Source, value, "Source"); }
        }
    }
    [EntityName("AuraDefinitionBundle")]
    public class AuraDefinitionBundle : ISalesforceEntity
    {
    [JsonConstructor]
        private AuraDefinitionBundle(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AuraDefinitionBundle()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickAuraDefinitionBundleLanguage __Language;
        [EntityField(true)]
        public PickAuraDefinitionBundleLanguage Language
        {
            get { return __Language; }
            set { SetField(ref __Language, value, "Language"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private System.String __Description;
        [EntityField(false)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
    }
    [EntityName("AuthProvider")]
    public class AuthProvider : ISalesforceEntity
    {
    [JsonConstructor]
        private AuthProvider(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AuthProvider()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickAuthProviderProviderType __ProviderType;
        [EntityField(false)]
        public PickAuthProviderProviderType ProviderType
        {
            get { return __ProviderType; }
            set { SetField(ref __ProviderType, value, "ProviderType"); }
        }
        private System.String __FriendlyName;
        [EntityField(false)]
        public System.String FriendlyName
        {
            get { return __FriendlyName; }
            set { SetField(ref __FriendlyName, value, "FriendlyName"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __RegistrationHandlerId;
        [EntityField(true)]
        public System.String RegistrationHandlerId
        {
            get { return __RegistrationHandlerId; }
            set { SetField(ref __RegistrationHandlerId, value, "RegistrationHandlerId"); }
        }
        private System.String __ExecutionUserId;
        [EntityField(true)]
        public System.String ExecutionUserId
        {
            get { return __ExecutionUserId; }
            set { SetField(ref __ExecutionUserId, value, "ExecutionUserId"); }
        }
        private System.String __ConsumerKey;
        [EntityField(true)]
        public System.String ConsumerKey
        {
            get { return __ConsumerKey; }
            set { SetField(ref __ConsumerKey, value, "ConsumerKey"); }
        }
        private System.String __ConsumerSecret;
        [EntityField(true)]
        public System.String ConsumerSecret
        {
            get { return __ConsumerSecret; }
            set { SetField(ref __ConsumerSecret, value, "ConsumerSecret"); }
        }
        private System.String __ErrorUrl;
        [EntityField(true)]
        public System.String ErrorUrl
        {
            get { return __ErrorUrl; }
            set { SetField(ref __ErrorUrl, value, "ErrorUrl"); }
        }
        private System.String __AuthorizeUrl;
        [EntityField(true)]
        public System.String AuthorizeUrl
        {
            get { return __AuthorizeUrl; }
            set { SetField(ref __AuthorizeUrl, value, "AuthorizeUrl"); }
        }
        private System.String __TokenUrl;
        [EntityField(true)]
        public System.String TokenUrl
        {
            get { return __TokenUrl; }
            set { SetField(ref __TokenUrl, value, "TokenUrl"); }
        }
        private System.String __UserInfoUrl;
        [EntityField(true)]
        public System.String UserInfoUrl
        {
            get { return __UserInfoUrl; }
            set { SetField(ref __UserInfoUrl, value, "UserInfoUrl"); }
        }
        private System.String __DefaultScopes;
        [EntityField(true)]
        public System.String DefaultScopes
        {
            get { return __DefaultScopes; }
            set { SetField(ref __DefaultScopes, value, "DefaultScopes"); }
        }
        private System.String __IdTokenIssuer;
        [EntityField(true)]
        public System.String IdTokenIssuer
        {
            get { return __IdTokenIssuer; }
            set { SetField(ref __IdTokenIssuer, value, "IdTokenIssuer"); }
        }
        private System.Boolean __OptionsSendAccessTokenInHeader;
        [EntityField(false)]
        public System.Boolean OptionsSendAccessTokenInHeader
        {
            get { return __OptionsSendAccessTokenInHeader; }
            set { SetField(ref __OptionsSendAccessTokenInHeader, value, "OptionsSendAccessTokenInHeader"); }
        }
        private System.Boolean __OptionsSendClientCredentialsInHeader;
        [EntityField(false)]
        public System.Boolean OptionsSendClientCredentialsInHeader
        {
            get { return __OptionsSendClientCredentialsInHeader; }
            set { SetField(ref __OptionsSendClientCredentialsInHeader, value, "OptionsSendClientCredentialsInHeader"); }
        }
    }
    [EntityName("AuthSession")]
    public class AuthSession : ISalesforceEntity
    {
    [JsonConstructor]
        private AuthSession(string hack)
        {
            trackPropertyUpdates = false;
        }

        public AuthSession()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UsersId;
        [EntityField(true)]
        public System.String UsersId
        {
            get { return __UsersId; }
            set { SetField(ref __UsersId, value, "UsersId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.Int32 __NumSecondsValid;
        [EntityField(false)]
        public System.Int32 NumSecondsValid
        {
            get { return __NumSecondsValid; }
            set { SetField(ref __NumSecondsValid, value, "NumSecondsValid"); }
        }
        private PickAuthSessionUserType __UserType;
        [EntityField(false)]
        public PickAuthSessionUserType UserType
        {
            get { return __UserType; }
            set { SetField(ref __UserType, value, "UserType"); }
        }
        private System.String __SourceIp;
        [EntityField(false)]
        public System.String SourceIp
        {
            get { return __SourceIp; }
            set { SetField(ref __SourceIp, value, "SourceIp"); }
        }
        private PickAuthSessionLoginType __LoginType;
        [EntityField(true)]
        public PickAuthSessionLoginType LoginType
        {
            get { return __LoginType; }
            set { SetField(ref __LoginType, value, "LoginType"); }
        }
        private PickAuthSessionSessionType __SessionType;
        [EntityField(true)]
        public PickAuthSessionSessionType SessionType
        {
            get { return __SessionType; }
            set { SetField(ref __SessionType, value, "SessionType"); }
        }
        private PickAuthSessionSessionSecurityLevel __SessionSecurityLevel;
        [EntityField(true)]
        public PickAuthSessionSessionSecurityLevel SessionSecurityLevel
        {
            get { return __SessionSecurityLevel; }
            set { SetField(ref __SessionSecurityLevel, value, "SessionSecurityLevel"); }
        }
    }
    [EntityName("BrandTemplate")]
    public class BrandTemplate : ISalesforceEntity
    {
    [JsonConstructor]
        private BrandTemplate(string hack)
        {
            trackPropertyUpdates = false;
        }

        public BrandTemplate()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __Value;
        [EntityField(false)]
        public System.String Value
        {
            get { return __Value; }
            set { SetField(ref __Value, value, "Value"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("BusinessHours")]
    public class BusinessHours : ISalesforceEntity
    {
    [JsonConstructor]
        private BusinessHours(string hack)
        {
            trackPropertyUpdates = false;
        }

        public BusinessHours()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.String __SundayStartTime;
        [EntityField(true)]
        public System.String SundayStartTime
        {
            get { return __SundayStartTime; }
            set { SetField(ref __SundayStartTime, value, "SundayStartTime"); }
        }
        private System.String __SundayEndTime;
        [EntityField(true)]
        public System.String SundayEndTime
        {
            get { return __SundayEndTime; }
            set { SetField(ref __SundayEndTime, value, "SundayEndTime"); }
        }
        private System.String __MondayStartTime;
        [EntityField(true)]
        public System.String MondayStartTime
        {
            get { return __MondayStartTime; }
            set { SetField(ref __MondayStartTime, value, "MondayStartTime"); }
        }
        private System.String __MondayEndTime;
        [EntityField(true)]
        public System.String MondayEndTime
        {
            get { return __MondayEndTime; }
            set { SetField(ref __MondayEndTime, value, "MondayEndTime"); }
        }
        private System.String __TuesdayStartTime;
        [EntityField(true)]
        public System.String TuesdayStartTime
        {
            get { return __TuesdayStartTime; }
            set { SetField(ref __TuesdayStartTime, value, "TuesdayStartTime"); }
        }
        private System.String __TuesdayEndTime;
        [EntityField(true)]
        public System.String TuesdayEndTime
        {
            get { return __TuesdayEndTime; }
            set { SetField(ref __TuesdayEndTime, value, "TuesdayEndTime"); }
        }
        private System.String __WednesdayStartTime;
        [EntityField(true)]
        public System.String WednesdayStartTime
        {
            get { return __WednesdayStartTime; }
            set { SetField(ref __WednesdayStartTime, value, "WednesdayStartTime"); }
        }
        private System.String __WednesdayEndTime;
        [EntityField(true)]
        public System.String WednesdayEndTime
        {
            get { return __WednesdayEndTime; }
            set { SetField(ref __WednesdayEndTime, value, "WednesdayEndTime"); }
        }
        private System.String __ThursdayStartTime;
        [EntityField(true)]
        public System.String ThursdayStartTime
        {
            get { return __ThursdayStartTime; }
            set { SetField(ref __ThursdayStartTime, value, "ThursdayStartTime"); }
        }
        private System.String __ThursdayEndTime;
        [EntityField(true)]
        public System.String ThursdayEndTime
        {
            get { return __ThursdayEndTime; }
            set { SetField(ref __ThursdayEndTime, value, "ThursdayEndTime"); }
        }
        private System.String __FridayStartTime;
        [EntityField(true)]
        public System.String FridayStartTime
        {
            get { return __FridayStartTime; }
            set { SetField(ref __FridayStartTime, value, "FridayStartTime"); }
        }
        private System.String __FridayEndTime;
        [EntityField(true)]
        public System.String FridayEndTime
        {
            get { return __FridayEndTime; }
            set { SetField(ref __FridayEndTime, value, "FridayEndTime"); }
        }
        private System.String __SaturdayStartTime;
        [EntityField(true)]
        public System.String SaturdayStartTime
        {
            get { return __SaturdayStartTime; }
            set { SetField(ref __SaturdayStartTime, value, "SaturdayStartTime"); }
        }
        private System.String __SaturdayEndTime;
        [EntityField(true)]
        public System.String SaturdayEndTime
        {
            get { return __SaturdayEndTime; }
            set { SetField(ref __SaturdayEndTime, value, "SaturdayEndTime"); }
        }
        private PickBusinessHoursTimeZoneSidKey __TimeZoneSidKey;
        [EntityField(false)]
        public PickBusinessHoursTimeZoneSidKey TimeZoneSidKey
        {
            get { return __TimeZoneSidKey; }
            set { SetField(ref __TimeZoneSidKey, value, "TimeZoneSidKey"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
    }
    [EntityName("BusinessProcess")]
    public class BusinessProcess : ISalesforceEntity
    {
    [JsonConstructor]
        private BusinessProcess(string hack)
        {
            trackPropertyUpdates = false;
        }

        public BusinessProcess()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickBusinessProcessTableEnumOrId __TableEnumOrId;
        [EntityField(false)]
        public PickBusinessProcessTableEnumOrId TableEnumOrId
        {
            get { return __TableEnumOrId; }
            set { SetField(ref __TableEnumOrId, value, "TableEnumOrId"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CallCenter")]
    public class CallCenter : ISalesforceEntity
    {
    [JsonConstructor]
        private CallCenter(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CallCenter()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __InternalName;
        [EntityField(false)]
        public System.String InternalName
        {
            get { return __InternalName; }
            set { SetField(ref __InternalName, value, "InternalName"); }
        }
        private System.Double? __Version;
        [EntityField(true)]
        public System.Double? Version
        {
            get { return __Version; }
            set { SetField(ref __Version, value, "Version"); }
        }
        private System.String __AdapterUrl;
        [EntityField(true)]
        public System.String AdapterUrl
        {
            get { return __AdapterUrl; }
            set { SetField(ref __AdapterUrl, value, "AdapterUrl"); }
        }
        private System.String __CustomSettings;
        [EntityField(true)]
        public System.String CustomSettings
        {
            get { return __CustomSettings; }
            set { SetField(ref __CustomSettings, value, "CustomSettings"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
    }
    [EntityName("Campaign")]
    public class Campaign : ISalesforceEntity
    {
    [JsonConstructor]
        private Campaign(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Campaign()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickCampaignType __Type;
        [EntityField(true)]
        public PickCampaignType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private PickCampaignStatus __Status;
        [EntityField(true)]
        public PickCampaignStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.DateTime? __StartDate;
        [EntityField(true)]
        public System.DateTime? StartDate
        {
            get { return __StartDate; }
            set { SetField(ref __StartDate, value, "StartDate"); }
        }
        private System.DateTime? __EndDate;
        [EntityField(true)]
        public System.DateTime? EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.String __ExpectedRevenue;
        [EntityField(true)]
        public System.String ExpectedRevenue
        {
            get { return __ExpectedRevenue; }
            set { SetField(ref __ExpectedRevenue, value, "ExpectedRevenue"); }
        }
        private System.String __BudgetedCost;
        [EntityField(true)]
        public System.String BudgetedCost
        {
            get { return __BudgetedCost; }
            set { SetField(ref __BudgetedCost, value, "BudgetedCost"); }
        }
        private System.String __ActualCost;
        [EntityField(true)]
        public System.String ActualCost
        {
            get { return __ActualCost; }
            set { SetField(ref __ActualCost, value, "ActualCost"); }
        }
        private System.String __ExpectedResponse;
        [EntityField(true)]
        public System.String ExpectedResponse
        {
            get { return __ExpectedResponse; }
            set { SetField(ref __ExpectedResponse, value, "ExpectedResponse"); }
        }
        private System.Double? __NumberSent;
        [EntityField(true)]
        public System.Double? NumberSent
        {
            get { return __NumberSent; }
            set { SetField(ref __NumberSent, value, "NumberSent"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Int32 __NumberOfLeads;
        [EntityField(false)]
        public System.Int32 NumberOfLeads
        {
            get { return __NumberOfLeads; }
            set { SetField(ref __NumberOfLeads, value, "NumberOfLeads"); }
        }
        private System.Int32 __NumberOfConvertedLeads;
        [EntityField(false)]
        public System.Int32 NumberOfConvertedLeads
        {
            get { return __NumberOfConvertedLeads; }
            set { SetField(ref __NumberOfConvertedLeads, value, "NumberOfConvertedLeads"); }
        }
        private System.Int32 __NumberOfContacts;
        [EntityField(false)]
        public System.Int32 NumberOfContacts
        {
            get { return __NumberOfContacts; }
            set { SetField(ref __NumberOfContacts, value, "NumberOfContacts"); }
        }
        private System.Int32 __NumberOfResponses;
        [EntityField(false)]
        public System.Int32 NumberOfResponses
        {
            get { return __NumberOfResponses; }
            set { SetField(ref __NumberOfResponses, value, "NumberOfResponses"); }
        }
        private System.Int32 __NumberOfOpportunities;
        [EntityField(false)]
        public System.Int32 NumberOfOpportunities
        {
            get { return __NumberOfOpportunities; }
            set { SetField(ref __NumberOfOpportunities, value, "NumberOfOpportunities"); }
        }
        private System.Int32 __NumberOfWonOpportunities;
        [EntityField(false)]
        public System.Int32 NumberOfWonOpportunities
        {
            get { return __NumberOfWonOpportunities; }
            set { SetField(ref __NumberOfWonOpportunities, value, "NumberOfWonOpportunities"); }
        }
        private System.String __AmountAllOpportunities;
        [EntityField(false)]
        public System.String AmountAllOpportunities
        {
            get { return __AmountAllOpportunities; }
            set { SetField(ref __AmountAllOpportunities, value, "AmountAllOpportunities"); }
        }
        private System.String __AmountWonOpportunities;
        [EntityField(false)]
        public System.String AmountWonOpportunities
        {
            get { return __AmountWonOpportunities; }
            set { SetField(ref __AmountWonOpportunities, value, "AmountWonOpportunities"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __CampaignMemberRecordTypeId;
        [EntityField(true)]
        public System.String CampaignMemberRecordTypeId
        {
            get { return __CampaignMemberRecordTypeId; }
            set { SetField(ref __CampaignMemberRecordTypeId, value, "CampaignMemberRecordTypeId"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Campaign,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Campaign,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Campaign,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Campaign,Campaign> ChildCampaigns
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Campaign,CampaignFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CampaignId")]
        public RelationShip<Campaign,CampaignMember> CampaignMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CampaignId")]
        public RelationShip<Campaign,CampaignMemberStatus> CampaignMemberStatuses
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CampaignId")]
        public RelationShip<Campaign,CampaignShare> Shares
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Campaign,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Campaign,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Campaign,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Campaign,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Campaign,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Campaign,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CampaignId")]
        public RelationShip<Campaign,Opportunity> Opportunities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Campaign,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Campaign,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Campaign,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Campaign,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("CampaignFeed")]
    public class CampaignFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private CampaignFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CampaignFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickCampaignFeedType __Type;
        [EntityField(true)]
        public PickCampaignFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CampaignFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CampaignFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CampaignFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("CampaignMember")]
    public class CampaignMember : ISalesforceEntity
    {
    [JsonConstructor]
        private CampaignMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CampaignMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CampaignId;
        [EntityField(false)]
        public System.String CampaignId
        {
            get { return __CampaignId; }
            set { SetField(ref __CampaignId, value, "CampaignId"); }
        }
        private System.String __LeadId;
        [EntityField(true)]
        public System.String LeadId
        {
            get { return __LeadId; }
            set { SetField(ref __LeadId, value, "LeadId"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private PickCampaignMemberStatus __Status;
        [EntityField(true)]
        public PickCampaignMemberStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Boolean __HasResponded;
        [EntityField(false)]
        public System.Boolean HasResponded
        {
            get { return __HasResponded; }
            set { SetField(ref __HasResponded, value, "HasResponded"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __FirstRespondedDate;
        [EntityField(true)]
        public System.DateTime? FirstRespondedDate
        {
            get { return __FirstRespondedDate; }
            set { SetField(ref __FirstRespondedDate, value, "FirstRespondedDate"); }
        }
    }
    [EntityName("CampaignMemberStatus")]
    public class CampaignMemberStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private CampaignMemberStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CampaignMemberStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CampaignId;
        [EntityField(false)]
        public System.String CampaignId
        {
            get { return __CampaignId; }
            set { SetField(ref __CampaignId, value, "CampaignId"); }
        }
        private System.String __Label;
        [EntityField(false)]
        public System.String Label
        {
            get { return __Label; }
            set { SetField(ref __Label, value, "Label"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __HasResponded;
        [EntityField(false)]
        public System.Boolean HasResponded
        {
            get { return __HasResponded; }
            set { SetField(ref __HasResponded, value, "HasResponded"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CampaignShare")]
    public class CampaignShare : ISalesforceEntity
    {
    [JsonConstructor]
        private CampaignShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CampaignShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CampaignId;
        [EntityField(false)]
        public System.String CampaignId
        {
            get { return __CampaignId; }
            set { SetField(ref __CampaignId, value, "CampaignId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickCampaignShareCampaignAccessLevel __CampaignAccessLevel;
        [EntityField(false)]
        public PickCampaignShareCampaignAccessLevel CampaignAccessLevel
        {
            get { return __CampaignAccessLevel; }
            set { SetField(ref __CampaignAccessLevel, value, "CampaignAccessLevel"); }
        }
        private PickCampaignShareRowCause __RowCause;
        [EntityField(true)]
        public PickCampaignShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("Case")]
    public class Case : ISalesforceEntity
    {
    [JsonConstructor]
        private Case(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Case()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CaseNumber;
        [EntityField(false)]
        public System.String CaseNumber
        {
            get { return __CaseNumber; }
            set { SetField(ref __CaseNumber, value, "CaseNumber"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __AssetId;
        [EntityField(true)]
        public System.String AssetId
        {
            get { return __AssetId; }
            set { SetField(ref __AssetId, value, "AssetId"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __SuppliedName;
        [EntityField(true)]
        public System.String SuppliedName
        {
            get { return __SuppliedName; }
            set { SetField(ref __SuppliedName, value, "SuppliedName"); }
        }
        private System.String __SuppliedEmail;
        [EntityField(true)]
        public System.String SuppliedEmail
        {
            get { return __SuppliedEmail; }
            set { SetField(ref __SuppliedEmail, value, "SuppliedEmail"); }
        }
        private System.String __SuppliedPhone;
        [EntityField(true)]
        public System.String SuppliedPhone
        {
            get { return __SuppliedPhone; }
            set { SetField(ref __SuppliedPhone, value, "SuppliedPhone"); }
        }
        private System.String __SuppliedCompany;
        [EntityField(true)]
        public System.String SuppliedCompany
        {
            get { return __SuppliedCompany; }
            set { SetField(ref __SuppliedCompany, value, "SuppliedCompany"); }
        }
        private PickCaseType __Type;
        [EntityField(true)]
        public PickCaseType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private PickCaseStatus __Status;
        [EntityField(true)]
        public PickCaseStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickCaseReason __Reason;
        [EntityField(true)]
        public PickCaseReason Reason
        {
            get { return __Reason; }
            set { SetField(ref __Reason, value, "Reason"); }
        }
        private PickCaseOrigin __Origin;
        [EntityField(true)]
        public PickCaseOrigin Origin
        {
            get { return __Origin; }
            set { SetField(ref __Origin, value, "Origin"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private PickCasePriority __Priority;
        [EntityField(true)]
        public PickCasePriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.DateTime? __ClosedDate;
        [EntityField(true)]
        public System.DateTime? ClosedDate
        {
            get { return __ClosedDate; }
            set { SetField(ref __ClosedDate, value, "ClosedDate"); }
        }
        private System.Boolean __IsEscalated;
        [EntityField(false)]
        public System.Boolean IsEscalated
        {
            get { return __IsEscalated; }
            set { SetField(ref __IsEscalated, value, "IsEscalated"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __EngineeringReqNumberc;
        [JsonProperty(PropertyName = "EngineeringReqNumber__c")]
        [EntityField(true)]
        public System.String EngineeringReqNumberc
        {
            get { return __EngineeringReqNumberc; }
            set { SetField(ref __EngineeringReqNumberc, value, "EngineeringReqNumber__c"); }
        }
        private PickCaseSLAViolation __SLAViolationc;
        [JsonProperty(PropertyName = "SLAViolation__c")]
        [EntityField(true)]
        public PickCaseSLAViolation SLAViolationc
        {
            get { return __SLAViolationc; }
            set { SetField(ref __SLAViolationc, value, "SLAViolation__c"); }
        }
        private PickCaseProduct __Productc;
        [JsonProperty(PropertyName = "Product__c")]
        [EntityField(true)]
        public PickCaseProduct Productc
        {
            get { return __Productc; }
            set { SetField(ref __Productc, value, "Product__c"); }
        }
        private PickCasePotentialLiability __PotentialLiabilityc;
        [JsonProperty(PropertyName = "PotentialLiability__c")]
        [EntityField(true)]
        public PickCasePotentialLiability PotentialLiabilityc
        {
            get { return __PotentialLiabilityc; }
            set { SetField(ref __PotentialLiabilityc, value, "PotentialLiability__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Case,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,CaseComment> CaseComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CasesId")]
        public RelationShip<Case,CaseContactRole> CaseContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,CaseFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CaseId")]
        public RelationShip<Case,CaseHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CaseId")]
        public RelationShip<Case,CaseShare> Shares
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CaseId")]
        public RelationShip<Case,CaseSolution> CaseSolutions
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,CaseTeamMember> TeamMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,CaseTeamTemplateRecord> TeamTemplateRecords
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Case,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Case,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,EmailMessage> EmailMessages
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Case,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Case,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Case,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Case,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Case,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("CaseComment")]
    public class CaseComment : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseComment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseComment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.Boolean __IsPublished;
        [EntityField(false)]
        public System.Boolean IsPublished
        {
            get { return __IsPublished; }
            set { SetField(ref __IsPublished, value, "IsPublished"); }
        }
        private System.String __CommentBody;
        [EntityField(true)]
        public System.String CommentBody
        {
            get { return __CommentBody; }
            set { SetField(ref __CommentBody, value, "CommentBody"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("CaseContactRole")]
    public class CaseContactRole : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseContactRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseContactRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CasesId;
        [EntityField(false)]
        public System.String CasesId
        {
            get { return __CasesId; }
            set { SetField(ref __CasesId, value, "CasesId"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private PickCaseContactRoleRole __Role;
        [EntityField(true)]
        public PickCaseContactRoleRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("CaseFeed")]
    public class CaseFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickCaseFeedType __Type;
        [EntityField(true)]
        public PickCaseFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CaseFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CaseFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CaseFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("CaseHistory")]
    public class CaseHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __CaseId;
        [EntityField(false)]
        public System.String CaseId
        {
            get { return __CaseId; }
            set { SetField(ref __CaseId, value, "CaseId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickCaseHistoryField __Field;
        [EntityField(false)]
        public PickCaseHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("CaseShare")]
    public class CaseShare : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CaseId;
        [EntityField(false)]
        public System.String CaseId
        {
            get { return __CaseId; }
            set { SetField(ref __CaseId, value, "CaseId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickCaseShareCaseAccessLevel __CaseAccessLevel;
        [EntityField(false)]
        public PickCaseShareCaseAccessLevel CaseAccessLevel
        {
            get { return __CaseAccessLevel; }
            set { SetField(ref __CaseAccessLevel, value, "CaseAccessLevel"); }
        }
        private PickCaseShareRowCause __RowCause;
        [EntityField(true)]
        public PickCaseShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("CaseSolution")]
    public class CaseSolution : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseSolution(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseSolution()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CaseId;
        [EntityField(false)]
        public System.String CaseId
        {
            get { return __CaseId; }
            set { SetField(ref __CaseId, value, "CaseId"); }
        }
        private System.String __SolutionId;
        [EntityField(false)]
        public System.String SolutionId
        {
            get { return __SolutionId; }
            set { SetField(ref __SolutionId, value, "SolutionId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("CaseStatus")]
    public class CaseStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CaseTeamMember")]
    public class CaseTeamMember : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseTeamMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseTeamMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __MemberId;
        [EntityField(false)]
        public System.String MemberId
        {
            get { return __MemberId; }
            set { SetField(ref __MemberId, value, "MemberId"); }
        }
        private System.String __TeamTemplateMemberId;
        [EntityField(true)]
        public System.String TeamTemplateMemberId
        {
            get { return __TeamTemplateMemberId; }
            set { SetField(ref __TeamTemplateMemberId, value, "TeamTemplateMemberId"); }
        }
        private System.String __TeamRoleId;
        [EntityField(false)]
        public System.String TeamRoleId
        {
            get { return __TeamRoleId; }
            set { SetField(ref __TeamRoleId, value, "TeamRoleId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CaseTeamRole")]
    public class CaseTeamRole : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseTeamRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseTeamRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickCaseTeamRoleAccessLevel __AccessLevel;
        [EntityField(false)]
        public PickCaseTeamRoleAccessLevel AccessLevel
        {
            get { return __AccessLevel; }
            set { SetField(ref __AccessLevel, value, "AccessLevel"); }
        }
        private System.Boolean __PreferencesVisibleInCSP;
        [EntityField(false)]
        public System.Boolean PreferencesVisibleInCSP
        {
            get { return __PreferencesVisibleInCSP; }
            set { SetField(ref __PreferencesVisibleInCSP, value, "PreferencesVisibleInCSP"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CaseTeamTemplate")]
    public class CaseTeamTemplate : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseTeamTemplate(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseTeamTemplate()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CaseTeamTemplateMember")]
    public class CaseTeamTemplateMember : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseTeamTemplateMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseTeamTemplateMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __TeamTemplateId;
        [EntityField(false)]
        public System.String TeamTemplateId
        {
            get { return __TeamTemplateId; }
            set { SetField(ref __TeamTemplateId, value, "TeamTemplateId"); }
        }
        private System.String __MemberId;
        [EntityField(false)]
        public System.String MemberId
        {
            get { return __MemberId; }
            set { SetField(ref __MemberId, value, "MemberId"); }
        }
        private System.String __TeamRoleId;
        [EntityField(true)]
        public System.String TeamRoleId
        {
            get { return __TeamRoleId; }
            set { SetField(ref __TeamRoleId, value, "TeamRoleId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CaseTeamTemplateRecord")]
    public class CaseTeamTemplateRecord : ISalesforceEntity
    {
    [JsonConstructor]
        private CaseTeamTemplateRecord(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CaseTeamTemplateRecord()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __TeamTemplateId;
        [EntityField(false)]
        public System.String TeamTemplateId
        {
            get { return __TeamTemplateId; }
            set { SetField(ref __TeamTemplateId, value, "TeamTemplateId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CategoryData")]
    public class CategoryData : ISalesforceEntity
    {
    [JsonConstructor]
        private CategoryData(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CategoryData()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CategoryNodeId;
        [EntityField(false)]
        public System.String CategoryNodeId
        {
            get { return __CategoryNodeId; }
            set { SetField(ref __CategoryNodeId, value, "CategoryNodeId"); }
        }
        private System.String __RelatedSobjectId;
        [EntityField(false)]
        public System.String RelatedSobjectId
        {
            get { return __RelatedSobjectId; }
            set { SetField(ref __RelatedSobjectId, value, "RelatedSobjectId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CategoryNode")]
    public class CategoryNode : ISalesforceEntity
    {
    [JsonConstructor]
        private CategoryNode(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CategoryNode()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private PickCategoryNodeSortStyle __SortStyle;
        [EntityField(false)]
        public PickCategoryNodeSortStyle SortStyle
        {
            get { return __SortStyle; }
            set { SetField(ref __SortStyle, value, "SortStyle"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ChatterActivity")]
    public class ChatterActivity : ISalesforceEntity
    {
    [JsonConstructor]
        private ChatterActivity(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ChatterActivity()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.Int32 __PostCount;
        [EntityField(false)]
        public System.Int32 PostCount
        {
            get { return __PostCount; }
            set { SetField(ref __PostCount, value, "PostCount"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __CommentReceivedCount;
        [EntityField(false)]
        public System.Int32 CommentReceivedCount
        {
            get { return __CommentReceivedCount; }
            set { SetField(ref __CommentReceivedCount, value, "CommentReceivedCount"); }
        }
        private System.Int32 __LikeReceivedCount;
        [EntityField(false)]
        public System.Int32 LikeReceivedCount
        {
            get { return __LikeReceivedCount; }
            set { SetField(ref __LikeReceivedCount, value, "LikeReceivedCount"); }
        }
        private System.Int32 __InfluenceRawRank;
        [EntityField(false)]
        public System.Int32 InfluenceRawRank
        {
            get { return __InfluenceRawRank; }
            set { SetField(ref __InfluenceRawRank, value, "InfluenceRawRank"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ClientBrowser")]
    public class ClientBrowser : ISalesforceEntity
    {
    [JsonConstructor]
        private ClientBrowser(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ClientBrowser()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UsersId;
        [EntityField(false)]
        public System.String UsersId
        {
            get { return __UsersId; }
            set { SetField(ref __UsersId, value, "UsersId"); }
        }
        private System.String __FullUserAgent;
        [EntityField(true)]
        public System.String FullUserAgent
        {
            get { return __FullUserAgent; }
            set { SetField(ref __FullUserAgent, value, "FullUserAgent"); }
        }
        private System.String __ProxyInfo;
        [EntityField(true)]
        public System.String ProxyInfo
        {
            get { return __ProxyInfo; }
            set { SetField(ref __ProxyInfo, value, "ProxyInfo"); }
        }
        private System.DateTime? __LastUpdate;
        [EntityField(true)]
        public System.DateTime? LastUpdate
        {
            get { return __LastUpdate; }
            set { SetField(ref __LastUpdate, value, "LastUpdate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
    }
    [EntityName("CollaborationGroup")]
    public class CollaborationGroup : ISalesforceEntity
    {
    [JsonConstructor]
        private CollaborationGroup(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CollaborationGroup()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Int32? __MemberCount;
        [EntityField(true)]
        public System.Int32? MemberCount
        {
            get { return __MemberCount; }
            set { SetField(ref __MemberCount, value, "MemberCount"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private PickCollaborationGroupCollaborationType __CollaborationType;
        [EntityField(false)]
        public PickCollaborationGroupCollaborationType CollaborationType
        {
            get { return __CollaborationType; }
            set { SetField(ref __CollaborationType, value, "CollaborationType"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __FullPhotoUrl;
        [EntityField(true)]
        public System.String FullPhotoUrl
        {
            get { return __FullPhotoUrl; }
            set { SetField(ref __FullPhotoUrl, value, "FullPhotoUrl"); }
        }
        private System.String __SmallPhotoUrl;
        [EntityField(true)]
        public System.String SmallPhotoUrl
        {
            get { return __SmallPhotoUrl; }
            set { SetField(ref __SmallPhotoUrl, value, "SmallPhotoUrl"); }
        }
        private System.DateTime __LastFeedModifiedDate;
        [EntityField(false)]
        public System.DateTime LastFeedModifiedDate
        {
            get { return __LastFeedModifiedDate; }
            set { SetField(ref __LastFeedModifiedDate, value, "LastFeedModifiedDate"); }
        }
        private System.String __InformationTitle;
        [EntityField(true)]
        public System.String InformationTitle
        {
            get { return __InformationTitle; }
            set { SetField(ref __InformationTitle, value, "InformationTitle"); }
        }
        private System.String __InformationBody;
        [EntityField(true)]
        public System.String InformationBody
        {
            get { return __InformationBody; }
            set { SetField(ref __InformationBody, value, "InformationBody"); }
        }
        private System.Boolean __HasPrivateFieldsAccess;
        [EntityField(false)]
        public System.Boolean HasPrivateFieldsAccess
        {
            get { return __HasPrivateFieldsAccess; }
            set { SetField(ref __HasPrivateFieldsAccess, value, "HasPrivateFieldsAccess"); }
        }
        private System.Boolean __CanHaveGuests;
        [EntityField(false)]
        public System.Boolean CanHaveGuests
        {
            get { return __CanHaveGuests; }
            set { SetField(ref __CanHaveGuests, value, "CanHaveGuests"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.Boolean __IsArchived;
        [EntityField(false)]
        public System.Boolean IsArchived
        {
            get { return __IsArchived; }
            set { SetField(ref __IsArchived, value, "IsArchived"); }
        }
        private System.Boolean __IsAutoArchiveDisabled;
        [EntityField(false)]
        public System.Boolean IsAutoArchiveDisabled
        {
            get { return __IsAutoArchiveDisabled; }
            set { SetField(ref __IsAutoArchiveDisabled, value, "IsAutoArchiveDisabled"); }
        }
        private System.String __AnnouncementId;
        [EntityField(true)]
        public System.String AnnouncementId
        {
            get { return __AnnouncementId; }
            set { SetField(ref __AnnouncementId, value, "AnnouncementId"); }
        }
        private System.String __GroupEmail;
        [EntityField(true)]
        public System.String GroupEmail
        {
            get { return __GroupEmail; }
            set { SetField(ref __GroupEmail, value, "GroupEmail"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<CollaborationGroup,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<CollaborationGroup,CollaborationGroupFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CollaborationGroupId")]
        public RelationShip<CollaborationGroup,CollaborationGroupMember> GroupMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CollaborationGroupId")]
        public RelationShip<CollaborationGroup,CollaborationGroupMemberRequest> GroupMemberRequests
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CollaborationGroupId")]
        public RelationShip<CollaborationGroup,CollaborationGroupRecord> CollaborationGroupRecords
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<CollaborationGroup,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<CollaborationGroup,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<CollaborationGroup,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
    }
    [EntityName("CollaborationGroupFeed")]
    public class CollaborationGroupFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private CollaborationGroupFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CollaborationGroupFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickCollaborationGroupFeedType __Type;
        [EntityField(true)]
        public PickCollaborationGroupFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CollaborationGroupFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CollaborationGroupFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<CollaborationGroupFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("CollaborationGroupMember")]
    public class CollaborationGroupMember : ISalesforceEntity
    {
    [JsonConstructor]
        private CollaborationGroupMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CollaborationGroupMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CollaborationGroupId;
        [EntityField(false)]
        public System.String CollaborationGroupId
        {
            get { return __CollaborationGroupId; }
            set { SetField(ref __CollaborationGroupId, value, "CollaborationGroupId"); }
        }
        private System.String __MemberId;
        [EntityField(false)]
        public System.String MemberId
        {
            get { return __MemberId; }
            set { SetField(ref __MemberId, value, "MemberId"); }
        }
        private PickCollaborationGroupMemberCollaborationRole __CollaborationRole;
        [EntityField(true)]
        public PickCollaborationGroupMemberCollaborationRole CollaborationRole
        {
            get { return __CollaborationRole; }
            set { SetField(ref __CollaborationRole, value, "CollaborationRole"); }
        }
        private PickCollaborationGroupMemberNotificationFrequency __NotificationFrequency;
        [EntityField(true)]
        public PickCollaborationGroupMemberNotificationFrequency NotificationFrequency
        {
            get { return __NotificationFrequency; }
            set { SetField(ref __NotificationFrequency, value, "NotificationFrequency"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CollaborationGroupMemberRequest")]
    public class CollaborationGroupMemberRequest : ISalesforceEntity
    {
    [JsonConstructor]
        private CollaborationGroupMemberRequest(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CollaborationGroupMemberRequest()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CollaborationGroupId;
        [EntityField(false)]
        public System.String CollaborationGroupId
        {
            get { return __CollaborationGroupId; }
            set { SetField(ref __CollaborationGroupId, value, "CollaborationGroupId"); }
        }
        private System.String __RequesterId;
        [EntityField(false)]
        public System.String RequesterId
        {
            get { return __RequesterId; }
            set { SetField(ref __RequesterId, value, "RequesterId"); }
        }
        private System.String __ResponseMessage;
        [EntityField(true)]
        public System.String ResponseMessage
        {
            get { return __ResponseMessage; }
            set { SetField(ref __ResponseMessage, value, "ResponseMessage"); }
        }
        private PickCollaborationGroupMemberRequestStatus __Status;
        [EntityField(false)]
        public PickCollaborationGroupMemberRequestStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CollaborationGroupRecord")]
    public class CollaborationGroupRecord : ISalesforceEntity
    {
    [JsonConstructor]
        private CollaborationGroupRecord(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CollaborationGroupRecord()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __CollaborationGroupId;
        [EntityField(false)]
        public System.String CollaborationGroupId
        {
            get { return __CollaborationGroupId; }
            set { SetField(ref __CollaborationGroupId, value, "CollaborationGroupId"); }
        }
        private System.String __RecordId;
        [EntityField(false)]
        public System.String RecordId
        {
            get { return __RecordId; }
            set { SetField(ref __RecordId, value, "RecordId"); }
        }
    }
    [EntityName("CollaborationInvitation")]
    public class CollaborationInvitation : ISalesforceEntity
    {
    [JsonConstructor]
        private CollaborationInvitation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CollaborationInvitation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __SharedEntityId;
        [EntityField(false)]
        public System.String SharedEntityId
        {
            get { return __SharedEntityId; }
            set { SetField(ref __SharedEntityId, value, "SharedEntityId"); }
        }
        private System.String __InviterId;
        [EntityField(false)]
        public System.String InviterId
        {
            get { return __InviterId; }
            set { SetField(ref __InviterId, value, "InviterId"); }
        }
        private System.String __InvitedUserEmail;
        [EntityField(false)]
        public System.String InvitedUserEmail
        {
            get { return __InvitedUserEmail; }
            set { SetField(ref __InvitedUserEmail, value, "InvitedUserEmail"); }
        }
        private System.String __InvitedUserEmailNormalized;
        [EntityField(false)]
        public System.String InvitedUserEmailNormalized
        {
            get { return __InvitedUserEmailNormalized; }
            set { SetField(ref __InvitedUserEmailNormalized, value, "InvitedUserEmailNormalized"); }
        }
        private PickCollaborationInvitationStatus __Status;
        [EntityField(false)]
        public PickCollaborationInvitationStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __OptionalMessage;
        [EntityField(true)]
        public System.String OptionalMessage
        {
            get { return __OptionalMessage; }
            set { SetField(ref __OptionalMessage, value, "OptionalMessage"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CombinedAttachment")]
    public class CombinedAttachment : ISalesforceEntity
    {
    [JsonConstructor]
        private CombinedAttachment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CombinedAttachment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __RecordType;
        [EntityField(true)]
        public System.String RecordType
        {
            get { return __RecordType; }
            set { SetField(ref __RecordType, value, "RecordType"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.String __FileType;
        [EntityField(true)]
        public System.String FileType
        {
            get { return __FileType; }
            set { SetField(ref __FileType, value, "FileType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
    }
    [EntityName("Community")]
    public class Community : ISalesforceEntity
    {
    [JsonConstructor]
        private Community(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Community()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
    }
    [EntityName("Contact")]
    public class Contact : ISalesforceEntity
    {
    [JsonConstructor]
        private Contact(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Contact()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __MasterRecordId;
        [EntityField(true)]
        public System.String MasterRecordId
        {
            get { return __MasterRecordId; }
            set { SetField(ref __MasterRecordId, value, "MasterRecordId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private PickContactSalutation __Salutation;
        [EntityField(true)]
        public PickContactSalutation Salutation
        {
            get { return __Salutation; }
            set { SetField(ref __Salutation, value, "Salutation"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __OtherStreet;
        [EntityField(true)]
        public System.String OtherStreet
        {
            get { return __OtherStreet; }
            set { SetField(ref __OtherStreet, value, "OtherStreet"); }
        }
        private System.String __OtherCity;
        [EntityField(true)]
        public System.String OtherCity
        {
            get { return __OtherCity; }
            set { SetField(ref __OtherCity, value, "OtherCity"); }
        }
        private System.String __OtherState;
        [EntityField(true)]
        public System.String OtherState
        {
            get { return __OtherState; }
            set { SetField(ref __OtherState, value, "OtherState"); }
        }
        private System.String __OtherPostalCode;
        [EntityField(true)]
        public System.String OtherPostalCode
        {
            get { return __OtherPostalCode; }
            set { SetField(ref __OtherPostalCode, value, "OtherPostalCode"); }
        }
        private System.String __OtherCountry;
        [EntityField(true)]
        public System.String OtherCountry
        {
            get { return __OtherCountry; }
            set { SetField(ref __OtherCountry, value, "OtherCountry"); }
        }
        private System.Double? __OtherLatitude;
        [EntityField(true)]
        public System.Double? OtherLatitude
        {
            get { return __OtherLatitude; }
            set { SetField(ref __OtherLatitude, value, "OtherLatitude"); }
        }
        private System.Double? __OtherLongitude;
        [EntityField(true)]
        public System.Double? OtherLongitude
        {
            get { return __OtherLongitude; }
            set { SetField(ref __OtherLongitude, value, "OtherLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __OtherAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address OtherAddress
        {
            get { return __OtherAddress; }
            set { SetField(ref __OtherAddress, value, "OtherAddress"); }
        }
        private System.String __MailingStreet;
        [EntityField(true)]
        public System.String MailingStreet
        {
            get { return __MailingStreet; }
            set { SetField(ref __MailingStreet, value, "MailingStreet"); }
        }
        private System.String __MailingCity;
        [EntityField(true)]
        public System.String MailingCity
        {
            get { return __MailingCity; }
            set { SetField(ref __MailingCity, value, "MailingCity"); }
        }
        private System.String __MailingState;
        [EntityField(true)]
        public System.String MailingState
        {
            get { return __MailingState; }
            set { SetField(ref __MailingState, value, "MailingState"); }
        }
        private System.String __MailingPostalCode;
        [EntityField(true)]
        public System.String MailingPostalCode
        {
            get { return __MailingPostalCode; }
            set { SetField(ref __MailingPostalCode, value, "MailingPostalCode"); }
        }
        private System.String __MailingCountry;
        [EntityField(true)]
        public System.String MailingCountry
        {
            get { return __MailingCountry; }
            set { SetField(ref __MailingCountry, value, "MailingCountry"); }
        }
        private System.Double? __MailingLatitude;
        [EntityField(true)]
        public System.Double? MailingLatitude
        {
            get { return __MailingLatitude; }
            set { SetField(ref __MailingLatitude, value, "MailingLatitude"); }
        }
        private System.Double? __MailingLongitude;
        [EntityField(true)]
        public System.Double? MailingLongitude
        {
            get { return __MailingLongitude; }
            set { SetField(ref __MailingLongitude, value, "MailingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __MailingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address MailingAddress
        {
            get { return __MailingAddress; }
            set { SetField(ref __MailingAddress, value, "MailingAddress"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __HomePhone;
        [EntityField(true)]
        public System.String HomePhone
        {
            get { return __HomePhone; }
            set { SetField(ref __HomePhone, value, "HomePhone"); }
        }
        private System.String __OtherPhone;
        [EntityField(true)]
        public System.String OtherPhone
        {
            get { return __OtherPhone; }
            set { SetField(ref __OtherPhone, value, "OtherPhone"); }
        }
        private System.String __AssistantPhone;
        [EntityField(true)]
        public System.String AssistantPhone
        {
            get { return __AssistantPhone; }
            set { SetField(ref __AssistantPhone, value, "AssistantPhone"); }
        }
        private System.String __ReportsToId;
        [EntityField(true)]
        public System.String ReportsToId
        {
            get { return __ReportsToId; }
            set { SetField(ref __ReportsToId, value, "ReportsToId"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Department;
        [EntityField(true)]
        public System.String Department
        {
            get { return __Department; }
            set { SetField(ref __Department, value, "Department"); }
        }
        private System.String __AssistantName;
        [EntityField(true)]
        public System.String AssistantName
        {
            get { return __AssistantName; }
            set { SetField(ref __AssistantName, value, "AssistantName"); }
        }
        private PickContactLeadSource __LeadSource;
        [EntityField(true)]
        public PickContactLeadSource LeadSource
        {
            get { return __LeadSource; }
            set { SetField(ref __LeadSource, value, "LeadSource"); }
        }
        private System.DateTime? __Birthdate;
        [EntityField(true)]
        public System.DateTime? Birthdate
        {
            get { return __Birthdate; }
            set { SetField(ref __Birthdate, value, "Birthdate"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastCURequestDate;
        [EntityField(true)]
        public System.DateTime? LastCURequestDate
        {
            get { return __LastCURequestDate; }
            set { SetField(ref __LastCURequestDate, value, "LastCURequestDate"); }
        }
        private System.DateTime? __LastCUUpdateDate;
        [EntityField(true)]
        public System.DateTime? LastCUUpdateDate
        {
            get { return __LastCUUpdateDate; }
            set { SetField(ref __LastCUUpdateDate, value, "LastCUUpdateDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __EmailBouncedReason;
        [EntityField(true)]
        public System.String EmailBouncedReason
        {
            get { return __EmailBouncedReason; }
            set { SetField(ref __EmailBouncedReason, value, "EmailBouncedReason"); }
        }
        private System.DateTime? __EmailBouncedDate;
        [EntityField(true)]
        public System.DateTime? EmailBouncedDate
        {
            get { return __EmailBouncedDate; }
            set { SetField(ref __EmailBouncedDate, value, "EmailBouncedDate"); }
        }
        private System.Boolean __IsEmailBounced;
        [EntityField(false)]
        public System.Boolean IsEmailBounced
        {
            get { return __IsEmailBounced; }
            set { SetField(ref __IsEmailBounced, value, "IsEmailBounced"); }
        }
        private System.String __PhotoUrl;
        [EntityField(true)]
        public System.String PhotoUrl
        {
            get { return __PhotoUrl; }
            set { SetField(ref __PhotoUrl, value, "PhotoUrl"); }
        }
        private System.String __Jigsaw;
        [EntityField(true)]
        public System.String Jigsaw
        {
            get { return __Jigsaw; }
            set { SetField(ref __Jigsaw, value, "Jigsaw"); }
        }
        private System.String __JigsawContactId;
        [EntityField(true)]
        public System.String JigsawContactId
        {
            get { return __JigsawContactId; }
            set { SetField(ref __JigsawContactId, value, "JigsawContactId"); }
        }
        private PickContactCleanStatus __CleanStatus;
        [EntityField(true)]
        public PickContactCleanStatus CleanStatus
        {
            get { return __CleanStatus; }
            set { SetField(ref __CleanStatus, value, "CleanStatus"); }
        }
        private PickContactLevel __Levelc;
        [JsonProperty(PropertyName = "Level__c")]
        [EntityField(true)]
        public PickContactLevel Levelc
        {
            get { return __Levelc; }
            set { SetField(ref __Levelc, value, "Level__c"); }
        }
        private System.String __Languagesc;
        [JsonProperty(PropertyName = "Languages__c")]
        [EntityField(true)]
        public System.String Languagesc
        {
            get { return __Languagesc; }
            set { SetField(ref __Languagesc, value, "Languages__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Contact,AcceptedEventRelation> AcceptedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,AccountContactRole> AccountContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,Asset> Assets
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Contact,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contact,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,CampaignMember> CampaignMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,Case> Cases
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,CaseContactRole> CaseContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Contact,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contact,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,ContactCleanInfo> ContactCleanInfos
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contact,ContactFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,ContactHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,ContactShare> Shares
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Contact,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CustomerSignedId")]
        public RelationShip<Contact,Contract> ContractsSigned
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,ContractContactRole> ContractContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Contact,DeclinedEventRelation> DeclinedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,EmailStatus> EmailStatuses
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contact,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Contact,EventRelation> EventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contact,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contact,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContactId")]
        public RelationShip<Contact,OpportunityContactRole> OpportunityContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Contact,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Contact,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Contact,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Contact,TopicAssignment> TopicAssignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Contact,UndecidedEventRelation> UndecidedEventRelations
        {
            get;set;
        }
    }
    [EntityName("ContactCleanInfo")]
    public class ContactCleanInfo : ISalesforceEntity
    {
    [JsonConstructor]
        private ContactCleanInfo(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContactCleanInfo()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.DateTime __LastMatchedDate;
        [EntityField(false)]
        public System.DateTime LastMatchedDate
        {
            get { return __LastMatchedDate; }
            set { SetField(ref __LastMatchedDate, value, "LastMatchedDate"); }
        }
        private System.DateTime? __LastStatusChangedDate;
        [EntityField(true)]
        public System.DateTime? LastStatusChangedDate
        {
            get { return __LastStatusChangedDate; }
            set { SetField(ref __LastStatusChangedDate, value, "LastStatusChangedDate"); }
        }
        private System.String __LastStatusChangedById;
        [EntityField(true)]
        public System.String LastStatusChangedById
        {
            get { return __LastStatusChangedById; }
            set { SetField(ref __LastStatusChangedById, value, "LastStatusChangedById"); }
        }
        private System.Boolean __IsInactive;
        [EntityField(false)]
        public System.Boolean IsInactive
        {
            get { return __IsInactive; }
            set { SetField(ref __IsInactive, value, "IsInactive"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __LastName;
        [EntityField(true)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private PickContactCleanInfoContactStatusDataDotCom __ContactStatusDataDotCom;
        [EntityField(true)]
        public PickContactCleanInfoContactStatusDataDotCom ContactStatusDataDotCom
        {
            get { return __ContactStatusDataDotCom; }
            set { SetField(ref __ContactStatusDataDotCom, value, "ContactStatusDataDotCom"); }
        }
        private System.Boolean __IsReviewedName;
        [EntityField(false)]
        public System.Boolean IsReviewedName
        {
            get { return __IsReviewedName; }
            set { SetField(ref __IsReviewedName, value, "IsReviewedName"); }
        }
        private System.Boolean __IsReviewedEmail;
        [EntityField(false)]
        public System.Boolean IsReviewedEmail
        {
            get { return __IsReviewedEmail; }
            set { SetField(ref __IsReviewedEmail, value, "IsReviewedEmail"); }
        }
        private System.Boolean __IsReviewedPhone;
        [EntityField(false)]
        public System.Boolean IsReviewedPhone
        {
            get { return __IsReviewedPhone; }
            set { SetField(ref __IsReviewedPhone, value, "IsReviewedPhone"); }
        }
        private System.Boolean __IsReviewedAddress;
        [EntityField(false)]
        public System.Boolean IsReviewedAddress
        {
            get { return __IsReviewedAddress; }
            set { SetField(ref __IsReviewedAddress, value, "IsReviewedAddress"); }
        }
        private System.Boolean __IsReviewedTitle;
        [EntityField(false)]
        public System.Boolean IsReviewedTitle
        {
            get { return __IsReviewedTitle; }
            set { SetField(ref __IsReviewedTitle, value, "IsReviewedTitle"); }
        }
        private System.Boolean __IsDifferentFirstName;
        [EntityField(false)]
        public System.Boolean IsDifferentFirstName
        {
            get { return __IsDifferentFirstName; }
            set { SetField(ref __IsDifferentFirstName, value, "IsDifferentFirstName"); }
        }
        private System.Boolean __IsDifferentLastName;
        [EntityField(false)]
        public System.Boolean IsDifferentLastName
        {
            get { return __IsDifferentLastName; }
            set { SetField(ref __IsDifferentLastName, value, "IsDifferentLastName"); }
        }
        private System.Boolean __IsDifferentEmail;
        [EntityField(false)]
        public System.Boolean IsDifferentEmail
        {
            get { return __IsDifferentEmail; }
            set { SetField(ref __IsDifferentEmail, value, "IsDifferentEmail"); }
        }
        private System.Boolean __IsDifferentPhone;
        [EntityField(false)]
        public System.Boolean IsDifferentPhone
        {
            get { return __IsDifferentPhone; }
            set { SetField(ref __IsDifferentPhone, value, "IsDifferentPhone"); }
        }
        private System.Boolean __IsDifferentStreet;
        [EntityField(false)]
        public System.Boolean IsDifferentStreet
        {
            get { return __IsDifferentStreet; }
            set { SetField(ref __IsDifferentStreet, value, "IsDifferentStreet"); }
        }
        private System.Boolean __IsDifferentCity;
        [EntityField(false)]
        public System.Boolean IsDifferentCity
        {
            get { return __IsDifferentCity; }
            set { SetField(ref __IsDifferentCity, value, "IsDifferentCity"); }
        }
        private System.Boolean __IsDifferentState;
        [EntityField(false)]
        public System.Boolean IsDifferentState
        {
            get { return __IsDifferentState; }
            set { SetField(ref __IsDifferentState, value, "IsDifferentState"); }
        }
        private System.Boolean __IsDifferentPostalCode;
        [EntityField(false)]
        public System.Boolean IsDifferentPostalCode
        {
            get { return __IsDifferentPostalCode; }
            set { SetField(ref __IsDifferentPostalCode, value, "IsDifferentPostalCode"); }
        }
        private System.Boolean __IsDifferentCountry;
        [EntityField(false)]
        public System.Boolean IsDifferentCountry
        {
            get { return __IsDifferentCountry; }
            set { SetField(ref __IsDifferentCountry, value, "IsDifferentCountry"); }
        }
        private System.Boolean __IsDifferentTitle;
        [EntityField(false)]
        public System.Boolean IsDifferentTitle
        {
            get { return __IsDifferentTitle; }
            set { SetField(ref __IsDifferentTitle, value, "IsDifferentTitle"); }
        }
        private System.Boolean __IsDifferentStateCode;
        [EntityField(false)]
        public System.Boolean IsDifferentStateCode
        {
            get { return __IsDifferentStateCode; }
            set { SetField(ref __IsDifferentStateCode, value, "IsDifferentStateCode"); }
        }
        private System.Boolean __IsDifferentCountryCode;
        [EntityField(false)]
        public System.Boolean IsDifferentCountryCode
        {
            get { return __IsDifferentCountryCode; }
            set { SetField(ref __IsDifferentCountryCode, value, "IsDifferentCountryCode"); }
        }
        private System.Boolean __CleanedByJob;
        [EntityField(false)]
        public System.Boolean CleanedByJob
        {
            get { return __CleanedByJob; }
            set { SetField(ref __CleanedByJob, value, "CleanedByJob"); }
        }
        private System.Boolean __CleanedByUser;
        [EntityField(false)]
        public System.Boolean CleanedByUser
        {
            get { return __CleanedByUser; }
            set { SetField(ref __CleanedByUser, value, "CleanedByUser"); }
        }
        private System.Boolean __IsFlaggedWrongName;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongName
        {
            get { return __IsFlaggedWrongName; }
            set { SetField(ref __IsFlaggedWrongName, value, "IsFlaggedWrongName"); }
        }
        private System.Boolean __IsFlaggedWrongEmail;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongEmail
        {
            get { return __IsFlaggedWrongEmail; }
            set { SetField(ref __IsFlaggedWrongEmail, value, "IsFlaggedWrongEmail"); }
        }
        private System.Boolean __IsFlaggedWrongPhone;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongPhone
        {
            get { return __IsFlaggedWrongPhone; }
            set { SetField(ref __IsFlaggedWrongPhone, value, "IsFlaggedWrongPhone"); }
        }
        private System.Boolean __IsFlaggedWrongAddress;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongAddress
        {
            get { return __IsFlaggedWrongAddress; }
            set { SetField(ref __IsFlaggedWrongAddress, value, "IsFlaggedWrongAddress"); }
        }
        private System.Boolean __IsFlaggedWrongTitle;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongTitle
        {
            get { return __IsFlaggedWrongTitle; }
            set { SetField(ref __IsFlaggedWrongTitle, value, "IsFlaggedWrongTitle"); }
        }
        private System.String __DataDotComId;
        [EntityField(true)]
        public System.String DataDotComId
        {
            get { return __DataDotComId; }
            set { SetField(ref __DataDotComId, value, "DataDotComId"); }
        }
    }
    [EntityName("ContactFeed")]
    public class ContactFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private ContactFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContactFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickContactFeedType __Type;
        [EntityField(true)]
        public PickContactFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContactFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContactFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContactFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("ContactHistory")]
    public class ContactHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ContactHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContactHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickContactHistoryField __Field;
        [EntityField(false)]
        public PickContactHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("ContactShare")]
    public class ContactShare : ISalesforceEntity
    {
    [JsonConstructor]
        private ContactShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContactShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickContactShareContactAccessLevel __ContactAccessLevel;
        [EntityField(false)]
        public PickContactShareContactAccessLevel ContactAccessLevel
        {
            get { return __ContactAccessLevel; }
            set { SetField(ref __ContactAccessLevel, value, "ContactAccessLevel"); }
        }
        private PickContactShareRowCause __RowCause;
        [EntityField(true)]
        public PickContactShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("ContentDocument")]
    public class ContentDocument : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentDocument(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentDocument()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.Boolean __IsArchived;
        [EntityField(false)]
        public System.Boolean IsArchived
        {
            get { return __IsArchived; }
            set { SetField(ref __IsArchived, value, "IsArchived"); }
        }
        private System.String __ArchivedById;
        [EntityField(true)]
        public System.String ArchivedById
        {
            get { return __ArchivedById; }
            set { SetField(ref __ArchivedById, value, "ArchivedById"); }
        }
        private System.DateTime? __ArchivedDate;
        [EntityField(true)]
        public System.DateTime? ArchivedDate
        {
            get { return __ArchivedDate; }
            set { SetField(ref __ArchivedDate, value, "ArchivedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private PickContentDocumentPublishStatus __PublishStatus;
        [EntityField(false)]
        public PickContentDocumentPublishStatus PublishStatus
        {
            get { return __PublishStatus; }
            set { SetField(ref __PublishStatus, value, "PublishStatus"); }
        }
        private System.String __LatestPublishedVersionId;
        [EntityField(true)]
        public System.String LatestPublishedVersionId
        {
            get { return __LatestPublishedVersionId; }
            set { SetField(ref __LatestPublishedVersionId, value, "LatestPublishedVersionId"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<ContentDocument,ContentDocumentFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContentDocumentId")]
        public RelationShip<ContentDocument,ContentDocumentHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContentDocumentId")]
        public RelationShip<ContentDocument,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContentDocumentId")]
        public RelationShip<ContentDocument,ContentVersion> ContentVersions
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<ContentDocument,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<ContentDocument,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("ContentDocumentFeed")]
    public class ContentDocumentFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentDocumentFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentDocumentFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickContentDocumentFeedType __Type;
        [EntityField(true)]
        public PickContentDocumentFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContentDocumentFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContentDocumentFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContentDocumentFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("ContentDocumentHistory")]
    public class ContentDocumentHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentDocumentHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentDocumentHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ContentDocumentId;
        [EntityField(false)]
        public System.String ContentDocumentId
        {
            get { return __ContentDocumentId; }
            set { SetField(ref __ContentDocumentId, value, "ContentDocumentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickContentDocumentHistoryField __Field;
        [EntityField(false)]
        public PickContentDocumentHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("ContentDocumentLink")]
    public class ContentDocumentLink : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentDocumentLink(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentDocumentLink()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __LinkedEntityId;
        [EntityField(false)]
        public System.String LinkedEntityId
        {
            get { return __LinkedEntityId; }
            set { SetField(ref __LinkedEntityId, value, "LinkedEntityId"); }
        }
        private System.String __ContentDocumentId;
        [EntityField(false)]
        public System.String ContentDocumentId
        {
            get { return __ContentDocumentId; }
            set { SetField(ref __ContentDocumentId, value, "ContentDocumentId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickContentDocumentLinkShareType __ShareType;
        [EntityField(true)]
        public PickContentDocumentLinkShareType ShareType
        {
            get { return __ShareType; }
            set { SetField(ref __ShareType, value, "ShareType"); }
        }
        private PickContentDocumentLinkVisibility __Visibility;
        [EntityField(true)]
        public PickContentDocumentLinkVisibility Visibility
        {
            get { return __Visibility; }
            set { SetField(ref __Visibility, value, "Visibility"); }
        }
    }
    [EntityName("ContentVersion")]
    public class ContentVersion : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentVersion(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentVersion()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ContentDocumentId;
        [EntityField(false)]
        public System.String ContentDocumentId
        {
            get { return __ContentDocumentId; }
            set { SetField(ref __ContentDocumentId, value, "ContentDocumentId"); }
        }
        private System.Boolean __IsLatest;
        [EntityField(false)]
        public System.Boolean IsLatest
        {
            get { return __IsLatest; }
            set { SetField(ref __IsLatest, value, "IsLatest"); }
        }
        private System.String __ContentUrl;
        [EntityField(true)]
        public System.String ContentUrl
        {
            get { return __ContentUrl; }
            set { SetField(ref __ContentUrl, value, "ContentUrl"); }
        }
        private System.String __VersionNumber;
        [EntityField(true)]
        public System.String VersionNumber
        {
            get { return __VersionNumber; }
            set { SetField(ref __VersionNumber, value, "VersionNumber"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __ReasonForChange;
        [EntityField(true)]
        public System.String ReasonForChange
        {
            get { return __ReasonForChange; }
            set { SetField(ref __ReasonForChange, value, "ReasonForChange"); }
        }
        private System.String __PathOnClient;
        [EntityField(true)]
        public System.String PathOnClient
        {
            get { return __PathOnClient; }
            set { SetField(ref __PathOnClient, value, "PathOnClient"); }
        }
        private System.Int32? __RatingCount;
        [EntityField(true)]
        public System.Int32? RatingCount
        {
            get { return __RatingCount; }
            set { SetField(ref __RatingCount, value, "RatingCount"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime? __ContentModifiedDate;
        [EntityField(true)]
        public System.DateTime? ContentModifiedDate
        {
            get { return __ContentModifiedDate; }
            set { SetField(ref __ContentModifiedDate, value, "ContentModifiedDate"); }
        }
        private System.String __ContentModifiedById;
        [EntityField(true)]
        public System.String ContentModifiedById
        {
            get { return __ContentModifiedById; }
            set { SetField(ref __ContentModifiedById, value, "ContentModifiedById"); }
        }
        private System.Int32? __PositiveRatingCount;
        [EntityField(true)]
        public System.Int32? PositiveRatingCount
        {
            get { return __PositiveRatingCount; }
            set { SetField(ref __PositiveRatingCount, value, "PositiveRatingCount"); }
        }
        private System.Int32? __NegativeRatingCount;
        [EntityField(true)]
        public System.Int32? NegativeRatingCount
        {
            get { return __NegativeRatingCount; }
            set { SetField(ref __NegativeRatingCount, value, "NegativeRatingCount"); }
        }
        private System.Int32? __FeaturedContentBoost;
        [EntityField(true)]
        public System.Int32? FeaturedContentBoost
        {
            get { return __FeaturedContentBoost; }
            set { SetField(ref __FeaturedContentBoost, value, "FeaturedContentBoost"); }
        }
        private System.DateTime? __FeaturedContentDate;
        [EntityField(true)]
        public System.DateTime? FeaturedContentDate
        {
            get { return __FeaturedContentDate; }
            set { SetField(ref __FeaturedContentDate, value, "FeaturedContentDate"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __TagCsv;
        [EntityField(true)]
        public System.String TagCsv
        {
            get { return __TagCsv; }
            set { SetField(ref __TagCsv, value, "TagCsv"); }
        }
        private System.String __FileType;
        [EntityField(false)]
        public System.String FileType
        {
            get { return __FileType; }
            set { SetField(ref __FileType, value, "FileType"); }
        }
        private PickContentVersionPublishStatus __PublishStatus;
        [EntityField(false)]
        public PickContentVersionPublishStatus PublishStatus
        {
            get { return __PublishStatus; }
            set { SetField(ref __PublishStatus, value, "PublishStatus"); }
        }
        private System.String __VersionData;
        [EntityField(true)]
        public System.String VersionData
        {
            get { return __VersionData; }
            set { SetField(ref __VersionData, value, "VersionData"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __FirstPublishLocationId;
        [EntityField(true)]
        public System.String FirstPublishLocationId
        {
            get { return __FirstPublishLocationId; }
            set { SetField(ref __FirstPublishLocationId, value, "FirstPublishLocationId"); }
        }
        private PickContentVersionOrigin __Origin;
        [EntityField(false)]
        public PickContentVersionOrigin Origin
        {
            get { return __Origin; }
            set { SetField(ref __Origin, value, "Origin"); }
        }
        private PickContentVersionContentLocation __ContentLocation;
        [EntityField(false)]
        public PickContentVersionContentLocation ContentLocation
        {
            get { return __ContentLocation; }
            set { SetField(ref __ContentLocation, value, "ContentLocation"); }
        }
        private System.String __ExternalDocumentInfo1;
        [EntityField(true)]
        public System.String ExternalDocumentInfo1
        {
            get { return __ExternalDocumentInfo1; }
            set { SetField(ref __ExternalDocumentInfo1, value, "ExternalDocumentInfo1"); }
        }
        private System.String __ExternalDocumentInfo2;
        [EntityField(true)]
        public System.String ExternalDocumentInfo2
        {
            get { return __ExternalDocumentInfo2; }
            set { SetField(ref __ExternalDocumentInfo2, value, "ExternalDocumentInfo2"); }
        }
        private System.String __ExternalDataSourceId;
        [EntityField(true)]
        public System.String ExternalDataSourceId
        {
            get { return __ExternalDataSourceId; }
            set { SetField(ref __ExternalDataSourceId, value, "ExternalDataSourceId"); }
        }
        private System.String __Checksum;
        [EntityField(true)]
        public System.String Checksum
        {
            get { return __Checksum; }
            set { SetField(ref __Checksum, value, "Checksum"); }
        }
        [JsonIgnore]
        [ReferencedByField("ContentVersionId")]
        public RelationShip<ContentVersion,ContentVersionHistory> Histories
        {
            get;set;
        }
    }
    [EntityName("ContentVersionHistory")]
    public class ContentVersionHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentVersionHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentVersionHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ContentVersionId;
        [EntityField(false)]
        public System.String ContentVersionId
        {
            get { return __ContentVersionId; }
            set { SetField(ref __ContentVersionId, value, "ContentVersionId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickContentVersionHistoryField __Field;
        [EntityField(false)]
        public PickContentVersionHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("ContentWorkspace")]
    public class ContentWorkspace : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentWorkspace(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentWorkspace()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickContentWorkspaceTagModel __TagModel;
        [EntityField(true)]
        public PickContentWorkspaceTagModel TagModel
        {
            get { return __TagModel; }
            set { SetField(ref __TagModel, value, "TagModel"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __DefaultRecordTypeId;
        [EntityField(true)]
        public System.String DefaultRecordTypeId
        {
            get { return __DefaultRecordTypeId; }
            set { SetField(ref __DefaultRecordTypeId, value, "DefaultRecordTypeId"); }
        }
        private System.Boolean __IsRestrictContentTypes;
        [EntityField(false)]
        public System.Boolean IsRestrictContentTypes
        {
            get { return __IsRestrictContentTypes; }
            set { SetField(ref __IsRestrictContentTypes, value, "IsRestrictContentTypes"); }
        }
        private System.Boolean __IsRestrictLinkedContentTypes;
        [EntityField(false)]
        public System.Boolean IsRestrictLinkedContentTypes
        {
            get { return __IsRestrictLinkedContentTypes; }
            set { SetField(ref __IsRestrictLinkedContentTypes, value, "IsRestrictLinkedContentTypes"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<ContentWorkspace,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<ContentWorkspace,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<ContentWorkspace,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
    }
    [EntityName("ContentWorkspaceDoc")]
    public class ContentWorkspaceDoc : ISalesforceEntity
    {
    [JsonConstructor]
        private ContentWorkspaceDoc(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContentWorkspaceDoc()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ContentWorkspaceId;
        [EntityField(false)]
        public System.String ContentWorkspaceId
        {
            get { return __ContentWorkspaceId; }
            set { SetField(ref __ContentWorkspaceId, value, "ContentWorkspaceId"); }
        }
        private System.String __ContentDocumentId;
        [EntityField(false)]
        public System.String ContentDocumentId
        {
            get { return __ContentDocumentId; }
            set { SetField(ref __ContentDocumentId, value, "ContentDocumentId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsOwner;
        [EntityField(false)]
        public System.Boolean IsOwner
        {
            get { return __IsOwner; }
            set { SetField(ref __IsOwner, value, "IsOwner"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("Contract")]
    public class Contract : ISalesforceEntity
    {
    [JsonConstructor]
        private Contract(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Contract()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __AccountId;
        [EntityField(false)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __Pricebook2Id;
        [EntityField(true)]
        public System.String Pricebook2Id
        {
            get { return __Pricebook2Id; }
            set { SetField(ref __Pricebook2Id, value, "Pricebook2Id"); }
        }
        private PickContractOwnerExpirationNotice __OwnerExpirationNotice;
        [EntityField(true)]
        public PickContractOwnerExpirationNotice OwnerExpirationNotice
        {
            get { return __OwnerExpirationNotice; }
            set { SetField(ref __OwnerExpirationNotice, value, "OwnerExpirationNotice"); }
        }
        private System.DateTime? __StartDate;
        [EntityField(true)]
        public System.DateTime? StartDate
        {
            get { return __StartDate; }
            set { SetField(ref __StartDate, value, "StartDate"); }
        }
        private System.DateTime? __EndDate;
        [EntityField(true)]
        public System.DateTime? EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.String __BillingStreet;
        [EntityField(true)]
        public System.String BillingStreet
        {
            get { return __BillingStreet; }
            set { SetField(ref __BillingStreet, value, "BillingStreet"); }
        }
        private System.String __BillingCity;
        [EntityField(true)]
        public System.String BillingCity
        {
            get { return __BillingCity; }
            set { SetField(ref __BillingCity, value, "BillingCity"); }
        }
        private System.String __BillingState;
        [EntityField(true)]
        public System.String BillingState
        {
            get { return __BillingState; }
            set { SetField(ref __BillingState, value, "BillingState"); }
        }
        private System.String __BillingPostalCode;
        [EntityField(true)]
        public System.String BillingPostalCode
        {
            get { return __BillingPostalCode; }
            set { SetField(ref __BillingPostalCode, value, "BillingPostalCode"); }
        }
        private System.String __BillingCountry;
        [EntityField(true)]
        public System.String BillingCountry
        {
            get { return __BillingCountry; }
            set { SetField(ref __BillingCountry, value, "BillingCountry"); }
        }
        private System.Double? __BillingLatitude;
        [EntityField(true)]
        public System.Double? BillingLatitude
        {
            get { return __BillingLatitude; }
            set { SetField(ref __BillingLatitude, value, "BillingLatitude"); }
        }
        private System.Double? __BillingLongitude;
        [EntityField(true)]
        public System.Double? BillingLongitude
        {
            get { return __BillingLongitude; }
            set { SetField(ref __BillingLongitude, value, "BillingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __BillingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address BillingAddress
        {
            get { return __BillingAddress; }
            set { SetField(ref __BillingAddress, value, "BillingAddress"); }
        }
        private System.Int32? __ContractTerm;
        [EntityField(true)]
        public System.Int32? ContractTerm
        {
            get { return __ContractTerm; }
            set { SetField(ref __ContractTerm, value, "ContractTerm"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private PickContractStatus __Status;
        [EntityField(false)]
        public PickContractStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __CompanySignedId;
        [EntityField(true)]
        public System.String CompanySignedId
        {
            get { return __CompanySignedId; }
            set { SetField(ref __CompanySignedId, value, "CompanySignedId"); }
        }
        private System.DateTime? __CompanySignedDate;
        [EntityField(true)]
        public System.DateTime? CompanySignedDate
        {
            get { return __CompanySignedDate; }
            set { SetField(ref __CompanySignedDate, value, "CompanySignedDate"); }
        }
        private System.String __CustomerSignedId;
        [EntityField(true)]
        public System.String CustomerSignedId
        {
            get { return __CustomerSignedId; }
            set { SetField(ref __CustomerSignedId, value, "CustomerSignedId"); }
        }
        private System.String __CustomerSignedTitle;
        [EntityField(true)]
        public System.String CustomerSignedTitle
        {
            get { return __CustomerSignedTitle; }
            set { SetField(ref __CustomerSignedTitle, value, "CustomerSignedTitle"); }
        }
        private System.DateTime? __CustomerSignedDate;
        [EntityField(true)]
        public System.DateTime? CustomerSignedDate
        {
            get { return __CustomerSignedDate; }
            set { SetField(ref __CustomerSignedDate, value, "CustomerSignedDate"); }
        }
        private System.String __SpecialTerms;
        [EntityField(true)]
        public System.String SpecialTerms
        {
            get { return __SpecialTerms; }
            set { SetField(ref __SpecialTerms, value, "SpecialTerms"); }
        }
        private System.String __ActivatedById;
        [EntityField(true)]
        public System.String ActivatedById
        {
            get { return __ActivatedById; }
            set { SetField(ref __ActivatedById, value, "ActivatedById"); }
        }
        private System.DateTime? __ActivatedDate;
        [EntityField(true)]
        public System.DateTime? ActivatedDate
        {
            get { return __ActivatedDate; }
            set { SetField(ref __ActivatedDate, value, "ActivatedDate"); }
        }
        private PickContractStatusCode __StatusCode;
        [EntityField(false)]
        public PickContractStatusCode StatusCode
        {
            get { return __StatusCode; }
            set { SetField(ref __StatusCode, value, "StatusCode"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ContractNumber;
        [EntityField(false)]
        public System.String ContractNumber
        {
            get { return __ContractNumber; }
            set { SetField(ref __ContractNumber, value, "ContractNumber"); }
        }
        private System.DateTime? __LastApprovedDate;
        [EntityField(true)]
        public System.DateTime? LastApprovedDate
        {
            get { return __LastApprovedDate; }
            set { SetField(ref __LastApprovedDate, value, "LastApprovedDate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Contract,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Contract,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contract,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Contract,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contract,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Contract,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContractId")]
        public RelationShip<Contract,ContractContactRole> ContractContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contract,ContractFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContractId")]
        public RelationShip<Contract,ContractHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contract,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Contract,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contract,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Contract,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Contract,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ContractId")]
        public RelationShip<Contract,Order> Orders
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Contract,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Contract,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Contract,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Contract,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("ContractContactRole")]
    public class ContractContactRole : ISalesforceEntity
    {
    [JsonConstructor]
        private ContractContactRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContractContactRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ContractId;
        [EntityField(false)]
        public System.String ContractId
        {
            get { return __ContractId; }
            set { SetField(ref __ContractId, value, "ContractId"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private PickContractContactRoleRole __Role;
        [EntityField(true)]
        public PickContractContactRoleRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.Boolean __IsPrimary;
        [EntityField(false)]
        public System.Boolean IsPrimary
        {
            get { return __IsPrimary; }
            set { SetField(ref __IsPrimary, value, "IsPrimary"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("ContractFeed")]
    public class ContractFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private ContractFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContractFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickContractFeedType __Type;
        [EntityField(true)]
        public PickContractFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContractFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContractFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ContractFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("ContractHistory")]
    public class ContractHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ContractHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContractHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ContractId;
        [EntityField(false)]
        public System.String ContractId
        {
            get { return __ContractId; }
            set { SetField(ref __ContractId, value, "ContractId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickContractHistoryField __Field;
        [EntityField(false)]
        public PickContractHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("ContractStatus")]
    public class ContractStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private ContractStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ContractStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private PickContractStatusStatusCode __StatusCode;
        [EntityField(true)]
        public PickContractStatusStatusCode StatusCode
        {
            get { return __StatusCode; }
            set { SetField(ref __StatusCode, value, "StatusCode"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("CronJobDetail")]
    public class CronJobDetail : ISalesforceEntity
    {
    [JsonConstructor]
        private CronJobDetail(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CronJobDetail()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private PickCronJobDetailJobType __JobType;
        [EntityField(true)]
        public PickCronJobDetailJobType JobType
        {
            get { return __JobType; }
            set { SetField(ref __JobType, value, "JobType"); }
        }
    }
    [EntityName("CronTrigger")]
    public class CronTrigger : ISalesforceEntity
    {
    [JsonConstructor]
        private CronTrigger(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CronTrigger()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CronJobDetailId;
        [EntityField(true)]
        public System.String CronJobDetailId
        {
            get { return __CronJobDetailId; }
            set { SetField(ref __CronJobDetailId, value, "CronJobDetailId"); }
        }
        private System.DateTime? __NextFireTime;
        [EntityField(true)]
        public System.DateTime? NextFireTime
        {
            get { return __NextFireTime; }
            set { SetField(ref __NextFireTime, value, "NextFireTime"); }
        }
        private System.DateTime? __PreviousFireTime;
        [EntityField(true)]
        public System.DateTime? PreviousFireTime
        {
            get { return __PreviousFireTime; }
            set { SetField(ref __PreviousFireTime, value, "PreviousFireTime"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.DateTime? __StartTime;
        [EntityField(true)]
        public System.DateTime? StartTime
        {
            get { return __StartTime; }
            set { SetField(ref __StartTime, value, "StartTime"); }
        }
        private System.DateTime? __EndTime;
        [EntityField(true)]
        public System.DateTime? EndTime
        {
            get { return __EndTime; }
            set { SetField(ref __EndTime, value, "EndTime"); }
        }
        private System.String __CronExpression;
        [EntityField(true)]
        public System.String CronExpression
        {
            get { return __CronExpression; }
            set { SetField(ref __CronExpression, value, "CronExpression"); }
        }
        private PickCronTriggerTimeZoneSidKey __TimeZoneSidKey;
        [EntityField(true)]
        public PickCronTriggerTimeZoneSidKey TimeZoneSidKey
        {
            get { return __TimeZoneSidKey; }
            set { SetField(ref __TimeZoneSidKey, value, "TimeZoneSidKey"); }
        }
        private System.String __OwnerId;
        [EntityField(true)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Int32? __TimesTriggered;
        [EntityField(true)]
        public System.Int32? TimesTriggered
        {
            get { return __TimesTriggered; }
            set { SetField(ref __TimesTriggered, value, "TimesTriggered"); }
        }
    }
    [EntityName("CustomBrand")]
    public class CustomBrand : ISalesforceEntity
    {
    [JsonConstructor]
        private CustomBrand(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CustomBrand()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("CustomBrandId")]
        public RelationShip<CustomBrand,CustomBrandAsset> CustomBrandAssets
        {
            get;set;
        }
    }
    [EntityName("CustomBrandAsset")]
    public class CustomBrandAsset : ISalesforceEntity
    {
    [JsonConstructor]
        private CustomBrandAsset(string hack)
        {
            trackPropertyUpdates = false;
        }

        public CustomBrandAsset()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CustomBrandId;
        [EntityField(false)]
        public System.String CustomBrandId
        {
            get { return __CustomBrandId; }
            set { SetField(ref __CustomBrandId, value, "CustomBrandId"); }
        }
        private PickCustomBrandAssetAssetCategory __AssetCategory;
        [EntityField(false)]
        public PickCustomBrandAssetAssetCategory AssetCategory
        {
            get { return __AssetCategory; }
            set { SetField(ref __AssetCategory, value, "AssetCategory"); }
        }
        private System.String __TextAsset;
        [EntityField(true)]
        public System.String TextAsset
        {
            get { return __TextAsset; }
            set { SetField(ref __TextAsset, value, "TextAsset"); }
        }
        private System.String __ForeignKeyAssetId;
        [EntityField(true)]
        public System.String ForeignKeyAssetId
        {
            get { return __ForeignKeyAssetId; }
            set { SetField(ref __ForeignKeyAssetId, value, "ForeignKeyAssetId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
    }
    [EntityName("DandBCompany")]
    public class DandBCompany : ISalesforceEntity
    {
    [JsonConstructor]
        private DandBCompany(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DandBCompany()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __DunsNumber;
        [EntityField(false)]
        public System.String DunsNumber
        {
            get { return __DunsNumber; }
            set { SetField(ref __DunsNumber, value, "DunsNumber"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __CountryAccessCode;
        [EntityField(true)]
        public System.String CountryAccessCode
        {
            get { return __CountryAccessCode; }
            set { SetField(ref __CountryAccessCode, value, "CountryAccessCode"); }
        }
        private PickDandBCompanyPublicIndicator __PublicIndicator;
        [EntityField(true)]
        public PickDandBCompanyPublicIndicator PublicIndicator
        {
            get { return __PublicIndicator; }
            set { SetField(ref __PublicIndicator, value, "PublicIndicator"); }
        }
        private System.String __StockSymbol;
        [EntityField(true)]
        public System.String StockSymbol
        {
            get { return __StockSymbol; }
            set { SetField(ref __StockSymbol, value, "StockSymbol"); }
        }
        private System.String __StockExchange;
        [EntityField(true)]
        public System.String StockExchange
        {
            get { return __StockExchange; }
            set { SetField(ref __StockExchange, value, "StockExchange"); }
        }
        private System.Double? __SalesVolume;
        [EntityField(true)]
        public System.Double? SalesVolume
        {
            get { return __SalesVolume; }
            set { SetField(ref __SalesVolume, value, "SalesVolume"); }
        }
        private System.String __URL;
        [EntityField(true)]
        public System.String URL
        {
            get { return __URL; }
            set { SetField(ref __URL, value, "URL"); }
        }
        private PickDandBCompanyOutOfBusiness __OutOfBusiness;
        [EntityField(true)]
        public PickDandBCompanyOutOfBusiness OutOfBusiness
        {
            get { return __OutOfBusiness; }
            set { SetField(ref __OutOfBusiness, value, "OutOfBusiness"); }
        }
        private System.Double? __EmployeesTotal;
        [EntityField(true)]
        public System.Double? EmployeesTotal
        {
            get { return __EmployeesTotal; }
            set { SetField(ref __EmployeesTotal, value, "EmployeesTotal"); }
        }
        private System.String __FipsMsaCode;
        [EntityField(true)]
        public System.String FipsMsaCode
        {
            get { return __FipsMsaCode; }
            set { SetField(ref __FipsMsaCode, value, "FipsMsaCode"); }
        }
        private System.String __FipsMsaDesc;
        [EntityField(true)]
        public System.String FipsMsaDesc
        {
            get { return __FipsMsaDesc; }
            set { SetField(ref __FipsMsaDesc, value, "FipsMsaDesc"); }
        }
        private System.String __TradeStyle1;
        [EntityField(true)]
        public System.String TradeStyle1
        {
            get { return __TradeStyle1; }
            set { SetField(ref __TradeStyle1, value, "TradeStyle1"); }
        }
        private System.String __YearStarted;
        [EntityField(true)]
        public System.String YearStarted
        {
            get { return __YearStarted; }
            set { SetField(ref __YearStarted, value, "YearStarted"); }
        }
        private System.String __MailingStreet;
        [EntityField(true)]
        public System.String MailingStreet
        {
            get { return __MailingStreet; }
            set { SetField(ref __MailingStreet, value, "MailingStreet"); }
        }
        private System.String __MailingCity;
        [EntityField(true)]
        public System.String MailingCity
        {
            get { return __MailingCity; }
            set { SetField(ref __MailingCity, value, "MailingCity"); }
        }
        private System.String __MailingState;
        [EntityField(true)]
        public System.String MailingState
        {
            get { return __MailingState; }
            set { SetField(ref __MailingState, value, "MailingState"); }
        }
        private System.String __MailingPostalCode;
        [EntityField(true)]
        public System.String MailingPostalCode
        {
            get { return __MailingPostalCode; }
            set { SetField(ref __MailingPostalCode, value, "MailingPostalCode"); }
        }
        private System.String __MailingCountry;
        [EntityField(true)]
        public System.String MailingCountry
        {
            get { return __MailingCountry; }
            set { SetField(ref __MailingCountry, value, "MailingCountry"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __MailingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address MailingAddress
        {
            get { return __MailingAddress; }
            set { SetField(ref __MailingAddress, value, "MailingAddress"); }
        }
        private System.String __Latitude;
        [EntityField(true)]
        public System.String Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.String __Longitude;
        [EntityField(true)]
        public System.String Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private System.String __PrimarySic;
        [EntityField(true)]
        public System.String PrimarySic
        {
            get { return __PrimarySic; }
            set { SetField(ref __PrimarySic, value, "PrimarySic"); }
        }
        private System.String __PrimarySicDesc;
        [EntityField(true)]
        public System.String PrimarySicDesc
        {
            get { return __PrimarySicDesc; }
            set { SetField(ref __PrimarySicDesc, value, "PrimarySicDesc"); }
        }
        private System.String __SecondSic;
        [EntityField(true)]
        public System.String SecondSic
        {
            get { return __SecondSic; }
            set { SetField(ref __SecondSic, value, "SecondSic"); }
        }
        private System.String __SecondSicDesc;
        [EntityField(true)]
        public System.String SecondSicDesc
        {
            get { return __SecondSicDesc; }
            set { SetField(ref __SecondSicDesc, value, "SecondSicDesc"); }
        }
        private System.String __ThirdSic;
        [EntityField(true)]
        public System.String ThirdSic
        {
            get { return __ThirdSic; }
            set { SetField(ref __ThirdSic, value, "ThirdSic"); }
        }
        private System.String __ThirdSicDesc;
        [EntityField(true)]
        public System.String ThirdSicDesc
        {
            get { return __ThirdSicDesc; }
            set { SetField(ref __ThirdSicDesc, value, "ThirdSicDesc"); }
        }
        private System.String __FourthSic;
        [EntityField(true)]
        public System.String FourthSic
        {
            get { return __FourthSic; }
            set { SetField(ref __FourthSic, value, "FourthSic"); }
        }
        private System.String __FourthSicDesc;
        [EntityField(true)]
        public System.String FourthSicDesc
        {
            get { return __FourthSicDesc; }
            set { SetField(ref __FourthSicDesc, value, "FourthSicDesc"); }
        }
        private System.String __FifthSic;
        [EntityField(true)]
        public System.String FifthSic
        {
            get { return __FifthSic; }
            set { SetField(ref __FifthSic, value, "FifthSic"); }
        }
        private System.String __FifthSicDesc;
        [EntityField(true)]
        public System.String FifthSicDesc
        {
            get { return __FifthSicDesc; }
            set { SetField(ref __FifthSicDesc, value, "FifthSicDesc"); }
        }
        private System.String __SixthSic;
        [EntityField(true)]
        public System.String SixthSic
        {
            get { return __SixthSic; }
            set { SetField(ref __SixthSic, value, "SixthSic"); }
        }
        private System.String __SixthSicDesc;
        [EntityField(true)]
        public System.String SixthSicDesc
        {
            get { return __SixthSicDesc; }
            set { SetField(ref __SixthSicDesc, value, "SixthSicDesc"); }
        }
        private System.String __PrimaryNaics;
        [EntityField(true)]
        public System.String PrimaryNaics
        {
            get { return __PrimaryNaics; }
            set { SetField(ref __PrimaryNaics, value, "PrimaryNaics"); }
        }
        private System.String __PrimaryNaicsDesc;
        [EntityField(true)]
        public System.String PrimaryNaicsDesc
        {
            get { return __PrimaryNaicsDesc; }
            set { SetField(ref __PrimaryNaicsDesc, value, "PrimaryNaicsDesc"); }
        }
        private System.String __SecondNaics;
        [EntityField(true)]
        public System.String SecondNaics
        {
            get { return __SecondNaics; }
            set { SetField(ref __SecondNaics, value, "SecondNaics"); }
        }
        private System.String __SecondNaicsDesc;
        [EntityField(true)]
        public System.String SecondNaicsDesc
        {
            get { return __SecondNaicsDesc; }
            set { SetField(ref __SecondNaicsDesc, value, "SecondNaicsDesc"); }
        }
        private System.String __ThirdNaics;
        [EntityField(true)]
        public System.String ThirdNaics
        {
            get { return __ThirdNaics; }
            set { SetField(ref __ThirdNaics, value, "ThirdNaics"); }
        }
        private System.String __ThirdNaicsDesc;
        [EntityField(true)]
        public System.String ThirdNaicsDesc
        {
            get { return __ThirdNaicsDesc; }
            set { SetField(ref __ThirdNaicsDesc, value, "ThirdNaicsDesc"); }
        }
        private System.String __FourthNaics;
        [EntityField(true)]
        public System.String FourthNaics
        {
            get { return __FourthNaics; }
            set { SetField(ref __FourthNaics, value, "FourthNaics"); }
        }
        private System.String __FourthNaicsDesc;
        [EntityField(true)]
        public System.String FourthNaicsDesc
        {
            get { return __FourthNaicsDesc; }
            set { SetField(ref __FourthNaicsDesc, value, "FourthNaicsDesc"); }
        }
        private System.String __FifthNaics;
        [EntityField(true)]
        public System.String FifthNaics
        {
            get { return __FifthNaics; }
            set { SetField(ref __FifthNaics, value, "FifthNaics"); }
        }
        private System.String __FifthNaicsDesc;
        [EntityField(true)]
        public System.String FifthNaicsDesc
        {
            get { return __FifthNaicsDesc; }
            set { SetField(ref __FifthNaicsDesc, value, "FifthNaicsDesc"); }
        }
        private System.String __SixthNaics;
        [EntityField(true)]
        public System.String SixthNaics
        {
            get { return __SixthNaics; }
            set { SetField(ref __SixthNaics, value, "SixthNaics"); }
        }
        private System.String __SixthNaicsDesc;
        [EntityField(true)]
        public System.String SixthNaicsDesc
        {
            get { return __SixthNaicsDesc; }
            set { SetField(ref __SixthNaicsDesc, value, "SixthNaicsDesc"); }
        }
        private PickDandBCompanyOwnOrRent __OwnOrRent;
        [EntityField(true)]
        public PickDandBCompanyOwnOrRent OwnOrRent
        {
            get { return __OwnOrRent; }
            set { SetField(ref __OwnOrRent, value, "OwnOrRent"); }
        }
        private System.Double? __EmployeesHere;
        [EntityField(true)]
        public System.Double? EmployeesHere
        {
            get { return __EmployeesHere; }
            set { SetField(ref __EmployeesHere, value, "EmployeesHere"); }
        }
        private PickDandBCompanyEmployeesHereReliability __EmployeesHereReliability;
        [EntityField(true)]
        public PickDandBCompanyEmployeesHereReliability EmployeesHereReliability
        {
            get { return __EmployeesHereReliability; }
            set { SetField(ref __EmployeesHereReliability, value, "EmployeesHereReliability"); }
        }
        private PickDandBCompanySalesVolumeReliability __SalesVolumeReliability;
        [EntityField(true)]
        public PickDandBCompanySalesVolumeReliability SalesVolumeReliability
        {
            get { return __SalesVolumeReliability; }
            set { SetField(ref __SalesVolumeReliability, value, "SalesVolumeReliability"); }
        }
        private PickDandBCompanyCurrencyCode __CurrencyCode;
        [EntityField(true)]
        public PickDandBCompanyCurrencyCode CurrencyCode
        {
            get { return __CurrencyCode; }
            set { SetField(ref __CurrencyCode, value, "CurrencyCode"); }
        }
        private PickDandBCompanyLegalStatus __LegalStatus;
        [EntityField(true)]
        public PickDandBCompanyLegalStatus LegalStatus
        {
            get { return __LegalStatus; }
            set { SetField(ref __LegalStatus, value, "LegalStatus"); }
        }
        private System.Double? __GlobalUltimateTotalEmployees;
        [EntityField(true)]
        public System.Double? GlobalUltimateTotalEmployees
        {
            get { return __GlobalUltimateTotalEmployees; }
            set { SetField(ref __GlobalUltimateTotalEmployees, value, "GlobalUltimateTotalEmployees"); }
        }
        private PickDandBCompanyEmployeesTotalReliability __EmployeesTotalReliability;
        [EntityField(true)]
        public PickDandBCompanyEmployeesTotalReliability EmployeesTotalReliability
        {
            get { return __EmployeesTotalReliability; }
            set { SetField(ref __EmployeesTotalReliability, value, "EmployeesTotalReliability"); }
        }
        private PickDandBCompanyMinorityOwned __MinorityOwned;
        [EntityField(true)]
        public PickDandBCompanyMinorityOwned MinorityOwned
        {
            get { return __MinorityOwned; }
            set { SetField(ref __MinorityOwned, value, "MinorityOwned"); }
        }
        private PickDandBCompanyWomenOwned __WomenOwned;
        [EntityField(true)]
        public PickDandBCompanyWomenOwned WomenOwned
        {
            get { return __WomenOwned; }
            set { SetField(ref __WomenOwned, value, "WomenOwned"); }
        }
        private PickDandBCompanySmallBusiness __SmallBusiness;
        [EntityField(true)]
        public PickDandBCompanySmallBusiness SmallBusiness
        {
            get { return __SmallBusiness; }
            set { SetField(ref __SmallBusiness, value, "SmallBusiness"); }
        }
        private PickDandBCompanyMarketingSegmentationCluster __MarketingSegmentationCluster;
        [EntityField(true)]
        public PickDandBCompanyMarketingSegmentationCluster MarketingSegmentationCluster
        {
            get { return __MarketingSegmentationCluster; }
            set { SetField(ref __MarketingSegmentationCluster, value, "MarketingSegmentationCluster"); }
        }
        private PickDandBCompanyImportExportAgent __ImportExportAgent;
        [EntityField(true)]
        public PickDandBCompanyImportExportAgent ImportExportAgent
        {
            get { return __ImportExportAgent; }
            set { SetField(ref __ImportExportAgent, value, "ImportExportAgent"); }
        }
        private PickDandBCompanySubsidiary __Subsidiary;
        [EntityField(true)]
        public PickDandBCompanySubsidiary Subsidiary
        {
            get { return __Subsidiary; }
            set { SetField(ref __Subsidiary, value, "Subsidiary"); }
        }
        private System.String __TradeStyle2;
        [EntityField(true)]
        public System.String TradeStyle2
        {
            get { return __TradeStyle2; }
            set { SetField(ref __TradeStyle2, value, "TradeStyle2"); }
        }
        private System.String __TradeStyle3;
        [EntityField(true)]
        public System.String TradeStyle3
        {
            get { return __TradeStyle3; }
            set { SetField(ref __TradeStyle3, value, "TradeStyle3"); }
        }
        private System.String __TradeStyle4;
        [EntityField(true)]
        public System.String TradeStyle4
        {
            get { return __TradeStyle4; }
            set { SetField(ref __TradeStyle4, value, "TradeStyle4"); }
        }
        private System.String __TradeStyle5;
        [EntityField(true)]
        public System.String TradeStyle5
        {
            get { return __TradeStyle5; }
            set { SetField(ref __TradeStyle5, value, "TradeStyle5"); }
        }
        private System.String __NationalId;
        [EntityField(true)]
        public System.String NationalId
        {
            get { return __NationalId; }
            set { SetField(ref __NationalId, value, "NationalId"); }
        }
        private PickDandBCompanyNationalIdType __NationalIdType;
        [EntityField(true)]
        public PickDandBCompanyNationalIdType NationalIdType
        {
            get { return __NationalIdType; }
            set { SetField(ref __NationalIdType, value, "NationalIdType"); }
        }
        private System.String __UsTaxId;
        [EntityField(true)]
        public System.String UsTaxId
        {
            get { return __UsTaxId; }
            set { SetField(ref __UsTaxId, value, "UsTaxId"); }
        }
        private PickDandBCompanyGeoCodeAccuracy __GeoCodeAccuracy;
        [EntityField(true)]
        public PickDandBCompanyGeoCodeAccuracy GeoCodeAccuracy
        {
            get { return __GeoCodeAccuracy; }
            set { SetField(ref __GeoCodeAccuracy, value, "GeoCodeAccuracy"); }
        }
        private System.Int32? __FamilyMembers;
        [EntityField(true)]
        public System.Int32? FamilyMembers
        {
            get { return __FamilyMembers; }
            set { SetField(ref __FamilyMembers, value, "FamilyMembers"); }
        }
        private PickDandBCompanyMarketingPreScreen __MarketingPreScreen;
        [EntityField(true)]
        public PickDandBCompanyMarketingPreScreen MarketingPreScreen
        {
            get { return __MarketingPreScreen; }
            set { SetField(ref __MarketingPreScreen, value, "MarketingPreScreen"); }
        }
        private System.String __GlobalUltimateDunsNumber;
        [EntityField(true)]
        public System.String GlobalUltimateDunsNumber
        {
            get { return __GlobalUltimateDunsNumber; }
            set { SetField(ref __GlobalUltimateDunsNumber, value, "GlobalUltimateDunsNumber"); }
        }
        private System.String __GlobalUltimateBusinessName;
        [EntityField(true)]
        public System.String GlobalUltimateBusinessName
        {
            get { return __GlobalUltimateBusinessName; }
            set { SetField(ref __GlobalUltimateBusinessName, value, "GlobalUltimateBusinessName"); }
        }
        private System.String __ParentOrHqDunsNumber;
        [EntityField(true)]
        public System.String ParentOrHqDunsNumber
        {
            get { return __ParentOrHqDunsNumber; }
            set { SetField(ref __ParentOrHqDunsNumber, value, "ParentOrHqDunsNumber"); }
        }
        private System.String __ParentOrHqBusinessName;
        [EntityField(true)]
        public System.String ParentOrHqBusinessName
        {
            get { return __ParentOrHqBusinessName; }
            set { SetField(ref __ParentOrHqBusinessName, value, "ParentOrHqBusinessName"); }
        }
        private System.String __DomesticUltimateDunsNumber;
        [EntityField(true)]
        public System.String DomesticUltimateDunsNumber
        {
            get { return __DomesticUltimateDunsNumber; }
            set { SetField(ref __DomesticUltimateDunsNumber, value, "DomesticUltimateDunsNumber"); }
        }
        private System.String __DomesticUltimateBusinessName;
        [EntityField(true)]
        public System.String DomesticUltimateBusinessName
        {
            get { return __DomesticUltimateBusinessName; }
            set { SetField(ref __DomesticUltimateBusinessName, value, "DomesticUltimateBusinessName"); }
        }
        private PickDandBCompanyLocationStatus __LocationStatus;
        [EntityField(true)]
        public PickDandBCompanyLocationStatus LocationStatus
        {
            get { return __LocationStatus; }
            set { SetField(ref __LocationStatus, value, "LocationStatus"); }
        }
        private PickDandBCompanyCompanyCurrencyIsoCode __CompanyCurrencyIsoCode;
        [EntityField(true)]
        public PickDandBCompanyCompanyCurrencyIsoCode CompanyCurrencyIsoCode
        {
            get { return __CompanyCurrencyIsoCode; }
            set { SetField(ref __CompanyCurrencyIsoCode, value, "CompanyCurrencyIsoCode"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        [JsonIgnore]
        [ReferencedByField("DandbCompanyId")]
        public RelationShip<DandBCompany,Account> Accounts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("DandbCompanyId")]
        public RelationShip<DandBCompany,Lead> Leads
        {
            get;set;
        }
    }
    [EntityName("Dashboard")]
    public class Dashboard : ISalesforceEntity
    {
    [JsonConstructor]
        private Dashboard(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Dashboard()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __FolderId;
        [EntityField(false)]
        public System.String FolderId
        {
            get { return __FolderId; }
            set { SetField(ref __FolderId, value, "FolderId"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickDashboardLeftSize __LeftSize;
        [EntityField(false)]
        public PickDashboardLeftSize LeftSize
        {
            get { return __LeftSize; }
            set { SetField(ref __LeftSize, value, "LeftSize"); }
        }
        private PickDashboardMiddleSize __MiddleSize;
        [EntityField(true)]
        public PickDashboardMiddleSize MiddleSize
        {
            get { return __MiddleSize; }
            set { SetField(ref __MiddleSize, value, "MiddleSize"); }
        }
        private PickDashboardRightSize __RightSize;
        [EntityField(false)]
        public PickDashboardRightSize RightSize
        {
            get { return __RightSize; }
            set { SetField(ref __RightSize, value, "RightSize"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __RunningUserId;
        [EntityField(false)]
        public System.String RunningUserId
        {
            get { return __RunningUserId; }
            set { SetField(ref __RunningUserId, value, "RunningUserId"); }
        }
        private System.Int32 __TitleColor;
        [EntityField(false)]
        public System.Int32 TitleColor
        {
            get { return __TitleColor; }
            set { SetField(ref __TitleColor, value, "TitleColor"); }
        }
        private System.Int32 __TitleSize;
        [EntityField(false)]
        public System.Int32 TitleSize
        {
            get { return __TitleSize; }
            set { SetField(ref __TitleSize, value, "TitleSize"); }
        }
        private System.Int32 __TextColor;
        [EntityField(false)]
        public System.Int32 TextColor
        {
            get { return __TextColor; }
            set { SetField(ref __TextColor, value, "TextColor"); }
        }
        private System.Int32 __BackgroundStart;
        [EntityField(false)]
        public System.Int32 BackgroundStart
        {
            get { return __BackgroundStart; }
            set { SetField(ref __BackgroundStart, value, "BackgroundStart"); }
        }
        private System.Int32 __BackgroundEnd;
        [EntityField(false)]
        public System.Int32 BackgroundEnd
        {
            get { return __BackgroundEnd; }
            set { SetField(ref __BackgroundEnd, value, "BackgroundEnd"); }
        }
        private PickDashboardBackgroundDirection __BackgroundDirection;
        [EntityField(false)]
        public PickDashboardBackgroundDirection BackgroundDirection
        {
            get { return __BackgroundDirection; }
            set { SetField(ref __BackgroundDirection, value, "BackgroundDirection"); }
        }
        private PickDashboardType __Type;
        [EntityField(false)]
        public PickDashboardType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Dashboard,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Dashboard,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Dashboard,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("DashboardId")]
        public RelationShip<Dashboard,DashboardComponent> DashboardComponents
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Dashboard,DashboardFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Dashboard,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
    }
    [EntityName("DashboardComponent")]
    public class DashboardComponent : ISalesforceEntity
    {
    [JsonConstructor]
        private DashboardComponent(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DashboardComponent()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DashboardId;
        [EntityField(false)]
        public System.String DashboardId
        {
            get { return __DashboardId; }
            set { SetField(ref __DashboardId, value, "DashboardId"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<DashboardComponent,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<DashboardComponent,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<DashboardComponent,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<DashboardComponent,DashboardComponentFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<DashboardComponent,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
    }
    [EntityName("DashboardComponentFeed")]
    public class DashboardComponentFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private DashboardComponentFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DashboardComponentFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickDashboardComponentFeedType __Type;
        [EntityField(true)]
        public PickDashboardComponentFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<DashboardComponentFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<DashboardComponentFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<DashboardComponentFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("DashboardFeed")]
    public class DashboardFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private DashboardFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DashboardFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickDashboardFeedType __Type;
        [EntityField(true)]
        public PickDashboardFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<DashboardFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<DashboardFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<DashboardFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("DatacloudCompany")]
    public class DatacloudCompany : ISalesforceEntity
    {
    [JsonConstructor]
        private DatacloudCompany(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DatacloudCompany()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ExternalId;
        [EntityField(true)]
        public System.String ExternalId
        {
            get { return __ExternalId; }
            set { SetField(ref __ExternalId, value, "ExternalId"); }
        }
        private System.String __CompanyId;
        [EntityField(true)]
        public System.String CompanyId
        {
            get { return __CompanyId; }
            set { SetField(ref __CompanyId, value, "CompanyId"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsInactive;
        [EntityField(false)]
        public System.Boolean IsInactive
        {
            get { return __IsInactive; }
            set { SetField(ref __IsInactive, value, "IsInactive"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.String __Zip;
        [EntityField(true)]
        public System.String Zip
        {
            get { return __Zip; }
            set { SetField(ref __Zip, value, "Zip"); }
        }
        private PickDatacloudCompanySite __Site;
        [EntityField(true)]
        public PickDatacloudCompanySite Site
        {
            get { return __Site; }
            set { SetField(ref __Site, value, "Site"); }
        }
        private System.String __Industry;
        [EntityField(true)]
        public System.String Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.String __DunsNumber;
        [EntityField(true)]
        public System.String DunsNumber
        {
            get { return __DunsNumber; }
            set { SetField(ref __DunsNumber, value, "DunsNumber"); }
        }
        private System.String __NaicsCode;
        [EntityField(true)]
        public System.String NaicsCode
        {
            get { return __NaicsCode; }
            set { SetField(ref __NaicsCode, value, "NaicsCode"); }
        }
        private System.String __NaicsDesc;
        [EntityField(true)]
        public System.String NaicsDesc
        {
            get { return __NaicsDesc; }
            set { SetField(ref __NaicsDesc, value, "NaicsDesc"); }
        }
        private System.String __Sic;
        [EntityField(true)]
        public System.String Sic
        {
            get { return __Sic; }
            set { SetField(ref __Sic, value, "Sic"); }
        }
        private System.String __SicDesc;
        [EntityField(true)]
        public System.String SicDesc
        {
            get { return __SicDesc; }
            set { SetField(ref __SicDesc, value, "SicDesc"); }
        }
        private System.String __Ownership;
        [EntityField(true)]
        public System.String Ownership
        {
            get { return __Ownership; }
            set { SetField(ref __Ownership, value, "Ownership"); }
        }
        private System.Boolean __IsOwned;
        [EntityField(false)]
        public System.Boolean IsOwned
        {
            get { return __IsOwned; }
            set { SetField(ref __IsOwned, value, "IsOwned"); }
        }
        private System.String __TickerSymbol;
        [EntityField(true)]
        public System.String TickerSymbol
        {
            get { return __TickerSymbol; }
            set { SetField(ref __TickerSymbol, value, "TickerSymbol"); }
        }
        private System.String __TradeStyle;
        [EntityField(true)]
        public System.String TradeStyle
        {
            get { return __TradeStyle; }
            set { SetField(ref __TradeStyle, value, "TradeStyle"); }
        }
        private System.String __Website;
        [EntityField(true)]
        public System.String Website
        {
            get { return __Website; }
            set { SetField(ref __Website, value, "Website"); }
        }
        private System.String __YearStarted;
        [EntityField(true)]
        public System.String YearStarted
        {
            get { return __YearStarted; }
            set { SetField(ref __YearStarted, value, "YearStarted"); }
        }
        private System.Int32? __ActiveContacts;
        [EntityField(true)]
        public System.Int32? ActiveContacts
        {
            get { return __ActiveContacts; }
            set { SetField(ref __ActiveContacts, value, "ActiveContacts"); }
        }
        private System.DateTime? __UpdatedDate;
        [EntityField(true)]
        public System.DateTime? UpdatedDate
        {
            get { return __UpdatedDate; }
            set { SetField(ref __UpdatedDate, value, "UpdatedDate"); }
        }
    }
    [EntityName("DatacloudContact")]
    public class DatacloudContact : ISalesforceEntity
    {
    [JsonConstructor]
        private DatacloudContact(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DatacloudContact()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ExternalId;
        [EntityField(true)]
        public System.String ExternalId
        {
            get { return __ExternalId; }
            set { SetField(ref __ExternalId, value, "ExternalId"); }
        }
        private System.String __CompanyId;
        [EntityField(true)]
        public System.String CompanyId
        {
            get { return __CompanyId; }
            set { SetField(ref __CompanyId, value, "CompanyId"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __CompanyName;
        [EntityField(false)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.Boolean __IsInactive;
        [EntityField(false)]
        public System.Boolean IsInactive
        {
            get { return __IsInactive; }
            set { SetField(ref __IsInactive, value, "IsInactive"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __LastName;
        [EntityField(true)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.String __Zip;
        [EntityField(true)]
        public System.String Zip
        {
            get { return __Zip; }
            set { SetField(ref __Zip, value, "Zip"); }
        }
        private PickDatacloudContactDepartment __Department;
        [EntityField(true)]
        public PickDatacloudContactDepartment Department
        {
            get { return __Department; }
            set { SetField(ref __Department, value, "Department"); }
        }
        private PickDatacloudContactLevel __Level;
        [EntityField(true)]
        public PickDatacloudContactLevel Level
        {
            get { return __Level; }
            set { SetField(ref __Level, value, "Level"); }
        }
        private System.Boolean __IsOwned;
        [EntityField(false)]
        public System.Boolean IsOwned
        {
            get { return __IsOwned; }
            set { SetField(ref __IsOwned, value, "IsOwned"); }
        }
        private System.DateTime? __UpdatedDate;
        [EntityField(true)]
        public System.DateTime? UpdatedDate
        {
            get { return __UpdatedDate; }
            set { SetField(ref __UpdatedDate, value, "UpdatedDate"); }
        }
    }
    [EntityName("DatacloudDandBCompany")]
    public class DatacloudDandBCompany : ISalesforceEntity
    {
    [JsonConstructor]
        private DatacloudDandBCompany(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DatacloudDandBCompany()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ExternalId;
        [EntityField(true)]
        public System.String ExternalId
        {
            get { return __ExternalId; }
            set { SetField(ref __ExternalId, value, "ExternalId"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DunsNumber;
        [EntityField(true)]
        public System.String DunsNumber
        {
            get { return __DunsNumber; }
            set { SetField(ref __DunsNumber, value, "DunsNumber"); }
        }
        private System.String __CompanyId;
        [EntityField(true)]
        public System.String CompanyId
        {
            get { return __CompanyId; }
            set { SetField(ref __CompanyId, value, "CompanyId"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.String __Zip;
        [EntityField(true)]
        public System.String Zip
        {
            get { return __Zip; }
            set { SetField(ref __Zip, value, "Zip"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __CountryAccessCode;
        [EntityField(true)]
        public System.String CountryAccessCode
        {
            get { return __CountryAccessCode; }
            set { SetField(ref __CountryAccessCode, value, "CountryAccessCode"); }
        }
        private PickDatacloudDandBCompanyPublicIndicator __PublicIndicator;
        [EntityField(true)]
        public PickDatacloudDandBCompanyPublicIndicator PublicIndicator
        {
            get { return __PublicIndicator; }
            set { SetField(ref __PublicIndicator, value, "PublicIndicator"); }
        }
        private System.String __StockSymbol;
        [EntityField(true)]
        public System.String StockSymbol
        {
            get { return __StockSymbol; }
            set { SetField(ref __StockSymbol, value, "StockSymbol"); }
        }
        private System.String __StockExchange;
        [EntityField(true)]
        public System.String StockExchange
        {
            get { return __StockExchange; }
            set { SetField(ref __StockExchange, value, "StockExchange"); }
        }
        private System.Double? __SalesVolume;
        [EntityField(true)]
        public System.Double? SalesVolume
        {
            get { return __SalesVolume; }
            set { SetField(ref __SalesVolume, value, "SalesVolume"); }
        }
        private System.String __URL;
        [EntityField(true)]
        public System.String URL
        {
            get { return __URL; }
            set { SetField(ref __URL, value, "URL"); }
        }
        private PickDatacloudDandBCompanyOutOfBusiness __OutOfBusiness;
        [EntityField(true)]
        public PickDatacloudDandBCompanyOutOfBusiness OutOfBusiness
        {
            get { return __OutOfBusiness; }
            set { SetField(ref __OutOfBusiness, value, "OutOfBusiness"); }
        }
        private System.Double? __EmployeesTotal;
        [EntityField(true)]
        public System.Double? EmployeesTotal
        {
            get { return __EmployeesTotal; }
            set { SetField(ref __EmployeesTotal, value, "EmployeesTotal"); }
        }
        private System.String __FipsMsaCode;
        [EntityField(true)]
        public System.String FipsMsaCode
        {
            get { return __FipsMsaCode; }
            set { SetField(ref __FipsMsaCode, value, "FipsMsaCode"); }
        }
        private System.String __FipsMsaDesc;
        [EntityField(true)]
        public System.String FipsMsaDesc
        {
            get { return __FipsMsaDesc; }
            set { SetField(ref __FipsMsaDesc, value, "FipsMsaDesc"); }
        }
        private System.String __TradeStyle1;
        [EntityField(true)]
        public System.String TradeStyle1
        {
            get { return __TradeStyle1; }
            set { SetField(ref __TradeStyle1, value, "TradeStyle1"); }
        }
        private System.String __YearStarted;
        [EntityField(true)]
        public System.String YearStarted
        {
            get { return __YearStarted; }
            set { SetField(ref __YearStarted, value, "YearStarted"); }
        }
        private System.String __MailingStreet;
        [EntityField(true)]
        public System.String MailingStreet
        {
            get { return __MailingStreet; }
            set { SetField(ref __MailingStreet, value, "MailingStreet"); }
        }
        private System.String __MailingCity;
        [EntityField(true)]
        public System.String MailingCity
        {
            get { return __MailingCity; }
            set { SetField(ref __MailingCity, value, "MailingCity"); }
        }
        private System.String __MailingState;
        [EntityField(true)]
        public System.String MailingState
        {
            get { return __MailingState; }
            set { SetField(ref __MailingState, value, "MailingState"); }
        }
        private System.String __MailingCountry;
        [EntityField(true)]
        public System.String MailingCountry
        {
            get { return __MailingCountry; }
            set { SetField(ref __MailingCountry, value, "MailingCountry"); }
        }
        private System.String __MailingZip;
        [EntityField(true)]
        public System.String MailingZip
        {
            get { return __MailingZip; }
            set { SetField(ref __MailingZip, value, "MailingZip"); }
        }
        private System.String __Latitude;
        [EntityField(true)]
        public System.String Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.String __Longitude;
        [EntityField(true)]
        public System.String Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private System.String __PrimarySic;
        [EntityField(true)]
        public System.String PrimarySic
        {
            get { return __PrimarySic; }
            set { SetField(ref __PrimarySic, value, "PrimarySic"); }
        }
        private System.String __PrimarySicDesc;
        [EntityField(true)]
        public System.String PrimarySicDesc
        {
            get { return __PrimarySicDesc; }
            set { SetField(ref __PrimarySicDesc, value, "PrimarySicDesc"); }
        }
        private System.String __SecondSic;
        [EntityField(true)]
        public System.String SecondSic
        {
            get { return __SecondSic; }
            set { SetField(ref __SecondSic, value, "SecondSic"); }
        }
        private System.String __SecondSicDesc;
        [EntityField(true)]
        public System.String SecondSicDesc
        {
            get { return __SecondSicDesc; }
            set { SetField(ref __SecondSicDesc, value, "SecondSicDesc"); }
        }
        private System.String __ThirdSic;
        [EntityField(true)]
        public System.String ThirdSic
        {
            get { return __ThirdSic; }
            set { SetField(ref __ThirdSic, value, "ThirdSic"); }
        }
        private System.String __ThirdSicDesc;
        [EntityField(true)]
        public System.String ThirdSicDesc
        {
            get { return __ThirdSicDesc; }
            set { SetField(ref __ThirdSicDesc, value, "ThirdSicDesc"); }
        }
        private System.String __FourthSic;
        [EntityField(true)]
        public System.String FourthSic
        {
            get { return __FourthSic; }
            set { SetField(ref __FourthSic, value, "FourthSic"); }
        }
        private System.String __FourthSicDesc;
        [EntityField(true)]
        public System.String FourthSicDesc
        {
            get { return __FourthSicDesc; }
            set { SetField(ref __FourthSicDesc, value, "FourthSicDesc"); }
        }
        private System.String __FifthSic;
        [EntityField(true)]
        public System.String FifthSic
        {
            get { return __FifthSic; }
            set { SetField(ref __FifthSic, value, "FifthSic"); }
        }
        private System.String __FifthSicDesc;
        [EntityField(true)]
        public System.String FifthSicDesc
        {
            get { return __FifthSicDesc; }
            set { SetField(ref __FifthSicDesc, value, "FifthSicDesc"); }
        }
        private System.String __SixthSic;
        [EntityField(true)]
        public System.String SixthSic
        {
            get { return __SixthSic; }
            set { SetField(ref __SixthSic, value, "SixthSic"); }
        }
        private System.String __SixthSicDesc;
        [EntityField(true)]
        public System.String SixthSicDesc
        {
            get { return __SixthSicDesc; }
            set { SetField(ref __SixthSicDesc, value, "SixthSicDesc"); }
        }
        private System.String __PrimaryNaics;
        [EntityField(true)]
        public System.String PrimaryNaics
        {
            get { return __PrimaryNaics; }
            set { SetField(ref __PrimaryNaics, value, "PrimaryNaics"); }
        }
        private System.String __PrimaryNaicsDesc;
        [EntityField(true)]
        public System.String PrimaryNaicsDesc
        {
            get { return __PrimaryNaicsDesc; }
            set { SetField(ref __PrimaryNaicsDesc, value, "PrimaryNaicsDesc"); }
        }
        private System.String __SecondNaics;
        [EntityField(true)]
        public System.String SecondNaics
        {
            get { return __SecondNaics; }
            set { SetField(ref __SecondNaics, value, "SecondNaics"); }
        }
        private System.String __SecondNaicsDesc;
        [EntityField(true)]
        public System.String SecondNaicsDesc
        {
            get { return __SecondNaicsDesc; }
            set { SetField(ref __SecondNaicsDesc, value, "SecondNaicsDesc"); }
        }
        private System.String __ThirdNaics;
        [EntityField(true)]
        public System.String ThirdNaics
        {
            get { return __ThirdNaics; }
            set { SetField(ref __ThirdNaics, value, "ThirdNaics"); }
        }
        private System.String __ThirdNaicsDesc;
        [EntityField(true)]
        public System.String ThirdNaicsDesc
        {
            get { return __ThirdNaicsDesc; }
            set { SetField(ref __ThirdNaicsDesc, value, "ThirdNaicsDesc"); }
        }
        private System.String __FourthNaics;
        [EntityField(true)]
        public System.String FourthNaics
        {
            get { return __FourthNaics; }
            set { SetField(ref __FourthNaics, value, "FourthNaics"); }
        }
        private System.String __FourthNaicsDesc;
        [EntityField(true)]
        public System.String FourthNaicsDesc
        {
            get { return __FourthNaicsDesc; }
            set { SetField(ref __FourthNaicsDesc, value, "FourthNaicsDesc"); }
        }
        private System.String __FifthNaics;
        [EntityField(true)]
        public System.String FifthNaics
        {
            get { return __FifthNaics; }
            set { SetField(ref __FifthNaics, value, "FifthNaics"); }
        }
        private System.String __FifthNaicsDesc;
        [EntityField(true)]
        public System.String FifthNaicsDesc
        {
            get { return __FifthNaicsDesc; }
            set { SetField(ref __FifthNaicsDesc, value, "FifthNaicsDesc"); }
        }
        private System.String __SixthNaics;
        [EntityField(true)]
        public System.String SixthNaics
        {
            get { return __SixthNaics; }
            set { SetField(ref __SixthNaics, value, "SixthNaics"); }
        }
        private System.String __SixthNaicsDesc;
        [EntityField(true)]
        public System.String SixthNaicsDesc
        {
            get { return __SixthNaicsDesc; }
            set { SetField(ref __SixthNaicsDesc, value, "SixthNaicsDesc"); }
        }
        private PickDatacloudDandBCompanyOwnOrRent __OwnOrRent;
        [EntityField(true)]
        public PickDatacloudDandBCompanyOwnOrRent OwnOrRent
        {
            get { return __OwnOrRent; }
            set { SetField(ref __OwnOrRent, value, "OwnOrRent"); }
        }
        private System.Double? __EmployeesHere;
        [EntityField(true)]
        public System.Double? EmployeesHere
        {
            get { return __EmployeesHere; }
            set { SetField(ref __EmployeesHere, value, "EmployeesHere"); }
        }
        private PickDatacloudDandBCompanyEmployeesHereReliability __EmployeesHereReliability;
        [EntityField(true)]
        public PickDatacloudDandBCompanyEmployeesHereReliability EmployeesHereReliability
        {
            get { return __EmployeesHereReliability; }
            set { SetField(ref __EmployeesHereReliability, value, "EmployeesHereReliability"); }
        }
        private PickDatacloudDandBCompanySalesVolumeReliability __SalesVolumeReliability;
        [EntityField(true)]
        public PickDatacloudDandBCompanySalesVolumeReliability SalesVolumeReliability
        {
            get { return __SalesVolumeReliability; }
            set { SetField(ref __SalesVolumeReliability, value, "SalesVolumeReliability"); }
        }
        private PickDatacloudDandBCompanyCurrencyCode __CurrencyCode;
        [EntityField(true)]
        public PickDatacloudDandBCompanyCurrencyCode CurrencyCode
        {
            get { return __CurrencyCode; }
            set { SetField(ref __CurrencyCode, value, "CurrencyCode"); }
        }
        private PickDatacloudDandBCompanyLegalStatus __LegalStatus;
        [EntityField(true)]
        public PickDatacloudDandBCompanyLegalStatus LegalStatus
        {
            get { return __LegalStatus; }
            set { SetField(ref __LegalStatus, value, "LegalStatus"); }
        }
        private System.Double? __GlobalUltimateTotalEmployees;
        [EntityField(true)]
        public System.Double? GlobalUltimateTotalEmployees
        {
            get { return __GlobalUltimateTotalEmployees; }
            set { SetField(ref __GlobalUltimateTotalEmployees, value, "GlobalUltimateTotalEmployees"); }
        }
        private PickDatacloudDandBCompanyEmployeesTotalReliability __EmployeesTotalReliability;
        [EntityField(true)]
        public PickDatacloudDandBCompanyEmployeesTotalReliability EmployeesTotalReliability
        {
            get { return __EmployeesTotalReliability; }
            set { SetField(ref __EmployeesTotalReliability, value, "EmployeesTotalReliability"); }
        }
        private PickDatacloudDandBCompanyMinorityOwned __MinorityOwned;
        [EntityField(true)]
        public PickDatacloudDandBCompanyMinorityOwned MinorityOwned
        {
            get { return __MinorityOwned; }
            set { SetField(ref __MinorityOwned, value, "MinorityOwned"); }
        }
        private PickDatacloudDandBCompanyWomenOwned __WomenOwned;
        [EntityField(true)]
        public PickDatacloudDandBCompanyWomenOwned WomenOwned
        {
            get { return __WomenOwned; }
            set { SetField(ref __WomenOwned, value, "WomenOwned"); }
        }
        private PickDatacloudDandBCompanySmallBusiness __SmallBusiness;
        [EntityField(true)]
        public PickDatacloudDandBCompanySmallBusiness SmallBusiness
        {
            get { return __SmallBusiness; }
            set { SetField(ref __SmallBusiness, value, "SmallBusiness"); }
        }
        private PickDatacloudDandBCompanyMarketingSegmentationCluster __MarketingSegmentationCluster;
        [EntityField(true)]
        public PickDatacloudDandBCompanyMarketingSegmentationCluster MarketingSegmentationCluster
        {
            get { return __MarketingSegmentationCluster; }
            set { SetField(ref __MarketingSegmentationCluster, value, "MarketingSegmentationCluster"); }
        }
        private PickDatacloudDandBCompanyImportExportAgent __ImportExportAgent;
        [EntityField(true)]
        public PickDatacloudDandBCompanyImportExportAgent ImportExportAgent
        {
            get { return __ImportExportAgent; }
            set { SetField(ref __ImportExportAgent, value, "ImportExportAgent"); }
        }
        private PickDatacloudDandBCompanySubsidiary __Subsidiary;
        [EntityField(true)]
        public PickDatacloudDandBCompanySubsidiary Subsidiary
        {
            get { return __Subsidiary; }
            set { SetField(ref __Subsidiary, value, "Subsidiary"); }
        }
        private System.String __TradeStyle2;
        [EntityField(true)]
        public System.String TradeStyle2
        {
            get { return __TradeStyle2; }
            set { SetField(ref __TradeStyle2, value, "TradeStyle2"); }
        }
        private System.String __TradeStyle3;
        [EntityField(true)]
        public System.String TradeStyle3
        {
            get { return __TradeStyle3; }
            set { SetField(ref __TradeStyle3, value, "TradeStyle3"); }
        }
        private System.String __TradeStyle4;
        [EntityField(true)]
        public System.String TradeStyle4
        {
            get { return __TradeStyle4; }
            set { SetField(ref __TradeStyle4, value, "TradeStyle4"); }
        }
        private System.String __TradeStyle5;
        [EntityField(true)]
        public System.String TradeStyle5
        {
            get { return __TradeStyle5; }
            set { SetField(ref __TradeStyle5, value, "TradeStyle5"); }
        }
        private System.String __NationalId;
        [EntityField(true)]
        public System.String NationalId
        {
            get { return __NationalId; }
            set { SetField(ref __NationalId, value, "NationalId"); }
        }
        private PickDatacloudDandBCompanyNationalIdType __NationalIdType;
        [EntityField(true)]
        public PickDatacloudDandBCompanyNationalIdType NationalIdType
        {
            get { return __NationalIdType; }
            set { SetField(ref __NationalIdType, value, "NationalIdType"); }
        }
        private System.String __UsTaxId;
        [EntityField(true)]
        public System.String UsTaxId
        {
            get { return __UsTaxId; }
            set { SetField(ref __UsTaxId, value, "UsTaxId"); }
        }
        private PickDatacloudDandBCompanyGeoCodeAccuracy __GeoCodeAccuracy;
        [EntityField(true)]
        public PickDatacloudDandBCompanyGeoCodeAccuracy GeoCodeAccuracy
        {
            get { return __GeoCodeAccuracy; }
            set { SetField(ref __GeoCodeAccuracy, value, "GeoCodeAccuracy"); }
        }
        private System.Int32? __FamilyMembers;
        [EntityField(true)]
        public System.Int32? FamilyMembers
        {
            get { return __FamilyMembers; }
            set { SetField(ref __FamilyMembers, value, "FamilyMembers"); }
        }
        private PickDatacloudDandBCompanyMarketingPreScreen __MarketingPreScreen;
        [EntityField(true)]
        public PickDatacloudDandBCompanyMarketingPreScreen MarketingPreScreen
        {
            get { return __MarketingPreScreen; }
            set { SetField(ref __MarketingPreScreen, value, "MarketingPreScreen"); }
        }
        private System.String __GlobalUltimateDunsNumber;
        [EntityField(true)]
        public System.String GlobalUltimateDunsNumber
        {
            get { return __GlobalUltimateDunsNumber; }
            set { SetField(ref __GlobalUltimateDunsNumber, value, "GlobalUltimateDunsNumber"); }
        }
        private System.String __GlobalUltimateBusinessName;
        [EntityField(true)]
        public System.String GlobalUltimateBusinessName
        {
            get { return __GlobalUltimateBusinessName; }
            set { SetField(ref __GlobalUltimateBusinessName, value, "GlobalUltimateBusinessName"); }
        }
        private System.String __ParentOrHqDunsNumber;
        [EntityField(true)]
        public System.String ParentOrHqDunsNumber
        {
            get { return __ParentOrHqDunsNumber; }
            set { SetField(ref __ParentOrHqDunsNumber, value, "ParentOrHqDunsNumber"); }
        }
        private System.String __ParentOrHqBusinessName;
        [EntityField(true)]
        public System.String ParentOrHqBusinessName
        {
            get { return __ParentOrHqBusinessName; }
            set { SetField(ref __ParentOrHqBusinessName, value, "ParentOrHqBusinessName"); }
        }
        private System.String __DomesticUltimateDunsNumber;
        [EntityField(true)]
        public System.String DomesticUltimateDunsNumber
        {
            get { return __DomesticUltimateDunsNumber; }
            set { SetField(ref __DomesticUltimateDunsNumber, value, "DomesticUltimateDunsNumber"); }
        }
        private System.String __DomesticUltimateBusinessName;
        [EntityField(true)]
        public System.String DomesticUltimateBusinessName
        {
            get { return __DomesticUltimateBusinessName; }
            set { SetField(ref __DomesticUltimateBusinessName, value, "DomesticUltimateBusinessName"); }
        }
        private PickDatacloudDandBCompanyLocationStatus __LocationStatus;
        [EntityField(true)]
        public PickDatacloudDandBCompanyLocationStatus LocationStatus
        {
            get { return __LocationStatus; }
            set { SetField(ref __LocationStatus, value, "LocationStatus"); }
        }
        private PickDatacloudDandBCompanyCompanyCurrencyIsoCode __CompanyCurrencyIsoCode;
        [EntityField(true)]
        public PickDatacloudDandBCompanyCompanyCurrencyIsoCode CompanyCurrencyIsoCode
        {
            get { return __CompanyCurrencyIsoCode; }
            set { SetField(ref __CompanyCurrencyIsoCode, value, "CompanyCurrencyIsoCode"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
    }
    [EntityName("DatacloudOwnedEntity")]
    public class DatacloudOwnedEntity : ISalesforceEntity
    {
    [JsonConstructor]
        private DatacloudOwnedEntity(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DatacloudOwnedEntity()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __DataDotComKey;
        [EntityField(false)]
        public System.String DataDotComKey
        {
            get { return __DataDotComKey; }
            set { SetField(ref __DataDotComKey, value, "DataDotComKey"); }
        }
        private PickDatacloudOwnedEntityDatacloudEntityType __DatacloudEntityType;
        [EntityField(false)]
        public PickDatacloudOwnedEntityDatacloudEntityType DatacloudEntityType
        {
            get { return __DatacloudEntityType; }
            set { SetField(ref __DatacloudEntityType, value, "DatacloudEntityType"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private System.String __PurchaseUsageId;
        [EntityField(true)]
        public System.String PurchaseUsageId
        {
            get { return __PurchaseUsageId; }
            set { SetField(ref __PurchaseUsageId, value, "PurchaseUsageId"); }
        }
        private PickDatacloudOwnedEntityPurchaseType __PurchaseType;
        [EntityField(true)]
        public PickDatacloudOwnedEntityPurchaseType PurchaseType
        {
            get { return __PurchaseType; }
            set { SetField(ref __PurchaseType, value, "PurchaseType"); }
        }
    }
    [EntityName("DatacloudPurchaseUsage")]
    public class DatacloudPurchaseUsage : ISalesforceEntity
    {
    [JsonConstructor]
        private DatacloudPurchaseUsage(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DatacloudPurchaseUsage()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private PickDatacloudPurchaseUsageUserType __UserType;
        [EntityField(false)]
        public PickDatacloudPurchaseUsageUserType UserType
        {
            get { return __UserType; }
            set { SetField(ref __UserType, value, "UserType"); }
        }
        private PickDatacloudPurchaseUsagePurchaseType __PurchaseType;
        [EntityField(false)]
        public PickDatacloudPurchaseUsagePurchaseType PurchaseType
        {
            get { return __PurchaseType; }
            set { SetField(ref __PurchaseType, value, "PurchaseType"); }
        }
        private PickDatacloudPurchaseUsageDatacloudEntityType __DatacloudEntityType;
        [EntityField(false)]
        public PickDatacloudPurchaseUsageDatacloudEntityType DatacloudEntityType
        {
            get { return __DatacloudEntityType; }
            set { SetField(ref __DatacloudEntityType, value, "DatacloudEntityType"); }
        }
        private System.Double __Usage;
        [EntityField(false)]
        public System.Double Usage
        {
            get { return __Usage; }
            set { SetField(ref __Usage, value, "Usage"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
    }
    [EntityName("DeclinedEventRelation")]
    public class DeclinedEventRelation : ISalesforceEntity
    {
    [JsonConstructor]
        private DeclinedEventRelation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DeclinedEventRelation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RelationId;
        [EntityField(true)]
        public System.String RelationId
        {
            get { return __RelationId; }
            set { SetField(ref __RelationId, value, "RelationId"); }
        }
        private System.String __EventId;
        [EntityField(true)]
        public System.String EventId
        {
            get { return __EventId; }
            set { SetField(ref __EventId, value, "EventId"); }
        }
        private System.DateTime? __RespondedDate;
        [EntityField(true)]
        public System.DateTime? RespondedDate
        {
            get { return __RespondedDate; }
            set { SetField(ref __RespondedDate, value, "RespondedDate"); }
        }
        private System.String __Response;
        [EntityField(true)]
        public System.String Response
        {
            get { return __Response; }
            set { SetField(ref __Response, value, "Response"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Type;
        [EntityField(true)]
        public System.String Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
    }
    [EntityName("Document")]
    public class Document : ISalesforceEntity
    {
    [JsonConstructor]
        private Document(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Document()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FolderId;
        [EntityField(false)]
        public System.String FolderId
        {
            get { return __FolderId; }
            set { SetField(ref __FolderId, value, "FolderId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.String __Type;
        [EntityField(true)]
        public System.String Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.Boolean __IsPublic;
        [EntityField(false)]
        public System.Boolean IsPublic
        {
            get { return __IsPublic; }
            set { SetField(ref __IsPublic, value, "IsPublic"); }
        }
        private System.Int32 __BodyLength;
        [EntityField(false)]
        public System.Int32 BodyLength
        {
            get { return __BodyLength; }
            set { SetField(ref __BodyLength, value, "BodyLength"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __Url;
        [EntityField(true)]
        public System.String Url
        {
            get { return __Url; }
            set { SetField(ref __Url, value, "Url"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __Keywords;
        [EntityField(true)]
        public System.String Keywords
        {
            get { return __Keywords; }
            set { SetField(ref __Keywords, value, "Keywords"); }
        }
        private System.Boolean __IsInternalUseOnly;
        [EntityField(false)]
        public System.Boolean IsInternalUseOnly
        {
            get { return __IsInternalUseOnly; }
            set { SetField(ref __IsInternalUseOnly, value, "IsInternalUseOnly"); }
        }
        private System.String __AuthorId;
        [EntityField(false)]
        public System.String AuthorId
        {
            get { return __AuthorId; }
            set { SetField(ref __AuthorId, value, "AuthorId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsBodySearchable;
        [EntityField(false)]
        public System.Boolean IsBodySearchable
        {
            get { return __IsBodySearchable; }
            set { SetField(ref __IsBodySearchable, value, "IsBodySearchable"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
    }
    [EntityName("DocumentAttachmentMap")]
    public class DocumentAttachmentMap : ISalesforceEntity
    {
    [JsonConstructor]
        private DocumentAttachmentMap(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DocumentAttachmentMap()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __DocumentId;
        [EntityField(false)]
        public System.String DocumentId
        {
            get { return __DocumentId; }
            set { SetField(ref __DocumentId, value, "DocumentId"); }
        }
        private System.Int32 __DocumentSequence;
        [EntityField(false)]
        public System.Int32 DocumentSequence
        {
            get { return __DocumentSequence; }
            set { SetField(ref __DocumentSequence, value, "DocumentSequence"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
    }
    [EntityName("Domain")]
    public class Domain : ISalesforceEntity
    {
    [JsonConstructor]
        private Domain(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Domain()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private PickDomainDomainType __DomainType;
        [EntityField(false)]
        public PickDomainDomainType DomainType
        {
            get { return __DomainType; }
            set { SetField(ref __DomainType, value, "DomainType"); }
        }
        private System.String ___Domain;
        [JsonProperty(PropertyName = "Domain")]
        [EntityField(false)]
        public System.String _Domain
        {
            get { return ___Domain; }
            set { SetField(ref ___Domain, value, "Domain"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("DomainId")]
        public RelationShip<Domain,DomainSite> DomainSites
        {
            get;set;
        }
    }
    [EntityName("DomainSite")]
    public class DomainSite : ISalesforceEntity
    {
    [JsonConstructor]
        private DomainSite(string hack)
        {
            trackPropertyUpdates = false;
        }

        public DomainSite()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __DomainId;
        [EntityField(false)]
        public System.String DomainId
        {
            get { return __DomainId; }
            set { SetField(ref __DomainId, value, "DomainId"); }
        }
        private System.String __SiteId;
        [EntityField(false)]
        public System.String SiteId
        {
            get { return __SiteId; }
            set { SetField(ref __SiteId, value, "SiteId"); }
        }
        private System.String __PathPrefix;
        [EntityField(false)]
        public System.String PathPrefix
        {
            get { return __PathPrefix; }
            set { SetField(ref __PathPrefix, value, "PathPrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("EmailDomainKey")]
    public class EmailDomainKey : ISalesforceEntity
    {
    [JsonConstructor]
        private EmailDomainKey(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EmailDomainKey()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Selector;
        [EntityField(false)]
        public System.String Selector
        {
            get { return __Selector; }
            set { SetField(ref __Selector, value, "Selector"); }
        }
        private System.String __Domain;
        [EntityField(false)]
        public System.String Domain
        {
            get { return __Domain; }
            set { SetField(ref __Domain, value, "Domain"); }
        }
        private PickEmailDomainKeyDomainMatch __DomainMatch;
        [EntityField(false)]
        public PickEmailDomainKeyDomainMatch DomainMatch
        {
            get { return __DomainMatch; }
            set { SetField(ref __DomainMatch, value, "DomainMatch"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __PublicKey;
        [EntityField(true)]
        public System.String PublicKey
        {
            get { return __PublicKey; }
            set { SetField(ref __PublicKey, value, "PublicKey"); }
        }
        private System.String __PrivateKey;
        [EntityField(true)]
        public System.String PrivateKey
        {
            get { return __PrivateKey; }
            set { SetField(ref __PrivateKey, value, "PrivateKey"); }
        }
    }
    [EntityName("EmailMessage")]
    public class EmailMessage : ISalesforceEntity
    {
    [JsonConstructor]
        private EmailMessage(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EmailMessage()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __ActivityId;
        [EntityField(true)]
        public System.String ActivityId
        {
            get { return __ActivityId; }
            set { SetField(ref __ActivityId, value, "ActivityId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __TextBody;
        [EntityField(true)]
        public System.String TextBody
        {
            get { return __TextBody; }
            set { SetField(ref __TextBody, value, "TextBody"); }
        }
        private System.String __HtmlBody;
        [EntityField(true)]
        public System.String HtmlBody
        {
            get { return __HtmlBody; }
            set { SetField(ref __HtmlBody, value, "HtmlBody"); }
        }
        private System.String __Headers;
        [EntityField(true)]
        public System.String Headers
        {
            get { return __Headers; }
            set { SetField(ref __Headers, value, "Headers"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.String __FromName;
        [EntityField(true)]
        public System.String FromName
        {
            get { return __FromName; }
            set { SetField(ref __FromName, value, "FromName"); }
        }
        private System.String __FromAddress;
        [EntityField(true)]
        public System.String FromAddress
        {
            get { return __FromAddress; }
            set { SetField(ref __FromAddress, value, "FromAddress"); }
        }
        private System.String __ToAddress;
        [EntityField(true)]
        public System.String ToAddress
        {
            get { return __ToAddress; }
            set { SetField(ref __ToAddress, value, "ToAddress"); }
        }
        private System.String __CcAddress;
        [EntityField(true)]
        public System.String CcAddress
        {
            get { return __CcAddress; }
            set { SetField(ref __CcAddress, value, "CcAddress"); }
        }
        private System.String __BccAddress;
        [EntityField(true)]
        public System.String BccAddress
        {
            get { return __BccAddress; }
            set { SetField(ref __BccAddress, value, "BccAddress"); }
        }
        private System.Boolean __Incoming;
        [EntityField(false)]
        public System.Boolean Incoming
        {
            get { return __Incoming; }
            set { SetField(ref __Incoming, value, "Incoming"); }
        }
        private System.Boolean __HasAttachment;
        [EntityField(false)]
        public System.Boolean HasAttachment
        {
            get { return __HasAttachment; }
            set { SetField(ref __HasAttachment, value, "HasAttachment"); }
        }
        private PickEmailMessageStatus __Status;
        [EntityField(false)]
        public PickEmailMessageStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.DateTime? __MessageDate;
        [EntityField(true)]
        public System.DateTime? MessageDate
        {
            get { return __MessageDate; }
            set { SetField(ref __MessageDate, value, "MessageDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ReplyToEmailMessageId;
        [EntityField(true)]
        public System.String ReplyToEmailMessageId
        {
            get { return __ReplyToEmailMessageId; }
            set { SetField(ref __ReplyToEmailMessageId, value, "ReplyToEmailMessageId"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<EmailMessage,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<EmailMessage,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<EmailMessage,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<EmailMessage,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<EmailMessage,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<EmailMessage,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
    }
    [EntityName("EmailServicesAddress")]
    public class EmailServicesAddress : ISalesforceEntity
    {
    [JsonConstructor]
        private EmailServicesAddress(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EmailServicesAddress()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __LocalPart;
        [EntityField(false)]
        public System.String LocalPart
        {
            get { return __LocalPart; }
            set { SetField(ref __LocalPart, value, "LocalPart"); }
        }
        private System.String __EmailDomainName;
        [EntityField(true)]
        public System.String EmailDomainName
        {
            get { return __EmailDomainName; }
            set { SetField(ref __EmailDomainName, value, "EmailDomainName"); }
        }
        private System.String __AuthorizedSenders;
        [EntityField(true)]
        public System.String AuthorizedSenders
        {
            get { return __AuthorizedSenders; }
            set { SetField(ref __AuthorizedSenders, value, "AuthorizedSenders"); }
        }
        private System.String __RunAsUserId;
        [EntityField(false)]
        public System.String RunAsUserId
        {
            get { return __RunAsUserId; }
            set { SetField(ref __RunAsUserId, value, "RunAsUserId"); }
        }
        private System.String __FunctionId;
        [EntityField(false)]
        public System.String FunctionId
        {
            get { return __FunctionId; }
            set { SetField(ref __FunctionId, value, "FunctionId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("EmailServicesFunction")]
    public class EmailServicesFunction : ISalesforceEntity
    {
    [JsonConstructor]
        private EmailServicesFunction(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EmailServicesFunction()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __FunctionName;
        [EntityField(false)]
        public System.String FunctionName
        {
            get { return __FunctionName; }
            set { SetField(ref __FunctionName, value, "FunctionName"); }
        }
        private System.String __AuthorizedSenders;
        [EntityField(true)]
        public System.String AuthorizedSenders
        {
            get { return __AuthorizedSenders; }
            set { SetField(ref __AuthorizedSenders, value, "AuthorizedSenders"); }
        }
        private System.Boolean __IsAuthenticationRequired;
        [EntityField(false)]
        public System.Boolean IsAuthenticationRequired
        {
            get { return __IsAuthenticationRequired; }
            set { SetField(ref __IsAuthenticationRequired, value, "IsAuthenticationRequired"); }
        }
        private System.Boolean __IsTlsRequired;
        [EntityField(false)]
        public System.Boolean IsTlsRequired
        {
            get { return __IsTlsRequired; }
            set { SetField(ref __IsTlsRequired, value, "IsTlsRequired"); }
        }
        private PickEmailServicesFunctionAttachmentOption __AttachmentOption;
        [EntityField(false)]
        public PickEmailServicesFunctionAttachmentOption AttachmentOption
        {
            get { return __AttachmentOption; }
            set { SetField(ref __AttachmentOption, value, "AttachmentOption"); }
        }
        private System.String __ApexClassId;
        [EntityField(true)]
        public System.String ApexClassId
        {
            get { return __ApexClassId; }
            set { SetField(ref __ApexClassId, value, "ApexClassId"); }
        }
        private PickEmailServicesFunctionOverLimitAction __OverLimitAction;
        [EntityField(true)]
        public PickEmailServicesFunctionOverLimitAction OverLimitAction
        {
            get { return __OverLimitAction; }
            set { SetField(ref __OverLimitAction, value, "OverLimitAction"); }
        }
        private PickEmailServicesFunctionFunctionInactiveAction __FunctionInactiveAction;
        [EntityField(true)]
        public PickEmailServicesFunctionFunctionInactiveAction FunctionInactiveAction
        {
            get { return __FunctionInactiveAction; }
            set { SetField(ref __FunctionInactiveAction, value, "FunctionInactiveAction"); }
        }
        private PickEmailServicesFunctionAddressInactiveAction __AddressInactiveAction;
        [EntityField(true)]
        public PickEmailServicesFunctionAddressInactiveAction AddressInactiveAction
        {
            get { return __AddressInactiveAction; }
            set { SetField(ref __AddressInactiveAction, value, "AddressInactiveAction"); }
        }
        private PickEmailServicesFunctionAuthenticationFailureAction __AuthenticationFailureAction;
        [EntityField(true)]
        public PickEmailServicesFunctionAuthenticationFailureAction AuthenticationFailureAction
        {
            get { return __AuthenticationFailureAction; }
            set { SetField(ref __AuthenticationFailureAction, value, "AuthenticationFailureAction"); }
        }
        private PickEmailServicesFunctionAuthorizationFailureAction __AuthorizationFailureAction;
        [EntityField(true)]
        public PickEmailServicesFunctionAuthorizationFailureAction AuthorizationFailureAction
        {
            get { return __AuthorizationFailureAction; }
            set { SetField(ref __AuthorizationFailureAction, value, "AuthorizationFailureAction"); }
        }
        private System.Boolean __IsErrorRoutingEnabled;
        [EntityField(false)]
        public System.Boolean IsErrorRoutingEnabled
        {
            get { return __IsErrorRoutingEnabled; }
            set { SetField(ref __IsErrorRoutingEnabled, value, "IsErrorRoutingEnabled"); }
        }
        private System.String __ErrorRoutingAddress;
        [EntityField(true)]
        public System.String ErrorRoutingAddress
        {
            get { return __ErrorRoutingAddress; }
            set { SetField(ref __ErrorRoutingAddress, value, "ErrorRoutingAddress"); }
        }
        private System.Boolean __IsTextAttachmentsAsBinary;
        [EntityField(false)]
        public System.Boolean IsTextAttachmentsAsBinary
        {
            get { return __IsTextAttachmentsAsBinary; }
            set { SetField(ref __IsTextAttachmentsAsBinary, value, "IsTextAttachmentsAsBinary"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("FunctionId")]
        public RelationShip<EmailServicesFunction,EmailServicesAddress> Addresses
        {
            get;set;
        }
    }
    [EntityName("EmailStatus")]
    public class EmailStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private EmailStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EmailStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __TaskId;
        [EntityField(false)]
        public System.String TaskId
        {
            get { return __TaskId; }
            set { SetField(ref __TaskId, value, "TaskId"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Int32 __TimesOpened;
        [EntityField(false)]
        public System.Int32 TimesOpened
        {
            get { return __TimesOpened; }
            set { SetField(ref __TimesOpened, value, "TimesOpened"); }
        }
        private System.DateTime? __FirstOpenDate;
        [EntityField(true)]
        public System.DateTime? FirstOpenDate
        {
            get { return __FirstOpenDate; }
            set { SetField(ref __FirstOpenDate, value, "FirstOpenDate"); }
        }
        private System.DateTime? __LastOpenDate;
        [EntityField(true)]
        public System.DateTime? LastOpenDate
        {
            get { return __LastOpenDate; }
            set { SetField(ref __LastOpenDate, value, "LastOpenDate"); }
        }
        private System.String __EmailTemplateName;
        [EntityField(true)]
        public System.String EmailTemplateName
        {
            get { return __EmailTemplateName; }
            set { SetField(ref __EmailTemplateName, value, "EmailTemplateName"); }
        }
    }
    [EntityName("EmailTemplate")]
    public class EmailTemplate : ISalesforceEntity
    {
    [JsonConstructor]
        private EmailTemplate(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EmailTemplate()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __FolderId;
        [EntityField(false)]
        public System.String FolderId
        {
            get { return __FolderId; }
            set { SetField(ref __FolderId, value, "FolderId"); }
        }
        private System.String __BrandTemplateId;
        [EntityField(true)]
        public System.String BrandTemplateId
        {
            get { return __BrandTemplateId; }
            set { SetField(ref __BrandTemplateId, value, "BrandTemplateId"); }
        }
        private PickEmailTemplateTemplateStyle __TemplateStyle;
        [EntityField(false)]
        public PickEmailTemplateTemplateStyle TemplateStyle
        {
            get { return __TemplateStyle; }
            set { SetField(ref __TemplateStyle, value, "TemplateStyle"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private PickEmailTemplateTemplateType __TemplateType;
        [EntityField(false)]
        public PickEmailTemplateTemplateType TemplateType
        {
            get { return __TemplateType; }
            set { SetField(ref __TemplateType, value, "TemplateType"); }
        }
        private PickEmailTemplateEncoding __Encoding;
        [EntityField(true)]
        public PickEmailTemplateEncoding Encoding
        {
            get { return __Encoding; }
            set { SetField(ref __Encoding, value, "Encoding"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.String __HtmlValue;
        [EntityField(true)]
        public System.String HtmlValue
        {
            get { return __HtmlValue; }
            set { SetField(ref __HtmlValue, value, "HtmlValue"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.Int32? __TimesUsed;
        [EntityField(true)]
        public System.Int32? TimesUsed
        {
            get { return __TimesUsed; }
            set { SetField(ref __TimesUsed, value, "TimesUsed"); }
        }
        private System.DateTime? __LastUsedDate;
        [EntityField(true)]
        public System.DateTime? LastUsedDate
        {
            get { return __LastUsedDate; }
            set { SetField(ref __LastUsedDate, value, "LastUsedDate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Double? __ApiVersion;
        [EntityField(true)]
        public System.Double? ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private System.String __Markup;
        [EntityField(true)]
        public System.String Markup
        {
            get { return __Markup; }
            set { SetField(ref __Markup, value, "Markup"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<EmailTemplate,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<EmailTemplate,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<EmailTemplate,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<EmailTemplate,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
    }
    [EntityName("EntitySubscription")]
    public class EntitySubscription : ISalesforceEntity
    {
    [JsonConstructor]
        private EntitySubscription(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EntitySubscription()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __SubscriberId;
        [EntityField(false)]
        public System.String SubscriberId
        {
            get { return __SubscriberId; }
            set { SetField(ref __SubscriberId, value, "SubscriberId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("Event")]
    public class Event : ISalesforceEntity
    {
    [JsonConstructor]
        private Event(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Event()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.String __Location;
        [EntityField(true)]
        public System.String Location
        {
            get { return __Location; }
            set { SetField(ref __Location, value, "Location"); }
        }
        private System.Boolean __IsAllDayEvent;
        [EntityField(false)]
        public System.Boolean IsAllDayEvent
        {
            get { return __IsAllDayEvent; }
            set { SetField(ref __IsAllDayEvent, value, "IsAllDayEvent"); }
        }
        private System.DateTime? __ActivityDateTime;
        [EntityField(true)]
        public System.DateTime? ActivityDateTime
        {
            get { return __ActivityDateTime; }
            set { SetField(ref __ActivityDateTime, value, "ActivityDateTime"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private System.Int32? __DurationInMinutes;
        [EntityField(true)]
        public System.Int32? DurationInMinutes
        {
            get { return __DurationInMinutes; }
            set { SetField(ref __DurationInMinutes, value, "DurationInMinutes"); }
        }
        private System.DateTime? __StartDateTime;
        [EntityField(true)]
        public System.DateTime? StartDateTime
        {
            get { return __StartDateTime; }
            set { SetField(ref __StartDateTime, value, "StartDateTime"); }
        }
        private System.DateTime? __EndDateTime;
        [EntityField(true)]
        public System.DateTime? EndDateTime
        {
            get { return __EndDateTime; }
            set { SetField(ref __EndDateTime, value, "EndDateTime"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private PickEventShowAs __ShowAs;
        [EntityField(true)]
        public PickEventShowAs ShowAs
        {
            get { return __ShowAs; }
            set { SetField(ref __ShowAs, value, "ShowAs"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.Boolean __IsChild;
        [EntityField(false)]
        public System.Boolean IsChild
        {
            get { return __IsChild; }
            set { SetField(ref __IsChild, value, "IsChild"); }
        }
        private System.Boolean __IsGroupEvent;
        [EntityField(false)]
        public System.Boolean IsGroupEvent
        {
            get { return __IsGroupEvent; }
            set { SetField(ref __IsGroupEvent, value, "IsGroupEvent"); }
        }
        private PickEventGroupEventType __GroupEventType;
        [EntityField(true)]
        public PickEventGroupEventType GroupEventType
        {
            get { return __GroupEventType; }
            set { SetField(ref __GroupEventType, value, "GroupEventType"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsArchived;
        [EntityField(false)]
        public System.Boolean IsArchived
        {
            get { return __IsArchived; }
            set { SetField(ref __IsArchived, value, "IsArchived"); }
        }
        private System.String __RecurrenceActivityId;
        [EntityField(true)]
        public System.String RecurrenceActivityId
        {
            get { return __RecurrenceActivityId; }
            set { SetField(ref __RecurrenceActivityId, value, "RecurrenceActivityId"); }
        }
        private System.Boolean __IsRecurrence;
        [EntityField(false)]
        public System.Boolean IsRecurrence
        {
            get { return __IsRecurrence; }
            set { SetField(ref __IsRecurrence, value, "IsRecurrence"); }
        }
        private System.DateTime? __RecurrenceStartDateTime;
        [EntityField(true)]
        public System.DateTime? RecurrenceStartDateTime
        {
            get { return __RecurrenceStartDateTime; }
            set { SetField(ref __RecurrenceStartDateTime, value, "RecurrenceStartDateTime"); }
        }
        private System.DateTime? __RecurrenceEndDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceEndDateOnly
        {
            get { return __RecurrenceEndDateOnly; }
            set { SetField(ref __RecurrenceEndDateOnly, value, "RecurrenceEndDateOnly"); }
        }
        private PickEventRecurrenceTimeZoneSidKey __RecurrenceTimeZoneSidKey;
        [EntityField(true)]
        public PickEventRecurrenceTimeZoneSidKey RecurrenceTimeZoneSidKey
        {
            get { return __RecurrenceTimeZoneSidKey; }
            set { SetField(ref __RecurrenceTimeZoneSidKey, value, "RecurrenceTimeZoneSidKey"); }
        }
        private PickEventRecurrenceType __RecurrenceType;
        [EntityField(true)]
        public PickEventRecurrenceType RecurrenceType
        {
            get { return __RecurrenceType; }
            set { SetField(ref __RecurrenceType, value, "RecurrenceType"); }
        }
        private System.Int32? __RecurrenceInterval;
        [EntityField(true)]
        public System.Int32? RecurrenceInterval
        {
            get { return __RecurrenceInterval; }
            set { SetField(ref __RecurrenceInterval, value, "RecurrenceInterval"); }
        }
        private System.Int32? __RecurrenceDayOfWeekMask;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfWeekMask
        {
            get { return __RecurrenceDayOfWeekMask; }
            set { SetField(ref __RecurrenceDayOfWeekMask, value, "RecurrenceDayOfWeekMask"); }
        }
        private System.Int32? __RecurrenceDayOfMonth;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfMonth
        {
            get { return __RecurrenceDayOfMonth; }
            set { SetField(ref __RecurrenceDayOfMonth, value, "RecurrenceDayOfMonth"); }
        }
        private PickEventRecurrenceInstance __RecurrenceInstance;
        [EntityField(true)]
        public PickEventRecurrenceInstance RecurrenceInstance
        {
            get { return __RecurrenceInstance; }
            set { SetField(ref __RecurrenceInstance, value, "RecurrenceInstance"); }
        }
        private PickEventRecurrenceMonthOfYear __RecurrenceMonthOfYear;
        [EntityField(true)]
        public PickEventRecurrenceMonthOfYear RecurrenceMonthOfYear
        {
            get { return __RecurrenceMonthOfYear; }
            set { SetField(ref __RecurrenceMonthOfYear, value, "RecurrenceMonthOfYear"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        [JsonIgnore]
        [ReferencedByField("EventId")]
        public RelationShip<Event,AcceptedEventRelation> AcceptedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Event,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Event,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Event,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Event,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EventId")]
        public RelationShip<Event,DeclinedEventRelation> DeclinedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Event,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecurrenceActivityId")]
        public RelationShip<Event,Event> RecurringEvents
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Event,EventFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EventId")]
        public RelationShip<Event,EventRelation> EventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Event,TopicAssignment> TopicAssignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EventId")]
        public RelationShip<Event,UndecidedEventRelation> UndecidedEventRelations
        {
            get;set;
        }
    }
    [EntityName("EventFeed")]
    public class EventFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private EventFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EventFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickEventFeedType __Type;
        [EntityField(true)]
        public PickEventFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<EventFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<EventFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<EventFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("EventLogFile")]
    public class EventLogFile : ISalesforceEntity
    {
    [JsonConstructor]
        private EventLogFile(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EventLogFile()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickEventLogFileEventType __EventType;
        [EntityField(false)]
        public PickEventLogFileEventType EventType
        {
            get { return __EventType; }
            set { SetField(ref __EventType, value, "EventType"); }
        }
        private System.DateTime __LogDate;
        [EntityField(false)]
        public System.DateTime LogDate
        {
            get { return __LogDate; }
            set { SetField(ref __LogDate, value, "LogDate"); }
        }
        private System.Double __LogFileLength;
        [EntityField(false)]
        public System.Double LogFileLength
        {
            get { return __LogFileLength; }
            set { SetField(ref __LogFileLength, value, "LogFileLength"); }
        }
        private System.String __LogFileContentType;
        [EntityField(false)]
        public System.String LogFileContentType
        {
            get { return __LogFileContentType; }
            set { SetField(ref __LogFileContentType, value, "LogFileContentType"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private System.String __LogFile;
        [EntityField(false)]
        public System.String LogFile
        {
            get { return __LogFile; }
            set { SetField(ref __LogFile, value, "LogFile"); }
        }
    }
    [EntityName("EventRelation")]
    public class EventRelation : ISalesforceEntity
    {
    [JsonConstructor]
        private EventRelation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public EventRelation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RelationId;
        [EntityField(false)]
        public System.String RelationId
        {
            get { return __RelationId; }
            set { SetField(ref __RelationId, value, "RelationId"); }
        }
        private System.String __EventId;
        [EntityField(false)]
        public System.String EventId
        {
            get { return __EventId; }
            set { SetField(ref __EventId, value, "EventId"); }
        }
        private PickEventRelationStatus __Status;
        [EntityField(true)]
        public PickEventRelationStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.DateTime? __RespondedDate;
        [EntityField(true)]
        public System.DateTime? RespondedDate
        {
            get { return __RespondedDate; }
            set { SetField(ref __RespondedDate, value, "RespondedDate"); }
        }
        private System.String __Response;
        [EntityField(true)]
        public System.String Response
        {
            get { return __Response; }
            set { SetField(ref __Response, value, "Response"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("ExternalDataSource")]
    public class ExternalDataSource : ISalesforceEntity
    {
    [JsonConstructor]
        private ExternalDataSource(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ExternalDataSource()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickExternalDataSourceLanguage __Language;
        [EntityField(false)]
        public PickExternalDataSourceLanguage Language
        {
            get { return __Language; }
            set { SetField(ref __Language, value, "Language"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickExternalDataSourceType __Type;
        [EntityField(false)]
        public PickExternalDataSourceType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __Endpoint;
        [EntityField(true)]
        public System.String Endpoint
        {
            get { return __Endpoint; }
            set { SetField(ref __Endpoint, value, "Endpoint"); }
        }
        private System.String __Repository;
        [EntityField(true)]
        public System.String Repository
        {
            get { return __Repository; }
            set { SetField(ref __Repository, value, "Repository"); }
        }
        private PickExternalDataSourcePrincipalType __PrincipalType;
        [EntityField(false)]
        public PickExternalDataSourcePrincipalType PrincipalType
        {
            get { return __PrincipalType; }
            set { SetField(ref __PrincipalType, value, "PrincipalType"); }
        }
        private System.String __ApiKey;
        [EntityField(true)]
        public System.String ApiKey
        {
            get { return __ApiKey; }
            set { SetField(ref __ApiKey, value, "ApiKey"); }
        }
        private System.String __AuthProviderId;
        [EntityField(true)]
        public System.String AuthProviderId
        {
            get { return __AuthProviderId; }
            set { SetField(ref __AuthProviderId, value, "AuthProviderId"); }
        }
        private System.String __LargeIconId;
        [EntityField(true)]
        public System.String LargeIconId
        {
            get { return __LargeIconId; }
            set { SetField(ref __LargeIconId, value, "LargeIconId"); }
        }
        private System.String __SmallIconId;
        [EntityField(true)]
        public System.String SmallIconId
        {
            get { return __SmallIconId; }
            set { SetField(ref __SmallIconId, value, "SmallIconId"); }
        }
        private System.String __CustomConfiguration;
        [EntityField(true)]
        public System.String CustomConfiguration
        {
            get { return __CustomConfiguration; }
            set { SetField(ref __CustomConfiguration, value, "CustomConfiguration"); }
        }
        [JsonIgnore]
        [ReferencedByField("ExternalDataSourceId")]
        public RelationShip<ExternalDataSource,ExternalDataUserAuth> UserAuths
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SetupEntityId")]
        public RelationShip<ExternalDataSource,SetupEntityAccess> SetupEntityAccessItems
        {
            get;set;
        }
    }
    [EntityName("ExternalDataUserAuth")]
    public class ExternalDataUserAuth : ISalesforceEntity
    {
    [JsonConstructor]
        private ExternalDataUserAuth(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ExternalDataUserAuth()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ExternalDataSourceId;
        [EntityField(false)]
        public System.String ExternalDataSourceId
        {
            get { return __ExternalDataSourceId; }
            set { SetField(ref __ExternalDataSourceId, value, "ExternalDataSourceId"); }
        }
        private System.String __UserId;
        [EntityField(true)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private PickExternalDataUserAuthProtocol __Protocol;
        [EntityField(true)]
        public PickExternalDataUserAuthProtocol Protocol
        {
            get { return __Protocol; }
            set { SetField(ref __Protocol, value, "Protocol"); }
        }
        private System.String __Username;
        [EntityField(true)]
        public System.String Username
        {
            get { return __Username; }
            set { SetField(ref __Username, value, "Username"); }
        }
        private System.String __Password;
        [EntityField(true)]
        public System.String Password
        {
            get { return __Password; }
            set { SetField(ref __Password, value, "Password"); }
        }
        private System.String __AuthProviderId;
        [EntityField(true)]
        public System.String AuthProviderId
        {
            get { return __AuthProviderId; }
            set { SetField(ref __AuthProviderId, value, "AuthProviderId"); }
        }
    }
    [EntityName("FeedComment")]
    public class FeedComment : ISalesforceEntity
    {
    [JsonConstructor]
        private FeedComment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FeedComment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FeedItemId;
        [EntityField(false)]
        public System.String FeedItemId
        {
            get { return __FeedItemId; }
            set { SetField(ref __FeedItemId, value, "FeedItemId"); }
        }
        private System.String __ParentId;
        [EntityField(true)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CommentBody;
        [EntityField(false)]
        public System.String CommentBody
        {
            get { return __CommentBody; }
            set { SetField(ref __CommentBody, value, "CommentBody"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __InsertedById;
        [EntityField(false)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        private PickFeedCommentCommentType __CommentType;
        [EntityField(true)]
        public PickFeedCommentCommentType CommentType
        {
            get { return __CommentType; }
            set { SetField(ref __CommentType, value, "CommentType"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
    }
    [EntityName("FeedItem")]
    public class FeedItem : ISalesforceEntity
    {
    [JsonConstructor]
        private FeedItem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FeedItem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickFeedItemType __Type;
        [EntityField(true)]
        public PickFeedItemType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(false)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<FeedItem,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<FeedItem,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<FeedItem,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<FeedItem,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("FeedLike")]
    public class FeedLike : ISalesforceEntity
    {
    [JsonConstructor]
        private FeedLike(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FeedLike()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FeedItemId;
        [EntityField(true)]
        public System.String FeedItemId
        {
            get { return __FeedItemId; }
            set { SetField(ref __FeedItemId, value, "FeedItemId"); }
        }
        private System.String __FeedEntityId;
        [EntityField(true)]
        public System.String FeedEntityId
        {
            get { return __FeedEntityId; }
            set { SetField(ref __FeedEntityId, value, "FeedEntityId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __InsertedById;
        [EntityField(false)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
    }
    [EntityName("FeedPollChoice")]
    public class FeedPollChoice : ISalesforceEntity
    {
    [JsonConstructor]
        private FeedPollChoice(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FeedPollChoice()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FeedItemId;
        [EntityField(false)]
        public System.String FeedItemId
        {
            get { return __FeedItemId; }
            set { SetField(ref __FeedItemId, value, "FeedItemId"); }
        }
        private System.Int32 __Position;
        [EntityField(false)]
        public System.Int32 Position
        {
            get { return __Position; }
            set { SetField(ref __Position, value, "Position"); }
        }
        private System.String __ChoiceBody;
        [EntityField(false)]
        public System.String ChoiceBody
        {
            get { return __ChoiceBody; }
            set { SetField(ref __ChoiceBody, value, "ChoiceBody"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        [JsonIgnore]
        [ReferencedByField("ChoiceId")]
        public RelationShip<FeedPollChoice,FeedPollVote> FeedPollVotes
        {
            get;set;
        }
    }
    [EntityName("FeedPollVote")]
    public class FeedPollVote : ISalesforceEntity
    {
    [JsonConstructor]
        private FeedPollVote(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FeedPollVote()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FeedItemId;
        [EntityField(false)]
        public System.String FeedItemId
        {
            get { return __FeedItemId; }
            set { SetField(ref __FeedItemId, value, "FeedItemId"); }
        }
        private System.String __ChoiceId;
        [EntityField(false)]
        public System.String ChoiceId
        {
            get { return __ChoiceId; }
            set { SetField(ref __ChoiceId, value, "ChoiceId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("FeedTrackedChange")]
    public class FeedTrackedChange : ISalesforceEntity
    {
    [JsonConstructor]
        private FeedTrackedChange(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FeedTrackedChange()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FeedItemId;
        [EntityField(false)]
        public System.String FeedItemId
        {
            get { return __FeedItemId; }
            set { SetField(ref __FeedItemId, value, "FeedItemId"); }
        }
        private System.String __FieldName;
        [EntityField(false)]
        public System.String FieldName
        {
            get { return __FieldName; }
            set { SetField(ref __FieldName, value, "FieldName"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("FieldPermissions")]
    public class FieldPermissions : ISalesforceEntity
    {
    [JsonConstructor]
        private FieldPermissions(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FieldPermissions()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickFieldPermissionsSobjectType __SobjectType;
        [EntityField(false)]
        public PickFieldPermissionsSobjectType SobjectType
        {
            get { return __SobjectType; }
            set { SetField(ref __SobjectType, value, "SobjectType"); }
        }
        private PickFieldPermissionsField __Field;
        [EntityField(false)]
        public PickFieldPermissionsField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.Boolean __PermissionsEdit;
        [EntityField(false)]
        public System.Boolean PermissionsEdit
        {
            get { return __PermissionsEdit; }
            set { SetField(ref __PermissionsEdit, value, "PermissionsEdit"); }
        }
        private System.Boolean __PermissionsRead;
        [EntityField(false)]
        public System.Boolean PermissionsRead
        {
            get { return __PermissionsRead; }
            set { SetField(ref __PermissionsRead, value, "PermissionsRead"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("FiscalYearSettings")]
    public class FiscalYearSettings : ISalesforceEntity
    {
    [JsonConstructor]
        private FiscalYearSettings(string hack)
        {
            trackPropertyUpdates = false;
        }

        public FiscalYearSettings()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __PeriodId;
        [EntityField(true)]
        public System.String PeriodId
        {
            get { return __PeriodId; }
            set { SetField(ref __PeriodId, value, "PeriodId"); }
        }
        private System.DateTime? __StartDate;
        [EntityField(true)]
        public System.DateTime? StartDate
        {
            get { return __StartDate; }
            set { SetField(ref __StartDate, value, "StartDate"); }
        }
        private System.DateTime? __EndDate;
        [EntityField(true)]
        public System.DateTime? EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Boolean __IsStandardYear;
        [EntityField(false)]
        public System.Boolean IsStandardYear
        {
            get { return __IsStandardYear; }
            set { SetField(ref __IsStandardYear, value, "IsStandardYear"); }
        }
        private PickFiscalYearSettingsYearType __YearType;
        [EntityField(true)]
        public PickFiscalYearSettingsYearType YearType
        {
            get { return __YearType; }
            set { SetField(ref __YearType, value, "YearType"); }
        }
        private PickFiscalYearSettingsQuarterLabelScheme __QuarterLabelScheme;
        [EntityField(true)]
        public PickFiscalYearSettingsQuarterLabelScheme QuarterLabelScheme
        {
            get { return __QuarterLabelScheme; }
            set { SetField(ref __QuarterLabelScheme, value, "QuarterLabelScheme"); }
        }
        private PickFiscalYearSettingsPeriodLabelScheme __PeriodLabelScheme;
        [EntityField(true)]
        public PickFiscalYearSettingsPeriodLabelScheme PeriodLabelScheme
        {
            get { return __PeriodLabelScheme; }
            set { SetField(ref __PeriodLabelScheme, value, "PeriodLabelScheme"); }
        }
        private PickFiscalYearSettingsWeekLabelScheme __WeekLabelScheme;
        [EntityField(true)]
        public PickFiscalYearSettingsWeekLabelScheme WeekLabelScheme
        {
            get { return __WeekLabelScheme; }
            set { SetField(ref __WeekLabelScheme, value, "WeekLabelScheme"); }
        }
        private PickFiscalYearSettingsQuarterPrefix __QuarterPrefix;
        [EntityField(true)]
        public PickFiscalYearSettingsQuarterPrefix QuarterPrefix
        {
            get { return __QuarterPrefix; }
            set { SetField(ref __QuarterPrefix, value, "QuarterPrefix"); }
        }
        private PickFiscalYearSettingsPeriodPrefix __PeriodPrefix;
        [EntityField(true)]
        public PickFiscalYearSettingsPeriodPrefix PeriodPrefix
        {
            get { return __PeriodPrefix; }
            set { SetField(ref __PeriodPrefix, value, "PeriodPrefix"); }
        }
        private System.Int32? __WeekStartDay;
        [EntityField(true)]
        public System.Int32? WeekStartDay
        {
            get { return __WeekStartDay; }
            set { SetField(ref __WeekStartDay, value, "WeekStartDay"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("FiscalYearSettingsId")]
        public RelationShip<FiscalYearSettings,Period> Periods
        {
            get;set;
        }
    }
    [EntityName("Folder")]
    public class Folder : ISalesforceEntity
    {
    [JsonConstructor]
        private Folder(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Folder()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(true)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickFolderAccessType __AccessType;
        [EntityField(false)]
        public PickFolderAccessType AccessType
        {
            get { return __AccessType; }
            set { SetField(ref __AccessType, value, "AccessType"); }
        }
        private System.Boolean __IsReadonly;
        [EntityField(false)]
        public System.Boolean IsReadonly
        {
            get { return __IsReadonly; }
            set { SetField(ref __IsReadonly, value, "IsReadonly"); }
        }
        private PickFolderType __Type;
        [EntityField(false)]
        public PickFolderType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ForecastShare")]
    public class ForecastShare : ISalesforceEntity
    {
    [JsonConstructor]
        private ForecastShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ForecastShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserRoleId;
        [EntityField(false)]
        public System.String UserRoleId
        {
            get { return __UserRoleId; }
            set { SetField(ref __UserRoleId, value, "UserRoleId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickForecastShareAccessLevel __AccessLevel;
        [EntityField(false)]
        public PickForecastShareAccessLevel AccessLevel
        {
            get { return __AccessLevel; }
            set { SetField(ref __AccessLevel, value, "AccessLevel"); }
        }
        private System.Boolean __CanSubmit;
        [EntityField(false)]
        public System.Boolean CanSubmit
        {
            get { return __CanSubmit; }
            set { SetField(ref __CanSubmit, value, "CanSubmit"); }
        }
        private PickForecastShareRowCause __RowCause;
        [EntityField(false)]
        public PickForecastShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
    }
    [EntityName("Group")]
    public class Group : ISalesforceEntity
    {
    [JsonConstructor]
        private Group(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Group()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(true)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __RelatedId;
        [EntityField(true)]
        public System.String RelatedId
        {
            get { return __RelatedId; }
            set { SetField(ref __RelatedId, value, "RelatedId"); }
        }
        private PickGroupType __Type;
        [EntityField(false)]
        public PickGroupType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __DoesSendEmailToMembers;
        [EntityField(false)]
        public System.Boolean DoesSendEmailToMembers
        {
            get { return __DoesSendEmailToMembers; }
            set { SetField(ref __DoesSendEmailToMembers, value, "DoesSendEmailToMembers"); }
        }
        private System.Boolean __DoesIncludeBosses;
        [EntityField(false)]
        public System.Boolean DoesIncludeBosses
        {
            get { return __DoesIncludeBosses; }
            set { SetField(ref __DoesIncludeBosses, value, "DoesIncludeBosses"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("GroupId")]
        public RelationShip<Group,GroupMember> GroupMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("QueueId")]
        public RelationShip<Group,QueueSobject> QueueSobjects
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("DelegatedApproverId")]
        public RelationShip<Group,User> DelegatedUsers
        {
            get;set;
        }
    }
    [EntityName("GroupMember")]
    public class GroupMember : ISalesforceEntity
    {
    [JsonConstructor]
        private GroupMember(string hack)
        {
            trackPropertyUpdates = false;
        }

        public GroupMember()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __GroupId;
        [EntityField(false)]
        public System.String GroupId
        {
            get { return __GroupId; }
            set { SetField(ref __GroupId, value, "GroupId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Holiday")]
    public class Holiday : ISalesforceEntity
    {
    [JsonConstructor]
        private Holiday(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Holiday()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsAllDay;
        [EntityField(false)]
        public System.Boolean IsAllDay
        {
            get { return __IsAllDay; }
            set { SetField(ref __IsAllDay, value, "IsAllDay"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private System.Int32? __StartTimeInMinutes;
        [EntityField(true)]
        public System.Int32? StartTimeInMinutes
        {
            get { return __StartTimeInMinutes; }
            set { SetField(ref __StartTimeInMinutes, value, "StartTimeInMinutes"); }
        }
        private System.Int32? __EndTimeInMinutes;
        [EntityField(true)]
        public System.Int32? EndTimeInMinutes
        {
            get { return __EndTimeInMinutes; }
            set { SetField(ref __EndTimeInMinutes, value, "EndTimeInMinutes"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsRecurrence;
        [EntityField(false)]
        public System.Boolean IsRecurrence
        {
            get { return __IsRecurrence; }
            set { SetField(ref __IsRecurrence, value, "IsRecurrence"); }
        }
        private System.DateTime? __RecurrenceStartDate;
        [EntityField(true)]
        public System.DateTime? RecurrenceStartDate
        {
            get { return __RecurrenceStartDate; }
            set { SetField(ref __RecurrenceStartDate, value, "RecurrenceStartDate"); }
        }
        private System.DateTime? __RecurrenceEndDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceEndDateOnly
        {
            get { return __RecurrenceEndDateOnly; }
            set { SetField(ref __RecurrenceEndDateOnly, value, "RecurrenceEndDateOnly"); }
        }
        private PickHolidayRecurrenceType __RecurrenceType;
        [EntityField(true)]
        public PickHolidayRecurrenceType RecurrenceType
        {
            get { return __RecurrenceType; }
            set { SetField(ref __RecurrenceType, value, "RecurrenceType"); }
        }
        private System.Int32? __RecurrenceInterval;
        [EntityField(true)]
        public System.Int32? RecurrenceInterval
        {
            get { return __RecurrenceInterval; }
            set { SetField(ref __RecurrenceInterval, value, "RecurrenceInterval"); }
        }
        private System.Int32? __RecurrenceDayOfWeekMask;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfWeekMask
        {
            get { return __RecurrenceDayOfWeekMask; }
            set { SetField(ref __RecurrenceDayOfWeekMask, value, "RecurrenceDayOfWeekMask"); }
        }
        private System.Int32? __RecurrenceDayOfMonth;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfMonth
        {
            get { return __RecurrenceDayOfMonth; }
            set { SetField(ref __RecurrenceDayOfMonth, value, "RecurrenceDayOfMonth"); }
        }
        private PickHolidayRecurrenceInstance __RecurrenceInstance;
        [EntityField(true)]
        public PickHolidayRecurrenceInstance RecurrenceInstance
        {
            get { return __RecurrenceInstance; }
            set { SetField(ref __RecurrenceInstance, value, "RecurrenceInstance"); }
        }
        private PickHolidayRecurrenceMonthOfYear __RecurrenceMonthOfYear;
        [EntityField(true)]
        public PickHolidayRecurrenceMonthOfYear RecurrenceMonthOfYear
        {
            get { return __RecurrenceMonthOfYear; }
            set { SetField(ref __RecurrenceMonthOfYear, value, "RecurrenceMonthOfYear"); }
        }
    }
    [EntityName("Idea")]
    public class Idea : ISalesforceEntity
    {
    [JsonConstructor]
        private Idea(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Idea()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __CommunityId;
        [EntityField(false)]
        public System.String CommunityId
        {
            get { return __CommunityId; }
            set { SetField(ref __CommunityId, value, "CommunityId"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.Int32? __NumComments;
        [EntityField(true)]
        public System.Int32? NumComments
        {
            get { return __NumComments; }
        }
        private System.Double? __VoteScore;
        [EntityField(true)]
        public System.Double? VoteScore
        {
            get { return __VoteScore; }
            set { SetField(ref __VoteScore, value, "VoteScore"); }
        }
        private System.Double? __VoteTotal;
        [EntityField(true)]
        public System.Double? VoteTotal
        {
            get { return __VoteTotal; }
            set { SetField(ref __VoteTotal, value, "VoteTotal"); }
        }
        private LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickIdeaCategories> __Categories;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.MultiSelectPicklist<PickIdeaCategories> Categories
        {
            get { return __Categories; }
            set { SetField(ref __Categories, value, "Categories"); }
        }
        private PickIdeaStatus __Status;
        [EntityField(true)]
        public PickIdeaStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.DateTime? __LastCommentDate;
        [EntityField(true)]
        public System.DateTime? LastCommentDate
        {
            get { return __LastCommentDate; }
        }
        private System.String __LastCommentId;
        [EntityField(true)]
        public System.String LastCommentId
        {
            get { return __LastCommentId; }
            set { SetField(ref __LastCommentId, value, "LastCommentId"); }
        }
        private System.String __ParentIdeaId;
        [EntityField(true)]
        public System.String ParentIdeaId
        {
            get { return __ParentIdeaId; }
            set { SetField(ref __ParentIdeaId, value, "ParentIdeaId"); }
        }
        private System.Boolean __IsHtml;
        [EntityField(false)]
        public System.Boolean IsHtml
        {
            get { return __IsHtml; }
            set { SetField(ref __IsHtml, value, "IsHtml"); }
        }
        private System.Boolean __IsMerged;
        [EntityField(false)]
        public System.Boolean IsMerged
        {
            get { return __IsMerged; }
            set { SetField(ref __IsMerged, value, "IsMerged"); }
        }
        private System.String __CreatorFullPhotoUrl;
        [EntityField(true)]
        public System.String CreatorFullPhotoUrl
        {
            get { return __CreatorFullPhotoUrl; }
            set { SetField(ref __CreatorFullPhotoUrl, value, "CreatorFullPhotoUrl"); }
        }
        private System.String __CreatorSmallPhotoUrl;
        [EntityField(true)]
        public System.String CreatorSmallPhotoUrl
        {
            get { return __CreatorSmallPhotoUrl; }
            set { SetField(ref __CreatorSmallPhotoUrl, value, "CreatorSmallPhotoUrl"); }
        }
        private System.String __CreatorName;
        [EntityField(true)]
        public System.String CreatorName
        {
            get { return __CreatorName; }
            set { SetField(ref __CreatorName, value, "CreatorName"); }
        }
        [JsonIgnore]
        [ReferencedByField("IdeaId")]
        public RelationShip<Idea,IdeaComment> Comments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Idea,Vote> Votes
        {
            get;set;
        }
    }
    [EntityName("IdeaComment")]
    public class IdeaComment : ISalesforceEntity
    {
    [JsonConstructor]
        private IdeaComment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public IdeaComment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __IdeaId;
        [EntityField(false)]
        public System.String IdeaId
        {
            get { return __IdeaId; }
            set { SetField(ref __IdeaId, value, "IdeaId"); }
        }
        private System.String __CommunityId;
        [EntityField(true)]
        public System.String CommunityId
        {
            get { return __CommunityId; }
            set { SetField(ref __CommunityId, value, "CommunityId"); }
        }
        private System.String __CommentBody;
        [EntityField(true)]
        public System.String CommentBody
        {
            get { return __CommentBody; }
            set { SetField(ref __CommentBody, value, "CommentBody"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.Boolean __IsHtml;
        [EntityField(false)]
        public System.Boolean IsHtml
        {
            get { return __IsHtml; }
            set { SetField(ref __IsHtml, value, "IsHtml"); }
        }
        private System.String __CreatorFullPhotoUrl;
        [EntityField(true)]
        public System.String CreatorFullPhotoUrl
        {
            get { return __CreatorFullPhotoUrl; }
            set { SetField(ref __CreatorFullPhotoUrl, value, "CreatorFullPhotoUrl"); }
        }
        private System.String __CreatorSmallPhotoUrl;
        [EntityField(true)]
        public System.String CreatorSmallPhotoUrl
        {
            get { return __CreatorSmallPhotoUrl; }
            set { SetField(ref __CreatorSmallPhotoUrl, value, "CreatorSmallPhotoUrl"); }
        }
        private System.String __CreatorName;
        [EntityField(true)]
        public System.String CreatorName
        {
            get { return __CreatorName; }
            set { SetField(ref __CreatorName, value, "CreatorName"); }
        }
        private System.Int32? __UpVotes;
        [EntityField(true)]
        public System.Int32? UpVotes
        {
            get { return __UpVotes; }
            set { SetField(ref __UpVotes, value, "UpVotes"); }
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<IdeaComment,Vote> Votes
        {
            get;set;
        }
    }
    [EntityName("InstalledMobileApp")]
    public class InstalledMobileApp : ISalesforceEntity
    {
    [JsonConstructor]
        private InstalledMobileApp(string hack)
        {
            trackPropertyUpdates = false;
        }

        public InstalledMobileApp()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickInstalledMobileAppStatus __Status;
        [EntityField(false)]
        public PickInstalledMobileAppStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private System.String __Version;
        [EntityField(true)]
        public System.String Version
        {
            get { return __Version; }
            set { SetField(ref __Version, value, "Version"); }
        }
    }
    [EntityName("Lead")]
    public class Lead : ISalesforceEntity
    {
    [JsonConstructor]
        private Lead(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Lead()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __MasterRecordId;
        [EntityField(true)]
        public System.String MasterRecordId
        {
            get { return __MasterRecordId; }
            set { SetField(ref __MasterRecordId, value, "MasterRecordId"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private PickLeadSalutation __Salutation;
        [EntityField(true)]
        public PickLeadSalutation Salutation
        {
            get { return __Salutation; }
            set { SetField(ref __Salutation, value, "Salutation"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Company;
        [EntityField(false)]
        public System.String Company
        {
            get { return __Company; }
            set { SetField(ref __Company, value, "Company"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Website;
        [EntityField(true)]
        public System.String Website
        {
            get { return __Website; }
            set { SetField(ref __Website, value, "Website"); }
        }
        private System.String __PhotoUrl;
        [EntityField(true)]
        public System.String PhotoUrl
        {
            get { return __PhotoUrl; }
            set { SetField(ref __PhotoUrl, value, "PhotoUrl"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickLeadLeadSource __LeadSource;
        [EntityField(true)]
        public PickLeadLeadSource LeadSource
        {
            get { return __LeadSource; }
            set { SetField(ref __LeadSource, value, "LeadSource"); }
        }
        private PickLeadStatus __Status;
        [EntityField(false)]
        public PickLeadStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickLeadIndustry __Industry;
        [EntityField(true)]
        public PickLeadIndustry Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private PickLeadRating __Rating;
        [EntityField(true)]
        public PickLeadRating Rating
        {
            get { return __Rating; }
            set { SetField(ref __Rating, value, "Rating"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsConverted;
        [EntityField(false)]
        public System.Boolean IsConverted
        {
            get { return __IsConverted; }
            set { SetField(ref __IsConverted, value, "IsConverted"); }
        }
        private System.DateTime? __ConvertedDate;
        [EntityField(true)]
        public System.DateTime? ConvertedDate
        {
            get { return __ConvertedDate; }
            set { SetField(ref __ConvertedDate, value, "ConvertedDate"); }
        }
        private System.String __ConvertedAccountId;
        [EntityField(true)]
        public System.String ConvertedAccountId
        {
            get { return __ConvertedAccountId; }
            set { SetField(ref __ConvertedAccountId, value, "ConvertedAccountId"); }
        }
        private System.String __ConvertedContactId;
        [EntityField(true)]
        public System.String ConvertedContactId
        {
            get { return __ConvertedContactId; }
            set { SetField(ref __ConvertedContactId, value, "ConvertedContactId"); }
        }
        private System.String __ConvertedOpportunityId;
        [EntityField(true)]
        public System.String ConvertedOpportunityId
        {
            get { return __ConvertedOpportunityId; }
            set { SetField(ref __ConvertedOpportunityId, value, "ConvertedOpportunityId"); }
        }
        private System.Boolean __IsUnreadByOwner;
        [EntityField(false)]
        public System.Boolean IsUnreadByOwner
        {
            get { return __IsUnreadByOwner; }
            set { SetField(ref __IsUnreadByOwner, value, "IsUnreadByOwner"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.String __Jigsaw;
        [EntityField(true)]
        public System.String Jigsaw
        {
            get { return __Jigsaw; }
            set { SetField(ref __Jigsaw, value, "Jigsaw"); }
        }
        private System.String __JigsawContactId;
        [EntityField(true)]
        public System.String JigsawContactId
        {
            get { return __JigsawContactId; }
            set { SetField(ref __JigsawContactId, value, "JigsawContactId"); }
        }
        private PickLeadCleanStatus __CleanStatus;
        [EntityField(true)]
        public PickLeadCleanStatus CleanStatus
        {
            get { return __CleanStatus; }
            set { SetField(ref __CleanStatus, value, "CleanStatus"); }
        }
        private System.String __CompanyDunsNumber;
        [EntityField(true)]
        public System.String CompanyDunsNumber
        {
            get { return __CompanyDunsNumber; }
            set { SetField(ref __CompanyDunsNumber, value, "CompanyDunsNumber"); }
        }
        private System.String __DandbCompanyId;
        [EntityField(true)]
        public System.String DandbCompanyId
        {
            get { return __DandbCompanyId; }
            set { SetField(ref __DandbCompanyId, value, "DandbCompanyId"); }
        }
        private System.String __EmailBouncedReason;
        [EntityField(true)]
        public System.String EmailBouncedReason
        {
            get { return __EmailBouncedReason; }
            set { SetField(ref __EmailBouncedReason, value, "EmailBouncedReason"); }
        }
        private System.DateTime? __EmailBouncedDate;
        [EntityField(true)]
        public System.DateTime? EmailBouncedDate
        {
            get { return __EmailBouncedDate; }
            set { SetField(ref __EmailBouncedDate, value, "EmailBouncedDate"); }
        }
        private System.String __SICCodec;
        [JsonProperty(PropertyName = "SICCode__c")]
        [EntityField(true)]
        public System.String SICCodec
        {
            get { return __SICCodec; }
            set { SetField(ref __SICCodec, value, "SICCode__c"); }
        }
        private PickLeadProductInterest __ProductInterestc;
        [JsonProperty(PropertyName = "ProductInterest__c")]
        [EntityField(true)]
        public PickLeadProductInterest ProductInterestc
        {
            get { return __ProductInterestc; }
            set { SetField(ref __ProductInterestc, value, "ProductInterest__c"); }
        }
        private PickLeadPrimary __Primaryc;
        [JsonProperty(PropertyName = "Primary__c")]
        [EntityField(true)]
        public PickLeadPrimary Primaryc
        {
            get { return __Primaryc; }
            set { SetField(ref __Primaryc, value, "Primary__c"); }
        }
        private System.String __CurrentGeneratorsc;
        [JsonProperty(PropertyName = "CurrentGenerators__c")]
        [EntityField(true)]
        public System.String CurrentGeneratorsc
        {
            get { return __CurrentGeneratorsc; }
            set { SetField(ref __CurrentGeneratorsc, value, "CurrentGenerators__c"); }
        }
        private System.Double? __NumberofLocationsc;
        [JsonProperty(PropertyName = "NumberofLocations__c")]
        [EntityField(true)]
        public System.Double? NumberofLocationsc
        {
            get { return __NumberofLocationsc; }
            set { SetField(ref __NumberofLocationsc, value, "NumberofLocations__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Lead,AcceptedEventRelation> AcceptedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Lead,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Lead,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LeadId")]
        public RelationShip<Lead,CampaignMember> CampaignMembers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Lead,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Lead,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Lead,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Lead,DeclinedEventRelation> DeclinedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,EmailStatus> EmailStatuses
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Lead,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Lead,EventRelation> EventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LeadId")]
        public RelationShip<Lead,LeadCleanInfo> LeadCleanInfos
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Lead,LeadFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LeadId")]
        public RelationShip<Lead,LeadHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LeadId")]
        public RelationShip<Lead,LeadShare> Shares
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Lead,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Lead,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Lead,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Lead,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhoId")]
        public RelationShip<Lead,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Lead,TopicAssignment> TopicAssignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<Lead,UndecidedEventRelation> UndecidedEventRelations
        {
            get;set;
        }
    }
    [EntityName("LeadCleanInfo")]
    public class LeadCleanInfo : ISalesforceEntity
    {
    [JsonConstructor]
        private LeadCleanInfo(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LeadCleanInfo()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __LeadId;
        [EntityField(false)]
        public System.String LeadId
        {
            get { return __LeadId; }
            set { SetField(ref __LeadId, value, "LeadId"); }
        }
        private System.DateTime __LastMatchedDate;
        [EntityField(false)]
        public System.DateTime LastMatchedDate
        {
            get { return __LastMatchedDate; }
            set { SetField(ref __LastMatchedDate, value, "LastMatchedDate"); }
        }
        private System.DateTime? __LastStatusChangedDate;
        [EntityField(true)]
        public System.DateTime? LastStatusChangedDate
        {
            get { return __LastStatusChangedDate; }
            set { SetField(ref __LastStatusChangedDate, value, "LastStatusChangedDate"); }
        }
        private System.String __LastStatusChangedById;
        [EntityField(true)]
        public System.String LastStatusChangedById
        {
            get { return __LastStatusChangedById; }
            set { SetField(ref __LastStatusChangedById, value, "LastStatusChangedById"); }
        }
        private System.Boolean __IsInactive;
        [EntityField(false)]
        public System.Boolean IsInactive
        {
            get { return __IsInactive; }
            set { SetField(ref __IsInactive, value, "IsInactive"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __LastName;
        [EntityField(true)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __AnnualRevenue;
        [EntityField(true)]
        public System.String AnnualRevenue
        {
            get { return __AnnualRevenue; }
            set { SetField(ref __AnnualRevenue, value, "AnnualRevenue"); }
        }
        private System.Int32? __NumberOfEmployees;
        [EntityField(true)]
        public System.Int32? NumberOfEmployees
        {
            get { return __NumberOfEmployees; }
            set { SetField(ref __NumberOfEmployees, value, "NumberOfEmployees"); }
        }
        private PickLeadCleanInfoIndustry __Industry;
        [EntityField(true)]
        public PickLeadCleanInfoIndustry Industry
        {
            get { return __Industry; }
            set { SetField(ref __Industry, value, "Industry"); }
        }
        private System.String __CompanyName;
        [EntityField(true)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __CompanyDunsNumber;
        [EntityField(true)]
        public System.String CompanyDunsNumber
        {
            get { return __CompanyDunsNumber; }
            set { SetField(ref __CompanyDunsNumber, value, "CompanyDunsNumber"); }
        }
        private PickLeadCleanInfoContactStatusDataDotCom __ContactStatusDataDotCom;
        [EntityField(true)]
        public PickLeadCleanInfoContactStatusDataDotCom ContactStatusDataDotCom
        {
            get { return __ContactStatusDataDotCom; }
            set { SetField(ref __ContactStatusDataDotCom, value, "ContactStatusDataDotCom"); }
        }
        private System.Boolean __IsReviewedName;
        [EntityField(false)]
        public System.Boolean IsReviewedName
        {
            get { return __IsReviewedName; }
            set { SetField(ref __IsReviewedName, value, "IsReviewedName"); }
        }
        private System.Boolean __IsReviewedEmail;
        [EntityField(false)]
        public System.Boolean IsReviewedEmail
        {
            get { return __IsReviewedEmail; }
            set { SetField(ref __IsReviewedEmail, value, "IsReviewedEmail"); }
        }
        private System.Boolean __IsReviewedPhone;
        [EntityField(false)]
        public System.Boolean IsReviewedPhone
        {
            get { return __IsReviewedPhone; }
            set { SetField(ref __IsReviewedPhone, value, "IsReviewedPhone"); }
        }
        private System.Boolean __IsReviewedAddress;
        [EntityField(false)]
        public System.Boolean IsReviewedAddress
        {
            get { return __IsReviewedAddress; }
            set { SetField(ref __IsReviewedAddress, value, "IsReviewedAddress"); }
        }
        private System.Boolean __IsReviewedTitle;
        [EntityField(false)]
        public System.Boolean IsReviewedTitle
        {
            get { return __IsReviewedTitle; }
            set { SetField(ref __IsReviewedTitle, value, "IsReviewedTitle"); }
        }
        private System.Boolean __IsReviewedAnnualRevenue;
        [EntityField(false)]
        public System.Boolean IsReviewedAnnualRevenue
        {
            get { return __IsReviewedAnnualRevenue; }
            set { SetField(ref __IsReviewedAnnualRevenue, value, "IsReviewedAnnualRevenue"); }
        }
        private System.Boolean __IsReviewedNumberOfEmployees;
        [EntityField(false)]
        public System.Boolean IsReviewedNumberOfEmployees
        {
            get { return __IsReviewedNumberOfEmployees; }
            set { SetField(ref __IsReviewedNumberOfEmployees, value, "IsReviewedNumberOfEmployees"); }
        }
        private System.Boolean __IsReviewedIndustry;
        [EntityField(false)]
        public System.Boolean IsReviewedIndustry
        {
            get { return __IsReviewedIndustry; }
            set { SetField(ref __IsReviewedIndustry, value, "IsReviewedIndustry"); }
        }
        private System.Boolean __IsReviewedCompanyName;
        [EntityField(false)]
        public System.Boolean IsReviewedCompanyName
        {
            get { return __IsReviewedCompanyName; }
            set { SetField(ref __IsReviewedCompanyName, value, "IsReviewedCompanyName"); }
        }
        private System.Boolean __IsReviewedCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsReviewedCompanyDunsNumber
        {
            get { return __IsReviewedCompanyDunsNumber; }
            set { SetField(ref __IsReviewedCompanyDunsNumber, value, "IsReviewedCompanyDunsNumber"); }
        }
        private System.Boolean __IsReviewedDandBCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsReviewedDandBCompanyDunsNumber
        {
            get { return __IsReviewedDandBCompanyDunsNumber; }
            set { SetField(ref __IsReviewedDandBCompanyDunsNumber, value, "IsReviewedDandBCompanyDunsNumber"); }
        }
        private System.Boolean __IsDifferentFirstName;
        [EntityField(false)]
        public System.Boolean IsDifferentFirstName
        {
            get { return __IsDifferentFirstName; }
            set { SetField(ref __IsDifferentFirstName, value, "IsDifferentFirstName"); }
        }
        private System.Boolean __IsDifferentLastName;
        [EntityField(false)]
        public System.Boolean IsDifferentLastName
        {
            get { return __IsDifferentLastName; }
            set { SetField(ref __IsDifferentLastName, value, "IsDifferentLastName"); }
        }
        private System.Boolean __IsDifferentEmail;
        [EntityField(false)]
        public System.Boolean IsDifferentEmail
        {
            get { return __IsDifferentEmail; }
            set { SetField(ref __IsDifferentEmail, value, "IsDifferentEmail"); }
        }
        private System.Boolean __IsDifferentPhone;
        [EntityField(false)]
        public System.Boolean IsDifferentPhone
        {
            get { return __IsDifferentPhone; }
            set { SetField(ref __IsDifferentPhone, value, "IsDifferentPhone"); }
        }
        private System.Boolean __IsDifferentStreet;
        [EntityField(false)]
        public System.Boolean IsDifferentStreet
        {
            get { return __IsDifferentStreet; }
            set { SetField(ref __IsDifferentStreet, value, "IsDifferentStreet"); }
        }
        private System.Boolean __IsDifferentCity;
        [EntityField(false)]
        public System.Boolean IsDifferentCity
        {
            get { return __IsDifferentCity; }
            set { SetField(ref __IsDifferentCity, value, "IsDifferentCity"); }
        }
        private System.Boolean __IsDifferentState;
        [EntityField(false)]
        public System.Boolean IsDifferentState
        {
            get { return __IsDifferentState; }
            set { SetField(ref __IsDifferentState, value, "IsDifferentState"); }
        }
        private System.Boolean __IsDifferentPostalCode;
        [EntityField(false)]
        public System.Boolean IsDifferentPostalCode
        {
            get { return __IsDifferentPostalCode; }
            set { SetField(ref __IsDifferentPostalCode, value, "IsDifferentPostalCode"); }
        }
        private System.Boolean __IsDifferentCountry;
        [EntityField(false)]
        public System.Boolean IsDifferentCountry
        {
            get { return __IsDifferentCountry; }
            set { SetField(ref __IsDifferentCountry, value, "IsDifferentCountry"); }
        }
        private System.Boolean __IsDifferentTitle;
        [EntityField(false)]
        public System.Boolean IsDifferentTitle
        {
            get { return __IsDifferentTitle; }
            set { SetField(ref __IsDifferentTitle, value, "IsDifferentTitle"); }
        }
        private System.Boolean __IsDifferentAnnualRevenue;
        [EntityField(false)]
        public System.Boolean IsDifferentAnnualRevenue
        {
            get { return __IsDifferentAnnualRevenue; }
            set { SetField(ref __IsDifferentAnnualRevenue, value, "IsDifferentAnnualRevenue"); }
        }
        private System.Boolean __IsDifferentNumberOfEmployees;
        [EntityField(false)]
        public System.Boolean IsDifferentNumberOfEmployees
        {
            get { return __IsDifferentNumberOfEmployees; }
            set { SetField(ref __IsDifferentNumberOfEmployees, value, "IsDifferentNumberOfEmployees"); }
        }
        private System.Boolean __IsDifferentIndustry;
        [EntityField(false)]
        public System.Boolean IsDifferentIndustry
        {
            get { return __IsDifferentIndustry; }
            set { SetField(ref __IsDifferentIndustry, value, "IsDifferentIndustry"); }
        }
        private System.Boolean __IsDifferentCompanyName;
        [EntityField(false)]
        public System.Boolean IsDifferentCompanyName
        {
            get { return __IsDifferentCompanyName; }
            set { SetField(ref __IsDifferentCompanyName, value, "IsDifferentCompanyName"); }
        }
        private System.Boolean __IsDifferentCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsDifferentCompanyDunsNumber
        {
            get { return __IsDifferentCompanyDunsNumber; }
            set { SetField(ref __IsDifferentCompanyDunsNumber, value, "IsDifferentCompanyDunsNumber"); }
        }
        private System.Boolean __IsDifferentDandBCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsDifferentDandBCompanyDunsNumber
        {
            get { return __IsDifferentDandBCompanyDunsNumber; }
            set { SetField(ref __IsDifferentDandBCompanyDunsNumber, value, "IsDifferentDandBCompanyDunsNumber"); }
        }
        private System.Boolean __IsDifferentStateCode;
        [EntityField(false)]
        public System.Boolean IsDifferentStateCode
        {
            get { return __IsDifferentStateCode; }
            set { SetField(ref __IsDifferentStateCode, value, "IsDifferentStateCode"); }
        }
        private System.Boolean __IsDifferentCountryCode;
        [EntityField(false)]
        public System.Boolean IsDifferentCountryCode
        {
            get { return __IsDifferentCountryCode; }
            set { SetField(ref __IsDifferentCountryCode, value, "IsDifferentCountryCode"); }
        }
        private System.Boolean __CleanedByJob;
        [EntityField(false)]
        public System.Boolean CleanedByJob
        {
            get { return __CleanedByJob; }
            set { SetField(ref __CleanedByJob, value, "CleanedByJob"); }
        }
        private System.Boolean __CleanedByUser;
        [EntityField(false)]
        public System.Boolean CleanedByUser
        {
            get { return __CleanedByUser; }
            set { SetField(ref __CleanedByUser, value, "CleanedByUser"); }
        }
        private System.String __DandBCompanyDunsNumber;
        [EntityField(true)]
        public System.String DandBCompanyDunsNumber
        {
            get { return __DandBCompanyDunsNumber; }
            set { SetField(ref __DandBCompanyDunsNumber, value, "DandBCompanyDunsNumber"); }
        }
        private System.String __DataDotComCompanyId;
        [EntityField(true)]
        public System.String DataDotComCompanyId
        {
            get { return __DataDotComCompanyId; }
            set { SetField(ref __DataDotComCompanyId, value, "DataDotComCompanyId"); }
        }
        private System.Boolean __IsFlaggedWrongName;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongName
        {
            get { return __IsFlaggedWrongName; }
            set { SetField(ref __IsFlaggedWrongName, value, "IsFlaggedWrongName"); }
        }
        private System.Boolean __IsFlaggedWrongEmail;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongEmail
        {
            get { return __IsFlaggedWrongEmail; }
            set { SetField(ref __IsFlaggedWrongEmail, value, "IsFlaggedWrongEmail"); }
        }
        private System.Boolean __IsFlaggedWrongPhone;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongPhone
        {
            get { return __IsFlaggedWrongPhone; }
            set { SetField(ref __IsFlaggedWrongPhone, value, "IsFlaggedWrongPhone"); }
        }
        private System.Boolean __IsFlaggedWrongAddress;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongAddress
        {
            get { return __IsFlaggedWrongAddress; }
            set { SetField(ref __IsFlaggedWrongAddress, value, "IsFlaggedWrongAddress"); }
        }
        private System.Boolean __IsFlaggedWrongTitle;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongTitle
        {
            get { return __IsFlaggedWrongTitle; }
            set { SetField(ref __IsFlaggedWrongTitle, value, "IsFlaggedWrongTitle"); }
        }
        private System.Boolean __IsFlaggedWrongAnnualRevenue;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongAnnualRevenue
        {
            get { return __IsFlaggedWrongAnnualRevenue; }
            set { SetField(ref __IsFlaggedWrongAnnualRevenue, value, "IsFlaggedWrongAnnualRevenue"); }
        }
        private System.Boolean __IsFlaggedWrongNumberOfEmployees;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongNumberOfEmployees
        {
            get { return __IsFlaggedWrongNumberOfEmployees; }
            set { SetField(ref __IsFlaggedWrongNumberOfEmployees, value, "IsFlaggedWrongNumberOfEmployees"); }
        }
        private System.Boolean __IsFlaggedWrongIndustry;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongIndustry
        {
            get { return __IsFlaggedWrongIndustry; }
            set { SetField(ref __IsFlaggedWrongIndustry, value, "IsFlaggedWrongIndustry"); }
        }
        private System.Boolean __IsFlaggedWrongCompanyName;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongCompanyName
        {
            get { return __IsFlaggedWrongCompanyName; }
            set { SetField(ref __IsFlaggedWrongCompanyName, value, "IsFlaggedWrongCompanyName"); }
        }
        private System.Boolean __IsFlaggedWrongCompanyDunsNumber;
        [EntityField(false)]
        public System.Boolean IsFlaggedWrongCompanyDunsNumber
        {
            get { return __IsFlaggedWrongCompanyDunsNumber; }
            set { SetField(ref __IsFlaggedWrongCompanyDunsNumber, value, "IsFlaggedWrongCompanyDunsNumber"); }
        }
        private System.String __DataDotComId;
        [EntityField(true)]
        public System.String DataDotComId
        {
            get { return __DataDotComId; }
            set { SetField(ref __DataDotComId, value, "DataDotComId"); }
        }
    }
    [EntityName("LeadFeed")]
    public class LeadFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private LeadFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LeadFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickLeadFeedType __Type;
        [EntityField(true)]
        public PickLeadFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<LeadFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<LeadFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<LeadFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("LeadHistory")]
    public class LeadHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private LeadHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LeadHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __LeadId;
        [EntityField(false)]
        public System.String LeadId
        {
            get { return __LeadId; }
            set { SetField(ref __LeadId, value, "LeadId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickLeadHistoryField __Field;
        [EntityField(false)]
        public PickLeadHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("LeadShare")]
    public class LeadShare : ISalesforceEntity
    {
    [JsonConstructor]
        private LeadShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LeadShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __LeadId;
        [EntityField(false)]
        public System.String LeadId
        {
            get { return __LeadId; }
            set { SetField(ref __LeadId, value, "LeadId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickLeadShareLeadAccessLevel __LeadAccessLevel;
        [EntityField(false)]
        public PickLeadShareLeadAccessLevel LeadAccessLevel
        {
            get { return __LeadAccessLevel; }
            set { SetField(ref __LeadAccessLevel, value, "LeadAccessLevel"); }
        }
        private PickLeadShareRowCause __RowCause;
        [EntityField(true)]
        public PickLeadShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("LeadStatus")]
    public class LeadStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private LeadStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LeadStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __IsConverted;
        [EntityField(false)]
        public System.Boolean IsConverted
        {
            get { return __IsConverted; }
            set { SetField(ref __IsConverted, value, "IsConverted"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("LoginHistory")]
    public class LoginHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private LoginHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LoginHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserId;
        [EntityField(true)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private System.DateTime __LoginTime;
        [EntityField(false)]
        public System.DateTime LoginTime
        {
            get { return __LoginTime; }
            set { SetField(ref __LoginTime, value, "LoginTime"); }
        }
        private PickLoginHistoryLoginType __LoginType;
        [EntityField(false)]
        public PickLoginHistoryLoginType LoginType
        {
            get { return __LoginType; }
            set { SetField(ref __LoginType, value, "LoginType"); }
        }
        private System.String __SourceIp;
        [EntityField(true)]
        public System.String SourceIp
        {
            get { return __SourceIp; }
            set { SetField(ref __SourceIp, value, "SourceIp"); }
        }
        private System.String __LoginUrl;
        [EntityField(true)]
        public System.String LoginUrl
        {
            get { return __LoginUrl; }
            set { SetField(ref __LoginUrl, value, "LoginUrl"); }
        }
        private System.String __Browser;
        [EntityField(true)]
        public System.String Browser
        {
            get { return __Browser; }
            set { SetField(ref __Browser, value, "Browser"); }
        }
        private System.String __Platform;
        [EntityField(true)]
        public System.String Platform
        {
            get { return __Platform; }
            set { SetField(ref __Platform, value, "Platform"); }
        }
        private System.String __Status;
        [EntityField(true)]
        public System.String Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __Application;
        [EntityField(true)]
        public System.String Application
        {
            get { return __Application; }
            set { SetField(ref __Application, value, "Application"); }
        }
        private System.String __ClientVersion;
        [EntityField(true)]
        public System.String ClientVersion
        {
            get { return __ClientVersion; }
            set { SetField(ref __ClientVersion, value, "ClientVersion"); }
        }
        private System.String __ApiType;
        [EntityField(true)]
        public System.String ApiType
        {
            get { return __ApiType; }
            set { SetField(ref __ApiType, value, "ApiType"); }
        }
        private System.String __ApiVersion;
        [EntityField(true)]
        public System.String ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
    }
    [EntityName("LoginIp")]
    public class LoginIp : ISalesforceEntity
    {
    [JsonConstructor]
        private LoginIp(string hack)
        {
            trackPropertyUpdates = false;
        }

        public LoginIp()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UsersId;
        [EntityField(false)]
        public System.String UsersId
        {
            get { return __UsersId; }
            set { SetField(ref __UsersId, value, "UsersId"); }
        }
        private System.String __SourceIp;
        [EntityField(true)]
        public System.String SourceIp
        {
            get { return __SourceIp; }
            set { SetField(ref __SourceIp, value, "SourceIp"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsAuthenticated;
        [EntityField(false)]
        public System.Boolean IsAuthenticated
        {
            get { return __IsAuthenticated; }
            set { SetField(ref __IsAuthenticated, value, "IsAuthenticated"); }
        }
        private System.DateTime? __ChallengeSentDate;
        [EntityField(true)]
        public System.DateTime? ChallengeSentDate
        {
            get { return __ChallengeSentDate; }
            set { SetField(ref __ChallengeSentDate, value, "ChallengeSentDate"); }
        }
        private PickLoginIpChallengeMethod __ChallengeMethod;
        [EntityField(true)]
        public PickLoginIpChallengeMethod ChallengeMethod
        {
            get { return __ChallengeMethod; }
            set { SetField(ref __ChallengeMethod, value, "ChallengeMethod"); }
        }
    }
    [EntityName("MailmergeTemplate")]
    public class MailmergeTemplate : ISalesforceEntity
    {
    [JsonConstructor]
        private MailmergeTemplate(string hack)
        {
            trackPropertyUpdates = false;
        }

        public MailmergeTemplate()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __Filename;
        [EntityField(false)]
        public System.String Filename
        {
            get { return __Filename; }
            set { SetField(ref __Filename, value, "Filename"); }
        }
        private System.Int32? __BodyLength;
        [EntityField(true)]
        public System.Int32? BodyLength
        {
            get { return __BodyLength; }
            set { SetField(ref __BodyLength, value, "BodyLength"); }
        }
        private System.String __Body;
        [EntityField(false)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.DateTime? __LastUsedDate;
        [EntityField(true)]
        public System.DateTime? LastUsedDate
        {
            get { return __LastUsedDate; }
            set { SetField(ref __LastUsedDate, value, "LastUsedDate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __SecurityOptionsAttachmentScannedForXSS;
        [EntityField(false)]
        public System.Boolean SecurityOptionsAttachmentScannedForXSS
        {
            get { return __SecurityOptionsAttachmentScannedForXSS; }
            set { SetField(ref __SecurityOptionsAttachmentScannedForXSS, value, "SecurityOptionsAttachmentScannedForXSS"); }
        }
        private System.Boolean __SecurityOptionsAttachmentHasXSSThreat;
        [EntityField(false)]
        public System.Boolean SecurityOptionsAttachmentHasXSSThreat
        {
            get { return __SecurityOptionsAttachmentHasXSSThreat; }
            set { SetField(ref __SecurityOptionsAttachmentHasXSSThreat, value, "SecurityOptionsAttachmentHasXSSThreat"); }
        }
        private System.Boolean __SecurityOptionsAttachmentScannedforFlash;
        [EntityField(false)]
        public System.Boolean SecurityOptionsAttachmentScannedforFlash
        {
            get { return __SecurityOptionsAttachmentScannedforFlash; }
            set { SetField(ref __SecurityOptionsAttachmentScannedforFlash, value, "SecurityOptionsAttachmentScannedforFlash"); }
        }
        private System.Boolean __SecurityOptionsAttachmentHasFlash;
        [EntityField(false)]
        public System.Boolean SecurityOptionsAttachmentHasFlash
        {
            get { return __SecurityOptionsAttachmentHasFlash; }
            set { SetField(ref __SecurityOptionsAttachmentHasFlash, value, "SecurityOptionsAttachmentHasFlash"); }
        }
    }
    [EntityName("Name")]
    public class Name : ISalesforceEntity
    {
    [JsonConstructor]
        private Name(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Name()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String ___Name;
        [JsonProperty(PropertyName = "Name")]
        [EntityField(true)]
        public System.String _Name
        {
            get { return ___Name; }
            set { SetField(ref ___Name, value, "Name"); }
        }
        private System.String __LastName;
        [EntityField(true)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private PickNameType __Type;
        [EntityField(true)]
        public PickNameType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __Alias;
        [EntityField(true)]
        public System.String Alias
        {
            get { return __Alias; }
            set { SetField(ref __Alias, value, "Alias"); }
        }
        private System.String __UserRoleId;
        [EntityField(true)]
        public System.String UserRoleId
        {
            get { return __UserRoleId; }
            set { SetField(ref __UserRoleId, value, "UserRoleId"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __ProfileId;
        [EntityField(true)]
        public System.String ProfileId
        {
            get { return __ProfileId; }
            set { SetField(ref __ProfileId, value, "ProfileId"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Username;
        [EntityField(true)]
        public System.String Username
        {
            get { return __Username; }
            set { SetField(ref __Username, value, "Username"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
    }
    [EntityName("Note")]
    public class Note : ISalesforceEntity
    {
    [JsonConstructor]
        private Note(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Note()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("NoteAndAttachment")]
    public class NoteAndAttachment : ISalesforceEntity
    {
    [JsonConstructor]
        private NoteAndAttachment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public NoteAndAttachment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.Boolean __IsNote;
        [EntityField(false)]
        public System.Boolean IsNote
        {
            get { return __IsNote; }
            set { SetField(ref __IsNote, value, "IsNote"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ObjectPermissions")]
    public class ObjectPermissions : ISalesforceEntity
    {
    [JsonConstructor]
        private ObjectPermissions(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ObjectPermissions()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickObjectPermissionsSobjectType __SobjectType;
        [EntityField(false)]
        public PickObjectPermissionsSobjectType SobjectType
        {
            get { return __SobjectType; }
            set { SetField(ref __SobjectType, value, "SobjectType"); }
        }
        private System.Boolean __PermissionsCreate;
        [EntityField(false)]
        public System.Boolean PermissionsCreate
        {
            get { return __PermissionsCreate; }
            set { SetField(ref __PermissionsCreate, value, "PermissionsCreate"); }
        }
        private System.Boolean __PermissionsRead;
        [EntityField(false)]
        public System.Boolean PermissionsRead
        {
            get { return __PermissionsRead; }
            set { SetField(ref __PermissionsRead, value, "PermissionsRead"); }
        }
        private System.Boolean __PermissionsEdit;
        [EntityField(false)]
        public System.Boolean PermissionsEdit
        {
            get { return __PermissionsEdit; }
            set { SetField(ref __PermissionsEdit, value, "PermissionsEdit"); }
        }
        private System.Boolean __PermissionsDelete;
        [EntityField(false)]
        public System.Boolean PermissionsDelete
        {
            get { return __PermissionsDelete; }
            set { SetField(ref __PermissionsDelete, value, "PermissionsDelete"); }
        }
        private System.Boolean __PermissionsViewAllRecords;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllRecords
        {
            get { return __PermissionsViewAllRecords; }
            set { SetField(ref __PermissionsViewAllRecords, value, "PermissionsViewAllRecords"); }
        }
        private System.Boolean __PermissionsModifyAllRecords;
        [EntityField(false)]
        public System.Boolean PermissionsModifyAllRecords
        {
            get { return __PermissionsModifyAllRecords; }
            set { SetField(ref __PermissionsModifyAllRecords, value, "PermissionsModifyAllRecords"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("OpenActivity")]
    public class OpenActivity : ISalesforceEntity
    {
    [JsonConstructor]
        private OpenActivity(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpenActivity()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.Boolean __IsTask;
        [EntityField(false)]
        public System.Boolean IsTask
        {
            get { return __IsTask; }
            set { SetField(ref __IsTask, value, "IsTask"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private System.String __OwnerId;
        [EntityField(true)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private PickOpenActivityStatus __Status;
        [EntityField(true)]
        public PickOpenActivityStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickOpenActivityPriority __Priority;
        [EntityField(true)]
        public PickOpenActivityPriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private PickOpenActivityActivityType __ActivityType;
        [EntityField(true)]
        public PickOpenActivityActivityType ActivityType
        {
            get { return __ActivityType; }
            set { SetField(ref __ActivityType, value, "ActivityType"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.Boolean __IsAllDayEvent;
        [EntityField(false)]
        public System.Boolean IsAllDayEvent
        {
            get { return __IsAllDayEvent; }
            set { SetField(ref __IsAllDayEvent, value, "IsAllDayEvent"); }
        }
        private System.Boolean __IsVisibleInSelfService;
        [EntityField(false)]
        public System.Boolean IsVisibleInSelfService
        {
            get { return __IsVisibleInSelfService; }
            set { SetField(ref __IsVisibleInSelfService, value, "IsVisibleInSelfService"); }
        }
        private System.Int32? __DurationInMinutes;
        [EntityField(true)]
        public System.Int32? DurationInMinutes
        {
            get { return __DurationInMinutes; }
            set { SetField(ref __DurationInMinutes, value, "DurationInMinutes"); }
        }
        private System.String __Location;
        [EntityField(true)]
        public System.String Location
        {
            get { return __Location; }
            set { SetField(ref __Location, value, "Location"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32? __CallDurationInSeconds;
        [EntityField(true)]
        public System.Int32? CallDurationInSeconds
        {
            get { return __CallDurationInSeconds; }
            set { SetField(ref __CallDurationInSeconds, value, "CallDurationInSeconds"); }
        }
        private PickOpenActivityCallType __CallType;
        [EntityField(true)]
        public PickOpenActivityCallType CallType
        {
            get { return __CallType; }
            set { SetField(ref __CallType, value, "CallType"); }
        }
        private System.String __CallDisposition;
        [EntityField(true)]
        public System.String CallDisposition
        {
            get { return __CallDisposition; }
            set { SetField(ref __CallDisposition, value, "CallDisposition"); }
        }
        private System.String __CallObject;
        [EntityField(true)]
        public System.String CallObject
        {
            get { return __CallObject; }
            set { SetField(ref __CallObject, value, "CallObject"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        private System.DateTime? __EndDateTime;
        [EntityField(true)]
        public System.DateTime? EndDateTime
        {
            get { return __EndDateTime; }
            set { SetField(ref __EndDateTime, value, "EndDateTime"); }
        }
        private System.DateTime? __StartDateTime;
        [EntityField(true)]
        public System.DateTime? StartDateTime
        {
            get { return __StartDateTime; }
            set { SetField(ref __StartDateTime, value, "StartDateTime"); }
        }
    }
    [EntityName("Opportunity")]
    public class Opportunity : ISalesforceEntity
    {
    [JsonConstructor]
        private Opportunity(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Opportunity()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.Boolean __IsPrivate;
        [EntityField(false)]
        public System.Boolean IsPrivate
        {
            get { return __IsPrivate; }
            set { SetField(ref __IsPrivate, value, "IsPrivate"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickOpportunityStageName __StageName;
        [EntityField(false)]
        public PickOpportunityStageName StageName
        {
            get { return __StageName; }
            set { SetField(ref __StageName, value, "StageName"); }
        }
        private System.String __Amount;
        [EntityField(true)]
        public System.String Amount
        {
            get { return __Amount; }
            set { SetField(ref __Amount, value, "Amount"); }
        }
        private System.String __Probability;
        [EntityField(true)]
        public System.String Probability
        {
            get { return __Probability; }
            set { SetField(ref __Probability, value, "Probability"); }
        }
        private System.String __ExpectedRevenue;
        [EntityField(true)]
        public System.String ExpectedRevenue
        {
            get { return __ExpectedRevenue; }
            set { SetField(ref __ExpectedRevenue, value, "ExpectedRevenue"); }
        }
        private System.Double? __TotalOpportunityQuantity;
        [EntityField(true)]
        public System.Double? TotalOpportunityQuantity
        {
            get { return __TotalOpportunityQuantity; }
            set { SetField(ref __TotalOpportunityQuantity, value, "TotalOpportunityQuantity"); }
        }
        private System.DateTime __CloseDate;
        [EntityField(false)]
        public System.DateTime CloseDate
        {
            get { return __CloseDate; }
            set { SetField(ref __CloseDate, value, "CloseDate"); }
        }
        private PickOpportunityType __Type;
        [EntityField(true)]
        public PickOpportunityType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __NextStep;
        [EntityField(true)]
        public System.String NextStep
        {
            get { return __NextStep; }
            set { SetField(ref __NextStep, value, "NextStep"); }
        }
        private PickOpportunityLeadSource __LeadSource;
        [EntityField(true)]
        public PickOpportunityLeadSource LeadSource
        {
            get { return __LeadSource; }
            set { SetField(ref __LeadSource, value, "LeadSource"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.Boolean __IsWon;
        [EntityField(false)]
        public System.Boolean IsWon
        {
            get { return __IsWon; }
            set { SetField(ref __IsWon, value, "IsWon"); }
        }
        private PickOpportunityForecastCategory __ForecastCategory;
        [EntityField(false)]
        public PickOpportunityForecastCategory ForecastCategory
        {
            get { return __ForecastCategory; }
            set { SetField(ref __ForecastCategory, value, "ForecastCategory"); }
        }
        private PickOpportunityForecastCategoryName __ForecastCategoryName;
        [EntityField(true)]
        public PickOpportunityForecastCategoryName ForecastCategoryName
        {
            get { return __ForecastCategoryName; }
            set { SetField(ref __ForecastCategoryName, value, "ForecastCategoryName"); }
        }
        private System.String __CampaignId;
        [EntityField(true)]
        public System.String CampaignId
        {
            get { return __CampaignId; }
            set { SetField(ref __CampaignId, value, "CampaignId"); }
        }
        private System.Boolean __HasOpportunityLineItem;
        [EntityField(false)]
        public System.Boolean HasOpportunityLineItem
        {
            get { return __HasOpportunityLineItem; }
            set { SetField(ref __HasOpportunityLineItem, value, "HasOpportunityLineItem"); }
        }
        private System.String __Pricebook2Id;
        [EntityField(true)]
        public System.String Pricebook2Id
        {
            get { return __Pricebook2Id; }
            set { SetField(ref __Pricebook2Id, value, "Pricebook2Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastActivityDate;
        [EntityField(true)]
        public System.DateTime? LastActivityDate
        {
            get { return __LastActivityDate; }
            set { SetField(ref __LastActivityDate, value, "LastActivityDate"); }
        }
        private System.Int32? __FiscalQuarter;
        [EntityField(true)]
        public System.Int32? FiscalQuarter
        {
            get { return __FiscalQuarter; }
            set { SetField(ref __FiscalQuarter, value, "FiscalQuarter"); }
        }
        private System.Int32? __FiscalYear;
        [EntityField(true)]
        public System.Int32? FiscalYear
        {
            get { return __FiscalYear; }
            set { SetField(ref __FiscalYear, value, "FiscalYear"); }
        }
        private System.String __Fiscal;
        [EntityField(true)]
        public System.String Fiscal
        {
            get { return __Fiscal; }
            set { SetField(ref __Fiscal, value, "Fiscal"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private PickOpportunityDeliveryInstallationStatus __DeliveryInstallationStatusc;
        [JsonProperty(PropertyName = "DeliveryInstallationStatus__c")]
        [EntityField(true)]
        public PickOpportunityDeliveryInstallationStatus DeliveryInstallationStatusc
        {
            get { return __DeliveryInstallationStatusc; }
            set { SetField(ref __DeliveryInstallationStatusc, value, "DeliveryInstallationStatus__c"); }
        }
        private System.String __TrackingNumberc;
        [JsonProperty(PropertyName = "TrackingNumber__c")]
        [EntityField(true)]
        public System.String TrackingNumberc
        {
            get { return __TrackingNumberc; }
            set { SetField(ref __TrackingNumberc, value, "TrackingNumber__c"); }
        }
        private System.String __OrderNumberc;
        [JsonProperty(PropertyName = "OrderNumber__c")]
        [EntityField(true)]
        public System.String OrderNumberc
        {
            get { return __OrderNumberc; }
            set { SetField(ref __OrderNumberc, value, "OrderNumber__c"); }
        }
        private System.String __CurrentGeneratorsc;
        [JsonProperty(PropertyName = "CurrentGenerators__c")]
        [EntityField(true)]
        public System.String CurrentGeneratorsc
        {
            get { return __CurrentGeneratorsc; }
            set { SetField(ref __CurrentGeneratorsc, value, "CurrentGenerators__c"); }
        }
        private System.String __MainCompetitorsc;
        [JsonProperty(PropertyName = "MainCompetitors__c")]
        [EntityField(true)]
        public System.String MainCompetitorsc
        {
            get { return __MainCompetitorsc; }
            set { SetField(ref __MainCompetitorsc, value, "MainCompetitors__c"); }
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,AccountPartner> AccountPartners
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Opportunity,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Opportunity,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecordId")]
        public RelationShip<Opportunity,CollaborationGroupRecord> RecordAssociatedGroups
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Opportunity,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Opportunity,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Opportunity,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Opportunity,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Opportunity,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityCompetitor> OpportunityCompetitors
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityContactRole> OpportunityContactRoles
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Opportunity,OpportunityFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityFieldHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityHistory> OpportunityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityLineItem> OpportunityLineItems
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityPartner> OpportunityPartnersFrom
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,OpportunityShare> Shares
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OpportunityId")]
        public RelationShip<Opportunity,Partner> Partners
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Opportunity,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Opportunity,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Opportunity,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Opportunity,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("OpportunityCompetitor")]
    public class OpportunityCompetitor : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityCompetitor(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityCompetitor()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __CompetitorName;
        [EntityField(true)]
        public System.String CompetitorName
        {
            get { return __CompetitorName; }
            set { SetField(ref __CompetitorName, value, "CompetitorName"); }
        }
        private System.String __Strengths;
        [EntityField(true)]
        public System.String Strengths
        {
            get { return __Strengths; }
            set { SetField(ref __Strengths, value, "Strengths"); }
        }
        private System.String __Weaknesses;
        [EntityField(true)]
        public System.String Weaknesses
        {
            get { return __Weaknesses; }
            set { SetField(ref __Weaknesses, value, "Weaknesses"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("OpportunityContactRole")]
    public class OpportunityContactRole : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityContactRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityContactRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __ContactId;
        [EntityField(false)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private PickOpportunityContactRoleRole __Role;
        [EntityField(true)]
        public PickOpportunityContactRoleRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.Boolean __IsPrimary;
        [EntityField(false)]
        public System.Boolean IsPrimary
        {
            get { return __IsPrimary; }
            set { SetField(ref __IsPrimary, value, "IsPrimary"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("OpportunityFeed")]
    public class OpportunityFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickOpportunityFeedType __Type;
        [EntityField(true)]
        public PickOpportunityFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OpportunityFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OpportunityFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OpportunityFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("OpportunityFieldHistory")]
    public class OpportunityFieldHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityFieldHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityFieldHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickOpportunityFieldHistoryField __Field;
        [EntityField(false)]
        public PickOpportunityFieldHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("OpportunityHistory")]
    public class OpportunityHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickOpportunityHistoryStageName __StageName;
        [EntityField(false)]
        public PickOpportunityHistoryStageName StageName
        {
            get { return __StageName; }
            set { SetField(ref __StageName, value, "StageName"); }
        }
        private System.String __Amount;
        [EntityField(true)]
        public System.String Amount
        {
            get { return __Amount; }
            set { SetField(ref __Amount, value, "Amount"); }
        }
        private System.String __ExpectedRevenue;
        [EntityField(true)]
        public System.String ExpectedRevenue
        {
            get { return __ExpectedRevenue; }
            set { SetField(ref __ExpectedRevenue, value, "ExpectedRevenue"); }
        }
        private System.DateTime? __CloseDate;
        [EntityField(true)]
        public System.DateTime? CloseDate
        {
            get { return __CloseDate; }
            set { SetField(ref __CloseDate, value, "CloseDate"); }
        }
        private System.String __Probability;
        [EntityField(true)]
        public System.String Probability
        {
            get { return __Probability; }
            set { SetField(ref __Probability, value, "Probability"); }
        }
        private PickOpportunityHistoryForecastCategory __ForecastCategory;
        [EntityField(true)]
        public PickOpportunityHistoryForecastCategory ForecastCategory
        {
            get { return __ForecastCategory; }
            set { SetField(ref __ForecastCategory, value, "ForecastCategory"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("OpportunityLineItem")]
    public class OpportunityLineItem : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityLineItem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityLineItem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.String __PricebookEntryId;
        [EntityField(true)]
        public System.String PricebookEntryId
        {
            get { return __PricebookEntryId; }
            set { SetField(ref __PricebookEntryId, value, "PricebookEntryId"); }
        }
        private System.String __Product2Id;
        [EntityField(true)]
        public System.String Product2Id
        {
            get { return __Product2Id; }
            set { SetField(ref __Product2Id, value, "Product2Id"); }
        }
        private System.String __ProductCode;
        [EntityField(true)]
        public System.String ProductCode
        {
            get { return __ProductCode; }
            set { SetField(ref __ProductCode, value, "ProductCode"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Double __Quantity;
        [EntityField(false)]
        public System.Double Quantity
        {
            get { return __Quantity; }
            set { SetField(ref __Quantity, value, "Quantity"); }
        }
        private System.String __TotalPrice;
        [EntityField(true)]
        public System.String TotalPrice
        {
            get { return __TotalPrice; }
            set { SetField(ref __TotalPrice, value, "TotalPrice"); }
        }
        private System.String __UnitPrice;
        [EntityField(true)]
        public System.String UnitPrice
        {
            get { return __UnitPrice; }
            set { SetField(ref __UnitPrice, value, "UnitPrice"); }
        }
        private System.String __ListPrice;
        [EntityField(true)]
        public System.String ListPrice
        {
            get { return __ListPrice; }
            set { SetField(ref __ListPrice, value, "ListPrice"); }
        }
        private System.DateTime? __ServiceDate;
        [EntityField(true)]
        public System.DateTime? ServiceDate
        {
            get { return __ServiceDate; }
            set { SetField(ref __ServiceDate, value, "ServiceDate"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("OpportunityPartner")]
    public class OpportunityPartner : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityPartner(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityPartner()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __AccountToId;
        [EntityField(false)]
        public System.String AccountToId
        {
            get { return __AccountToId; }
            set { SetField(ref __AccountToId, value, "AccountToId"); }
        }
        private PickOpportunityPartnerRole __Role;
        [EntityField(true)]
        public PickOpportunityPartnerRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.Boolean __IsPrimary;
        [EntityField(false)]
        public System.Boolean IsPrimary
        {
            get { return __IsPrimary; }
            set { SetField(ref __IsPrimary, value, "IsPrimary"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ReversePartnerId;
        [EntityField(true)]
        public System.String ReversePartnerId
        {
            get { return __ReversePartnerId; }
            set { SetField(ref __ReversePartnerId, value, "ReversePartnerId"); }
        }
    }
    [EntityName("OpportunityShare")]
    public class OpportunityShare : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(false)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickOpportunityShareOpportunityAccessLevel __OpportunityAccessLevel;
        [EntityField(false)]
        public PickOpportunityShareOpportunityAccessLevel OpportunityAccessLevel
        {
            get { return __OpportunityAccessLevel; }
            set { SetField(ref __OpportunityAccessLevel, value, "OpportunityAccessLevel"); }
        }
        private PickOpportunityShareRowCause __RowCause;
        [EntityField(true)]
        public PickOpportunityShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("OpportunityStage")]
    public class OpportunityStage : ISalesforceEntity
    {
    [JsonConstructor]
        private OpportunityStage(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OpportunityStage()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.Boolean __IsWon;
        [EntityField(false)]
        public System.Boolean IsWon
        {
            get { return __IsWon; }
            set { SetField(ref __IsWon, value, "IsWon"); }
        }
        private PickOpportunityStageForecastCategory __ForecastCategory;
        [EntityField(false)]
        public PickOpportunityStageForecastCategory ForecastCategory
        {
            get { return __ForecastCategory; }
            set { SetField(ref __ForecastCategory, value, "ForecastCategory"); }
        }
        private PickOpportunityStageForecastCategoryName __ForecastCategoryName;
        [EntityField(false)]
        public PickOpportunityStageForecastCategoryName ForecastCategoryName
        {
            get { return __ForecastCategoryName; }
            set { SetField(ref __ForecastCategoryName, value, "ForecastCategoryName"); }
        }
        private System.String __DefaultProbability;
        [EntityField(true)]
        public System.String DefaultProbability
        {
            get { return __DefaultProbability; }
            set { SetField(ref __DefaultProbability, value, "DefaultProbability"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Order")]
    public class Order : ISalesforceEntity
    {
    [JsonConstructor]
        private Order(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Order()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ContractId;
        [EntityField(true)]
        public System.String ContractId
        {
            get { return __ContractId; }
            set { SetField(ref __ContractId, value, "ContractId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __Pricebook2Id;
        [EntityField(true)]
        public System.String Pricebook2Id
        {
            get { return __Pricebook2Id; }
            set { SetField(ref __Pricebook2Id, value, "Pricebook2Id"); }
        }
        private System.String __OriginalOrderId;
        [EntityField(true)]
        public System.String OriginalOrderId
        {
            get { return __OriginalOrderId; }
            set { SetField(ref __OriginalOrderId, value, "OriginalOrderId"); }
        }
        private System.DateTime __EffectiveDate;
        [EntityField(false)]
        public System.DateTime EffectiveDate
        {
            get { return __EffectiveDate; }
            set { SetField(ref __EffectiveDate, value, "EffectiveDate"); }
        }
        private System.DateTime? __EndDate;
        [EntityField(true)]
        public System.DateTime? EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.Boolean __IsReductionOrder;
        [EntityField(false)]
        public System.Boolean IsReductionOrder
        {
            get { return __IsReductionOrder; }
            set { SetField(ref __IsReductionOrder, value, "IsReductionOrder"); }
        }
        private PickOrderStatus __Status;
        [EntityField(false)]
        public PickOrderStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __CustomerAuthorizedById;
        [EntityField(true)]
        public System.String CustomerAuthorizedById
        {
            get { return __CustomerAuthorizedById; }
            set { SetField(ref __CustomerAuthorizedById, value, "CustomerAuthorizedById"); }
        }
        private System.DateTime? __CustomerAuthorizedDate;
        [EntityField(true)]
        public System.DateTime? CustomerAuthorizedDate
        {
            get { return __CustomerAuthorizedDate; }
            set { SetField(ref __CustomerAuthorizedDate, value, "CustomerAuthorizedDate"); }
        }
        private System.String __CompanyAuthorizedById;
        [EntityField(true)]
        public System.String CompanyAuthorizedById
        {
            get { return __CompanyAuthorizedById; }
            set { SetField(ref __CompanyAuthorizedById, value, "CompanyAuthorizedById"); }
        }
        private System.DateTime? __CompanyAuthorizedDate;
        [EntityField(true)]
        public System.DateTime? CompanyAuthorizedDate
        {
            get { return __CompanyAuthorizedDate; }
            set { SetField(ref __CompanyAuthorizedDate, value, "CompanyAuthorizedDate"); }
        }
        private PickOrderType __Type;
        [EntityField(true)]
        public PickOrderType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __BillingStreet;
        [EntityField(true)]
        public System.String BillingStreet
        {
            get { return __BillingStreet; }
            set { SetField(ref __BillingStreet, value, "BillingStreet"); }
        }
        private System.String __BillingCity;
        [EntityField(true)]
        public System.String BillingCity
        {
            get { return __BillingCity; }
            set { SetField(ref __BillingCity, value, "BillingCity"); }
        }
        private System.String __BillingState;
        [EntityField(true)]
        public System.String BillingState
        {
            get { return __BillingState; }
            set { SetField(ref __BillingState, value, "BillingState"); }
        }
        private System.String __BillingPostalCode;
        [EntityField(true)]
        public System.String BillingPostalCode
        {
            get { return __BillingPostalCode; }
            set { SetField(ref __BillingPostalCode, value, "BillingPostalCode"); }
        }
        private System.String __BillingCountry;
        [EntityField(true)]
        public System.String BillingCountry
        {
            get { return __BillingCountry; }
            set { SetField(ref __BillingCountry, value, "BillingCountry"); }
        }
        private System.Double? __BillingLatitude;
        [EntityField(true)]
        public System.Double? BillingLatitude
        {
            get { return __BillingLatitude; }
            set { SetField(ref __BillingLatitude, value, "BillingLatitude"); }
        }
        private System.Double? __BillingLongitude;
        [EntityField(true)]
        public System.Double? BillingLongitude
        {
            get { return __BillingLongitude; }
            set { SetField(ref __BillingLongitude, value, "BillingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __BillingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address BillingAddress
        {
            get { return __BillingAddress; }
            set { SetField(ref __BillingAddress, value, "BillingAddress"); }
        }
        private System.String __ShippingStreet;
        [EntityField(true)]
        public System.String ShippingStreet
        {
            get { return __ShippingStreet; }
            set { SetField(ref __ShippingStreet, value, "ShippingStreet"); }
        }
        private System.String __ShippingCity;
        [EntityField(true)]
        public System.String ShippingCity
        {
            get { return __ShippingCity; }
            set { SetField(ref __ShippingCity, value, "ShippingCity"); }
        }
        private System.String __ShippingState;
        [EntityField(true)]
        public System.String ShippingState
        {
            get { return __ShippingState; }
            set { SetField(ref __ShippingState, value, "ShippingState"); }
        }
        private System.String __ShippingPostalCode;
        [EntityField(true)]
        public System.String ShippingPostalCode
        {
            get { return __ShippingPostalCode; }
            set { SetField(ref __ShippingPostalCode, value, "ShippingPostalCode"); }
        }
        private System.String __ShippingCountry;
        [EntityField(true)]
        public System.String ShippingCountry
        {
            get { return __ShippingCountry; }
            set { SetField(ref __ShippingCountry, value, "ShippingCountry"); }
        }
        private System.Double? __ShippingLatitude;
        [EntityField(true)]
        public System.Double? ShippingLatitude
        {
            get { return __ShippingLatitude; }
            set { SetField(ref __ShippingLatitude, value, "ShippingLatitude"); }
        }
        private System.Double? __ShippingLongitude;
        [EntityField(true)]
        public System.Double? ShippingLongitude
        {
            get { return __ShippingLongitude; }
            set { SetField(ref __ShippingLongitude, value, "ShippingLongitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __ShippingAddress;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address ShippingAddress
        {
            get { return __ShippingAddress; }
            set { SetField(ref __ShippingAddress, value, "ShippingAddress"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime? __PoDate;
        [EntityField(true)]
        public System.DateTime? PoDate
        {
            get { return __PoDate; }
            set { SetField(ref __PoDate, value, "PoDate"); }
        }
        private System.String __PoNumber;
        [EntityField(true)]
        public System.String PoNumber
        {
            get { return __PoNumber; }
            set { SetField(ref __PoNumber, value, "PoNumber"); }
        }
        private System.String __OrderReferenceNumber;
        [EntityField(true)]
        public System.String OrderReferenceNumber
        {
            get { return __OrderReferenceNumber; }
            set { SetField(ref __OrderReferenceNumber, value, "OrderReferenceNumber"); }
        }
        private System.String __BillToContactId;
        [EntityField(true)]
        public System.String BillToContactId
        {
            get { return __BillToContactId; }
            set { SetField(ref __BillToContactId, value, "BillToContactId"); }
        }
        private System.String __ShipToContactId;
        [EntityField(true)]
        public System.String ShipToContactId
        {
            get { return __ShipToContactId; }
            set { SetField(ref __ShipToContactId, value, "ShipToContactId"); }
        }
        private System.DateTime? __ActivatedDate;
        [EntityField(true)]
        public System.DateTime? ActivatedDate
        {
            get { return __ActivatedDate; }
            set { SetField(ref __ActivatedDate, value, "ActivatedDate"); }
        }
        private System.String __ActivatedById;
        [EntityField(true)]
        public System.String ActivatedById
        {
            get { return __ActivatedById; }
            set { SetField(ref __ActivatedById, value, "ActivatedById"); }
        }
        private PickOrderStatusCode __StatusCode;
        [EntityField(false)]
        public PickOrderStatusCode StatusCode
        {
            get { return __StatusCode; }
            set { SetField(ref __StatusCode, value, "StatusCode"); }
        }
        private System.String __OrderNumber;
        [EntityField(false)]
        public System.String OrderNumber
        {
            get { return __OrderNumber; }
            set { SetField(ref __OrderNumber, value, "OrderNumber"); }
        }
        private System.String __TotalAmount;
        [EntityField(false)]
        public System.String TotalAmount
        {
            get { return __TotalAmount; }
            set { SetField(ref __TotalAmount, value, "TotalAmount"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Order,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Order,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Order,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Order,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Order,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Order,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Order,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Order,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Order,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Order,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OriginalOrderId")]
        public RelationShip<Order,Order> Orders
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Order,OrderFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OrderId")]
        public RelationShip<Order,OrderHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OrderId")]
        public RelationShip<Order,OrderItem> OrderItems
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Order,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Order,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Order,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Order,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("OrderFeed")]
    public class OrderFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private OrderFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OrderFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickOrderFeedType __Type;
        [EntityField(true)]
        public PickOrderFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OrderFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OrderFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OrderFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("OrderHistory")]
    public class OrderHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private OrderHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OrderHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OrderId;
        [EntityField(false)]
        public System.String OrderId
        {
            get { return __OrderId; }
            set { SetField(ref __OrderId, value, "OrderId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickOrderHistoryField __Field;
        [EntityField(false)]
        public PickOrderHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("OrderItem")]
    public class OrderItem : ISalesforceEntity
    {
    [JsonConstructor]
        private OrderItem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OrderItem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OrderId;
        [EntityField(false)]
        public System.String OrderId
        {
            get { return __OrderId; }
            set { SetField(ref __OrderId, value, "OrderId"); }
        }
        private System.String __PricebookEntryId;
        [EntityField(false)]
        public System.String PricebookEntryId
        {
            get { return __PricebookEntryId; }
            set { SetField(ref __PricebookEntryId, value, "PricebookEntryId"); }
        }
        private System.String __OriginalOrderItemId;
        [EntityField(true)]
        public System.String OriginalOrderItemId
        {
            get { return __OriginalOrderItemId; }
            set { SetField(ref __OriginalOrderItemId, value, "OriginalOrderItemId"); }
        }
        private System.Double? __AvailableQuantity;
        [EntityField(true)]
        public System.Double? AvailableQuantity
        {
            get { return __AvailableQuantity; }
            set { SetField(ref __AvailableQuantity, value, "AvailableQuantity"); }
        }
        private System.Double __Quantity;
        [EntityField(false)]
        public System.Double Quantity
        {
            get { return __Quantity; }
            set { SetField(ref __Quantity, value, "Quantity"); }
        }
        private System.String __UnitPrice;
        [EntityField(true)]
        public System.String UnitPrice
        {
            get { return __UnitPrice; }
            set { SetField(ref __UnitPrice, value, "UnitPrice"); }
        }
        private System.String __ListPrice;
        [EntityField(true)]
        public System.String ListPrice
        {
            get { return __ListPrice; }
            set { SetField(ref __ListPrice, value, "ListPrice"); }
        }
        private System.DateTime? __ServiceDate;
        [EntityField(true)]
        public System.DateTime? ServiceDate
        {
            get { return __ServiceDate; }
            set { SetField(ref __ServiceDate, value, "ServiceDate"); }
        }
        private System.DateTime? __EndDate;
        [EntityField(true)]
        public System.DateTime? EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __OrderItemNumber;
        [EntityField(false)]
        public System.String OrderItemNumber
        {
            get { return __OrderItemNumber; }
            set { SetField(ref __OrderItemNumber, value, "OrderItemNumber"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<OrderItem,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<OrderItem,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<OrderItem,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<OrderItem,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OriginalOrderItemId")]
        public RelationShip<OrderItem,OrderItem> ChildOrderItems
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<OrderItem,OrderItemFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OrderItemId")]
        public RelationShip<OrderItem,OrderItemHistory> Histories
        {
            get;set;
        }
    }
    [EntityName("OrderItemFeed")]
    public class OrderItemFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private OrderItemFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OrderItemFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickOrderItemFeedType __Type;
        [EntityField(true)]
        public PickOrderItemFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OrderItemFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OrderItemFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<OrderItemFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("OrderItemHistory")]
    public class OrderItemHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private OrderItemHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OrderItemHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OrderItemId;
        [EntityField(false)]
        public System.String OrderItemId
        {
            get { return __OrderItemId; }
            set { SetField(ref __OrderItemId, value, "OrderItemId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickOrderItemHistoryField __Field;
        [EntityField(false)]
        public PickOrderItemHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("OrgWideEmailAddress")]
    public class OrgWideEmailAddress : ISalesforceEntity
    {
    [JsonConstructor]
        private OrgWideEmailAddress(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OrgWideEmailAddress()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Address;
        [EntityField(false)]
        public System.String Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __DisplayName;
        [EntityField(false)]
        public System.String DisplayName
        {
            get { return __DisplayName; }
            set { SetField(ref __DisplayName, value, "DisplayName"); }
        }
        private System.Boolean __IsAllowAllProfiles;
        [EntityField(false)]
        public System.Boolean IsAllowAllProfiles
        {
            get { return __IsAllowAllProfiles; }
            set { SetField(ref __IsAllowAllProfiles, value, "IsAllowAllProfiles"); }
        }
    }
    [EntityName("Organization")]
    public class Organization : ISalesforceEntity
    {
    [JsonConstructor]
        private Organization(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Organization()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Division;
        [EntityField(true)]
        public System.String Division
        {
            get { return __Division; }
            set { SetField(ref __Division, value, "Division"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __PrimaryContact;
        [EntityField(true)]
        public System.String PrimaryContact
        {
            get { return __PrimaryContact; }
            set { SetField(ref __PrimaryContact, value, "PrimaryContact"); }
        }
        private PickOrganizationDefaultLocaleSidKey __DefaultLocaleSidKey;
        [EntityField(false)]
        public PickOrganizationDefaultLocaleSidKey DefaultLocaleSidKey
        {
            get { return __DefaultLocaleSidKey; }
            set { SetField(ref __DefaultLocaleSidKey, value, "DefaultLocaleSidKey"); }
        }
        private PickOrganizationLanguageLocaleKey __LanguageLocaleKey;
        [EntityField(false)]
        public PickOrganizationLanguageLocaleKey LanguageLocaleKey
        {
            get { return __LanguageLocaleKey; }
            set { SetField(ref __LanguageLocaleKey, value, "LanguageLocaleKey"); }
        }
        private System.Boolean __ReceivesInfoEmails;
        [EntityField(false)]
        public System.Boolean ReceivesInfoEmails
        {
            get { return __ReceivesInfoEmails; }
            set { SetField(ref __ReceivesInfoEmails, value, "ReceivesInfoEmails"); }
        }
        private System.Boolean __ReceivesAdminInfoEmails;
        [EntityField(false)]
        public System.Boolean ReceivesAdminInfoEmails
        {
            get { return __ReceivesAdminInfoEmails; }
            set { SetField(ref __ReceivesAdminInfoEmails, value, "ReceivesAdminInfoEmails"); }
        }
        private System.Boolean __PreferencesRequireOpportunityProducts;
        [EntityField(false)]
        public System.Boolean PreferencesRequireOpportunityProducts
        {
            get { return __PreferencesRequireOpportunityProducts; }
            set { SetField(ref __PreferencesRequireOpportunityProducts, value, "PreferencesRequireOpportunityProducts"); }
        }
        private System.Boolean __PreferencesTransactionSecurityPolicy;
        [EntityField(false)]
        public System.Boolean PreferencesTransactionSecurityPolicy
        {
            get { return __PreferencesTransactionSecurityPolicy; }
            set { SetField(ref __PreferencesTransactionSecurityPolicy, value, "PreferencesTransactionSecurityPolicy"); }
        }
        private System.Boolean __PreferencesTerminateOldestSession;
        [EntityField(false)]
        public System.Boolean PreferencesTerminateOldestSession
        {
            get { return __PreferencesTerminateOldestSession; }
            set { SetField(ref __PreferencesTerminateOldestSession, value, "PreferencesTerminateOldestSession"); }
        }
        private System.Int32? __FiscalYearStartMonth;
        [EntityField(true)]
        public System.Int32? FiscalYearStartMonth
        {
            get { return __FiscalYearStartMonth; }
            set { SetField(ref __FiscalYearStartMonth, value, "FiscalYearStartMonth"); }
        }
        private System.Boolean __UsesStartDateAsFiscalYearName;
        [EntityField(false)]
        public System.Boolean UsesStartDateAsFiscalYearName
        {
            get { return __UsesStartDateAsFiscalYearName; }
            set { SetField(ref __UsesStartDateAsFiscalYearName, value, "UsesStartDateAsFiscalYearName"); }
        }
        private PickOrganizationDefaultAccountAccess __DefaultAccountAccess;
        [EntityField(true)]
        public PickOrganizationDefaultAccountAccess DefaultAccountAccess
        {
            get { return __DefaultAccountAccess; }
            set { SetField(ref __DefaultAccountAccess, value, "DefaultAccountAccess"); }
        }
        private PickOrganizationDefaultContactAccess __DefaultContactAccess;
        [EntityField(true)]
        public PickOrganizationDefaultContactAccess DefaultContactAccess
        {
            get { return __DefaultContactAccess; }
            set { SetField(ref __DefaultContactAccess, value, "DefaultContactAccess"); }
        }
        private PickOrganizationDefaultOpportunityAccess __DefaultOpportunityAccess;
        [EntityField(true)]
        public PickOrganizationDefaultOpportunityAccess DefaultOpportunityAccess
        {
            get { return __DefaultOpportunityAccess; }
            set { SetField(ref __DefaultOpportunityAccess, value, "DefaultOpportunityAccess"); }
        }
        private PickOrganizationDefaultLeadAccess __DefaultLeadAccess;
        [EntityField(true)]
        public PickOrganizationDefaultLeadAccess DefaultLeadAccess
        {
            get { return __DefaultLeadAccess; }
            set { SetField(ref __DefaultLeadAccess, value, "DefaultLeadAccess"); }
        }
        private PickOrganizationDefaultCaseAccess __DefaultCaseAccess;
        [EntityField(true)]
        public PickOrganizationDefaultCaseAccess DefaultCaseAccess
        {
            get { return __DefaultCaseAccess; }
            set { SetField(ref __DefaultCaseAccess, value, "DefaultCaseAccess"); }
        }
        private PickOrganizationDefaultCalendarAccess __DefaultCalendarAccess;
        [EntityField(true)]
        public PickOrganizationDefaultCalendarAccess DefaultCalendarAccess
        {
            get { return __DefaultCalendarAccess; }
            set { SetField(ref __DefaultCalendarAccess, value, "DefaultCalendarAccess"); }
        }
        private PickOrganizationDefaultPricebookAccess __DefaultPricebookAccess;
        [EntityField(true)]
        public PickOrganizationDefaultPricebookAccess DefaultPricebookAccess
        {
            get { return __DefaultPricebookAccess; }
            set { SetField(ref __DefaultPricebookAccess, value, "DefaultPricebookAccess"); }
        }
        private PickOrganizationDefaultCampaignAccess __DefaultCampaignAccess;
        [EntityField(true)]
        public PickOrganizationDefaultCampaignAccess DefaultCampaignAccess
        {
            get { return __DefaultCampaignAccess; }
            set { SetField(ref __DefaultCampaignAccess, value, "DefaultCampaignAccess"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ComplianceBccEmail;
        [EntityField(true)]
        public System.String ComplianceBccEmail
        {
            get { return __ComplianceBccEmail; }
            set { SetField(ref __ComplianceBccEmail, value, "ComplianceBccEmail"); }
        }
        private PickOrganizationUiSkin __UiSkin;
        [EntityField(true)]
        public PickOrganizationUiSkin UiSkin
        {
            get { return __UiSkin; }
            set { SetField(ref __UiSkin, value, "UiSkin"); }
        }
        private System.String __SignupCountryIsoCode;
        [EntityField(true)]
        public System.String SignupCountryIsoCode
        {
            get { return __SignupCountryIsoCode; }
            set { SetField(ref __SignupCountryIsoCode, value, "SignupCountryIsoCode"); }
        }
        private System.DateTime? __TrialExpirationDate;
        [EntityField(true)]
        public System.DateTime? TrialExpirationDate
        {
            get { return __TrialExpirationDate; }
            set { SetField(ref __TrialExpirationDate, value, "TrialExpirationDate"); }
        }
        private PickOrganizationOrganizationType __OrganizationType;
        [EntityField(true)]
        public PickOrganizationOrganizationType OrganizationType
        {
            get { return __OrganizationType; }
            set { SetField(ref __OrganizationType, value, "OrganizationType"); }
        }
        private System.String __WebToCaseDefaultOrigin;
        [EntityField(true)]
        public System.String WebToCaseDefaultOrigin
        {
            get { return __WebToCaseDefaultOrigin; }
            set { SetField(ref __WebToCaseDefaultOrigin, value, "WebToCaseDefaultOrigin"); }
        }
        private System.Int32? __MonthlyPageViewsUsed;
        [EntityField(true)]
        public System.Int32? MonthlyPageViewsUsed
        {
            get { return __MonthlyPageViewsUsed; }
            set { SetField(ref __MonthlyPageViewsUsed, value, "MonthlyPageViewsUsed"); }
        }
        private System.Int32? __MonthlyPageViewsEntitlement;
        [EntityField(true)]
        public System.Int32? MonthlyPageViewsEntitlement
        {
            get { return __MonthlyPageViewsEntitlement; }
            set { SetField(ref __MonthlyPageViewsEntitlement, value, "MonthlyPageViewsEntitlement"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Organization,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Organization,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Organization,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Organization,CustomBrand> CustomBrands
        {
            get;set;
        }
    }
    [EntityName("OwnedContentDocument")]
    public class OwnedContentDocument : ISalesforceEntity
    {
    [JsonConstructor]
        private OwnedContentDocument(string hack)
        {
            trackPropertyUpdates = false;
        }

        public OwnedContentDocument()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __ContentDocumentId;
        [EntityField(true)]
        public System.String ContentDocumentId
        {
            get { return __ContentDocumentId; }
            set { SetField(ref __ContentDocumentId, value, "ContentDocumentId"); }
        }
        private System.String __Title;
        [EntityField(false)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __FileType;
        [EntityField(true)]
        public System.String FileType
        {
            get { return __FileType; }
            set { SetField(ref __FileType, value, "FileType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
    }
    [EntityName("Partner")]
    public class Partner : ISalesforceEntity
    {
    [JsonConstructor]
        private Partner(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Partner()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OpportunityId;
        [EntityField(true)]
        public System.String OpportunityId
        {
            get { return __OpportunityId; }
            set { SetField(ref __OpportunityId, value, "OpportunityId"); }
        }
        private System.String __AccountFromId;
        [EntityField(true)]
        public System.String AccountFromId
        {
            get { return __AccountFromId; }
            set { SetField(ref __AccountFromId, value, "AccountFromId"); }
        }
        private System.String __AccountToId;
        [EntityField(false)]
        public System.String AccountToId
        {
            get { return __AccountToId; }
            set { SetField(ref __AccountToId, value, "AccountToId"); }
        }
        private PickPartnerRole __Role;
        [EntityField(true)]
        public PickPartnerRole Role
        {
            get { return __Role; }
            set { SetField(ref __Role, value, "Role"); }
        }
        private System.Boolean __IsPrimary;
        [EntityField(false)]
        public System.Boolean IsPrimary
        {
            get { return __IsPrimary; }
            set { SetField(ref __IsPrimary, value, "IsPrimary"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ReversePartnerId;
        [EntityField(true)]
        public System.String ReversePartnerId
        {
            get { return __ReversePartnerId; }
            set { SetField(ref __ReversePartnerId, value, "ReversePartnerId"); }
        }
    }
    [EntityName("PartnerRole")]
    public class PartnerRole : ISalesforceEntity
    {
    [JsonConstructor]
        private PartnerRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PartnerRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private PickPartnerRoleReverseRole __ReverseRole;
        [EntityField(true)]
        public PickPartnerRoleReverseRole ReverseRole
        {
            get { return __ReverseRole; }
            set { SetField(ref __ReverseRole, value, "ReverseRole"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Period")]
    public class Period : ISalesforceEntity
    {
    [JsonConstructor]
        private Period(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Period()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __FiscalYearSettingsId;
        [EntityField(true)]
        public System.String FiscalYearSettingsId
        {
            get { return __FiscalYearSettingsId; }
            set { SetField(ref __FiscalYearSettingsId, value, "FiscalYearSettingsId"); }
        }
        private PickPeriodType __Type;
        [EntityField(true)]
        public PickPeriodType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.DateTime __StartDate;
        [EntityField(false)]
        public System.DateTime StartDate
        {
            get { return __StartDate; }
            set { SetField(ref __StartDate, value, "StartDate"); }
        }
        private System.DateTime __EndDate;
        [EntityField(false)]
        public System.DateTime EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsForecastPeriod;
        [EntityField(false)]
        public System.Boolean IsForecastPeriod
        {
            get { return __IsForecastPeriod; }
            set { SetField(ref __IsForecastPeriod, value, "IsForecastPeriod"); }
        }
        private PickPeriodQuarterLabel __QuarterLabel;
        [EntityField(true)]
        public PickPeriodQuarterLabel QuarterLabel
        {
            get { return __QuarterLabel; }
            set { SetField(ref __QuarterLabel, value, "QuarterLabel"); }
        }
        private PickPeriodPeriodLabel __PeriodLabel;
        [EntityField(true)]
        public PickPeriodPeriodLabel PeriodLabel
        {
            get { return __PeriodLabel; }
            set { SetField(ref __PeriodLabel, value, "PeriodLabel"); }
        }
        private System.Int32? __Number;
        [EntityField(true)]
        public System.Int32? Number
        {
            get { return __Number; }
            set { SetField(ref __Number, value, "Number"); }
        }
    }
    [EntityName("PermissionSet")]
    public class PermissionSet : ISalesforceEntity
    {
    [JsonConstructor]
        private PermissionSet(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PermissionSet()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Label;
        [EntityField(false)]
        public System.String Label
        {
            get { return __Label; }
            set { SetField(ref __Label, value, "Label"); }
        }
        private System.String __UserLicenseId;
        [EntityField(true)]
        public System.String UserLicenseId
        {
            get { return __UserLicenseId; }
            set { SetField(ref __UserLicenseId, value, "UserLicenseId"); }
        }
        private System.String __ProfileId;
        [EntityField(true)]
        public System.String ProfileId
        {
            get { return __ProfileId; }
            set { SetField(ref __ProfileId, value, "ProfileId"); }
        }
        private System.Boolean __IsOwnedByProfile;
        [EntityField(false)]
        public System.Boolean IsOwnedByProfile
        {
            get { return __IsOwnedByProfile; }
            set { SetField(ref __IsOwnedByProfile, value, "IsOwnedByProfile"); }
        }
        private System.Boolean __PermissionsEmailSingle;
        [EntityField(false)]
        public System.Boolean PermissionsEmailSingle
        {
            get { return __PermissionsEmailSingle; }
            set { SetField(ref __PermissionsEmailSingle, value, "PermissionsEmailSingle"); }
        }
        private System.Boolean __PermissionsEmailMass;
        [EntityField(false)]
        public System.Boolean PermissionsEmailMass
        {
            get { return __PermissionsEmailMass; }
            set { SetField(ref __PermissionsEmailMass, value, "PermissionsEmailMass"); }
        }
        private System.Boolean __PermissionsEditTask;
        [EntityField(false)]
        public System.Boolean PermissionsEditTask
        {
            get { return __PermissionsEditTask; }
            set { SetField(ref __PermissionsEditTask, value, "PermissionsEditTask"); }
        }
        private System.Boolean __PermissionsEditEvent;
        [EntityField(false)]
        public System.Boolean PermissionsEditEvent
        {
            get { return __PermissionsEditEvent; }
            set { SetField(ref __PermissionsEditEvent, value, "PermissionsEditEvent"); }
        }
        private System.Boolean __PermissionsExportReport;
        [EntityField(false)]
        public System.Boolean PermissionsExportReport
        {
            get { return __PermissionsExportReport; }
            set { SetField(ref __PermissionsExportReport, value, "PermissionsExportReport"); }
        }
        private System.Boolean __PermissionsImportPersonal;
        [EntityField(false)]
        public System.Boolean PermissionsImportPersonal
        {
            get { return __PermissionsImportPersonal; }
            set { SetField(ref __PermissionsImportPersonal, value, "PermissionsImportPersonal"); }
        }
        private System.Boolean __PermissionsManageUsers;
        [EntityField(false)]
        public System.Boolean PermissionsManageUsers
        {
            get { return __PermissionsManageUsers; }
            set { SetField(ref __PermissionsManageUsers, value, "PermissionsManageUsers"); }
        }
        private System.Boolean __PermissionsEditPublicTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditPublicTemplates
        {
            get { return __PermissionsEditPublicTemplates; }
            set { SetField(ref __PermissionsEditPublicTemplates, value, "PermissionsEditPublicTemplates"); }
        }
        private System.Boolean __PermissionsModifyAllData;
        [EntityField(false)]
        public System.Boolean PermissionsModifyAllData
        {
            get { return __PermissionsModifyAllData; }
            set { SetField(ref __PermissionsModifyAllData, value, "PermissionsModifyAllData"); }
        }
        private System.Boolean __PermissionsManageCases;
        [EntityField(false)]
        public System.Boolean PermissionsManageCases
        {
            get { return __PermissionsManageCases; }
            set { SetField(ref __PermissionsManageCases, value, "PermissionsManageCases"); }
        }
        private System.Boolean __PermissionsMassInlineEdit;
        [EntityField(false)]
        public System.Boolean PermissionsMassInlineEdit
        {
            get { return __PermissionsMassInlineEdit; }
            set { SetField(ref __PermissionsMassInlineEdit, value, "PermissionsMassInlineEdit"); }
        }
        private System.Boolean __PermissionsEditKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsEditKnowledge
        {
            get { return __PermissionsEditKnowledge; }
            set { SetField(ref __PermissionsEditKnowledge, value, "PermissionsEditKnowledge"); }
        }
        private System.Boolean __PermissionsManageKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsManageKnowledge
        {
            get { return __PermissionsManageKnowledge; }
            set { SetField(ref __PermissionsManageKnowledge, value, "PermissionsManageKnowledge"); }
        }
        private System.Boolean __PermissionsManageSolutions;
        [EntityField(false)]
        public System.Boolean PermissionsManageSolutions
        {
            get { return __PermissionsManageSolutions; }
            set { SetField(ref __PermissionsManageSolutions, value, "PermissionsManageSolutions"); }
        }
        private System.Boolean __PermissionsCustomizeApplication;
        [EntityField(false)]
        public System.Boolean PermissionsCustomizeApplication
        {
            get { return __PermissionsCustomizeApplication; }
            set { SetField(ref __PermissionsCustomizeApplication, value, "PermissionsCustomizeApplication"); }
        }
        private System.Boolean __PermissionsEditReadonlyFields;
        [EntityField(false)]
        public System.Boolean PermissionsEditReadonlyFields
        {
            get { return __PermissionsEditReadonlyFields; }
            set { SetField(ref __PermissionsEditReadonlyFields, value, "PermissionsEditReadonlyFields"); }
        }
        private System.Boolean __PermissionsRunReports;
        [EntityField(false)]
        public System.Boolean PermissionsRunReports
        {
            get { return __PermissionsRunReports; }
            set { SetField(ref __PermissionsRunReports, value, "PermissionsRunReports"); }
        }
        private System.Boolean __PermissionsViewSetup;
        [EntityField(false)]
        public System.Boolean PermissionsViewSetup
        {
            get { return __PermissionsViewSetup; }
            set { SetField(ref __PermissionsViewSetup, value, "PermissionsViewSetup"); }
        }
        private System.Boolean __PermissionsTransferAnyEntity;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyEntity
        {
            get { return __PermissionsTransferAnyEntity; }
            set { SetField(ref __PermissionsTransferAnyEntity, value, "PermissionsTransferAnyEntity"); }
        }
        private System.Boolean __PermissionsNewReportBuilder;
        [EntityField(false)]
        public System.Boolean PermissionsNewReportBuilder
        {
            get { return __PermissionsNewReportBuilder; }
            set { SetField(ref __PermissionsNewReportBuilder, value, "PermissionsNewReportBuilder"); }
        }
        private System.Boolean __PermissionsActivateContract;
        [EntityField(false)]
        public System.Boolean PermissionsActivateContract
        {
            get { return __PermissionsActivateContract; }
            set { SetField(ref __PermissionsActivateContract, value, "PermissionsActivateContract"); }
        }
        private System.Boolean __PermissionsActivateOrder;
        [EntityField(false)]
        public System.Boolean PermissionsActivateOrder
        {
            get { return __PermissionsActivateOrder; }
            set { SetField(ref __PermissionsActivateOrder, value, "PermissionsActivateOrder"); }
        }
        private System.Boolean __PermissionsImportLeads;
        [EntityField(false)]
        public System.Boolean PermissionsImportLeads
        {
            get { return __PermissionsImportLeads; }
            set { SetField(ref __PermissionsImportLeads, value, "PermissionsImportLeads"); }
        }
        private System.Boolean __PermissionsManageLeads;
        [EntityField(false)]
        public System.Boolean PermissionsManageLeads
        {
            get { return __PermissionsManageLeads; }
            set { SetField(ref __PermissionsManageLeads, value, "PermissionsManageLeads"); }
        }
        private System.Boolean __PermissionsTransferAnyLead;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyLead
        {
            get { return __PermissionsTransferAnyLead; }
            set { SetField(ref __PermissionsTransferAnyLead, value, "PermissionsTransferAnyLead"); }
        }
        private System.Boolean __PermissionsViewAllData;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllData
        {
            get { return __PermissionsViewAllData; }
            set { SetField(ref __PermissionsViewAllData, value, "PermissionsViewAllData"); }
        }
        private System.Boolean __PermissionsEditPublicDocuments;
        [EntityField(false)]
        public System.Boolean PermissionsEditPublicDocuments
        {
            get { return __PermissionsEditPublicDocuments; }
            set { SetField(ref __PermissionsEditPublicDocuments, value, "PermissionsEditPublicDocuments"); }
        }
        private System.Boolean __PermissionsViewEncryptedData;
        [EntityField(false)]
        public System.Boolean PermissionsViewEncryptedData
        {
            get { return __PermissionsViewEncryptedData; }
            set { SetField(ref __PermissionsViewEncryptedData, value, "PermissionsViewEncryptedData"); }
        }
        private System.Boolean __PermissionsEditBrandTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditBrandTemplates
        {
            get { return __PermissionsEditBrandTemplates; }
            set { SetField(ref __PermissionsEditBrandTemplates, value, "PermissionsEditBrandTemplates"); }
        }
        private System.Boolean __PermissionsEditHtmlTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditHtmlTemplates
        {
            get { return __PermissionsEditHtmlTemplates; }
            set { SetField(ref __PermissionsEditHtmlTemplates, value, "PermissionsEditHtmlTemplates"); }
        }
        private System.Boolean __PermissionsChatterInternalUser;
        [EntityField(false)]
        public System.Boolean PermissionsChatterInternalUser
        {
            get { return __PermissionsChatterInternalUser; }
            set { SetField(ref __PermissionsChatterInternalUser, value, "PermissionsChatterInternalUser"); }
        }
        private System.Boolean __PermissionsDeleteActivatedContract;
        [EntityField(false)]
        public System.Boolean PermissionsDeleteActivatedContract
        {
            get { return __PermissionsDeleteActivatedContract; }
            set { SetField(ref __PermissionsDeleteActivatedContract, value, "PermissionsDeleteActivatedContract"); }
        }
        private System.Boolean __PermissionsChatterInviteExternalUsers;
        [EntityField(false)]
        public System.Boolean PermissionsChatterInviteExternalUsers
        {
            get { return __PermissionsChatterInviteExternalUsers; }
            set { SetField(ref __PermissionsChatterInviteExternalUsers, value, "PermissionsChatterInviteExternalUsers"); }
        }
        private System.Boolean __PermissionsSendSitRequests;
        [EntityField(false)]
        public System.Boolean PermissionsSendSitRequests
        {
            get { return __PermissionsSendSitRequests; }
            set { SetField(ref __PermissionsSendSitRequests, value, "PermissionsSendSitRequests"); }
        }
        private System.Boolean __PermissionsManageRemoteAccess;
        [EntityField(false)]
        public System.Boolean PermissionsManageRemoteAccess
        {
            get { return __PermissionsManageRemoteAccess; }
            set { SetField(ref __PermissionsManageRemoteAccess, value, "PermissionsManageRemoteAccess"); }
        }
        private System.Boolean __PermissionsCanUseNewDashboardBuilder;
        [EntityField(false)]
        public System.Boolean PermissionsCanUseNewDashboardBuilder
        {
            get { return __PermissionsCanUseNewDashboardBuilder; }
            set { SetField(ref __PermissionsCanUseNewDashboardBuilder, value, "PermissionsCanUseNewDashboardBuilder"); }
        }
        private System.Boolean __PermissionsManageCategories;
        [EntityField(false)]
        public System.Boolean PermissionsManageCategories
        {
            get { return __PermissionsManageCategories; }
            set { SetField(ref __PermissionsManageCategories, value, "PermissionsManageCategories"); }
        }
        private System.Boolean __PermissionsConvertLeads;
        [EntityField(false)]
        public System.Boolean PermissionsConvertLeads
        {
            get { return __PermissionsConvertLeads; }
            set { SetField(ref __PermissionsConvertLeads, value, "PermissionsConvertLeads"); }
        }
        private System.Boolean __PermissionsPasswordNeverExpires;
        [EntityField(false)]
        public System.Boolean PermissionsPasswordNeverExpires
        {
            get { return __PermissionsPasswordNeverExpires; }
            set { SetField(ref __PermissionsPasswordNeverExpires, value, "PermissionsPasswordNeverExpires"); }
        }
        private System.Boolean __PermissionsUseTeamReassignWizards;
        [EntityField(false)]
        public System.Boolean PermissionsUseTeamReassignWizards
        {
            get { return __PermissionsUseTeamReassignWizards; }
            set { SetField(ref __PermissionsUseTeamReassignWizards, value, "PermissionsUseTeamReassignWizards"); }
        }
        private System.Boolean __PermissionsEditActivatedOrders;
        [EntityField(false)]
        public System.Boolean PermissionsEditActivatedOrders
        {
            get { return __PermissionsEditActivatedOrders; }
            set { SetField(ref __PermissionsEditActivatedOrders, value, "PermissionsEditActivatedOrders"); }
        }
        private System.Boolean __PermissionsInstallPackaging;
        [EntityField(false)]
        public System.Boolean PermissionsInstallPackaging
        {
            get { return __PermissionsInstallPackaging; }
            set { SetField(ref __PermissionsInstallPackaging, value, "PermissionsInstallPackaging"); }
        }
        private System.Boolean __PermissionsPublishPackaging;
        [EntityField(false)]
        public System.Boolean PermissionsPublishPackaging
        {
            get { return __PermissionsPublishPackaging; }
            set { SetField(ref __PermissionsPublishPackaging, value, "PermissionsPublishPackaging"); }
        }
        private System.Boolean __PermissionsChatterOwnGroups;
        [EntityField(false)]
        public System.Boolean PermissionsChatterOwnGroups
        {
            get { return __PermissionsChatterOwnGroups; }
            set { SetField(ref __PermissionsChatterOwnGroups, value, "PermissionsChatterOwnGroups"); }
        }
        private System.Boolean __PermissionsEditOppLineItemUnitPrice;
        [EntityField(false)]
        public System.Boolean PermissionsEditOppLineItemUnitPrice
        {
            get { return __PermissionsEditOppLineItemUnitPrice; }
            set { SetField(ref __PermissionsEditOppLineItemUnitPrice, value, "PermissionsEditOppLineItemUnitPrice"); }
        }
        private System.Boolean __PermissionsCreatePackaging;
        [EntityField(false)]
        public System.Boolean PermissionsCreatePackaging
        {
            get { return __PermissionsCreatePackaging; }
            set { SetField(ref __PermissionsCreatePackaging, value, "PermissionsCreatePackaging"); }
        }
        private System.Boolean __PermissionsBulkApiHardDelete;
        [EntityField(false)]
        public System.Boolean PermissionsBulkApiHardDelete
        {
            get { return __PermissionsBulkApiHardDelete; }
            set { SetField(ref __PermissionsBulkApiHardDelete, value, "PermissionsBulkApiHardDelete"); }
        }
        private System.Boolean __PermissionsSolutionImport;
        [EntityField(false)]
        public System.Boolean PermissionsSolutionImport
        {
            get { return __PermissionsSolutionImport; }
            set { SetField(ref __PermissionsSolutionImport, value, "PermissionsSolutionImport"); }
        }
        private System.Boolean __PermissionsManageCallCenters;
        [EntityField(false)]
        public System.Boolean PermissionsManageCallCenters
        {
            get { return __PermissionsManageCallCenters; }
            set { SetField(ref __PermissionsManageCallCenters, value, "PermissionsManageCallCenters"); }
        }
        private System.Boolean __PermissionsManageSynonyms;
        [EntityField(false)]
        public System.Boolean PermissionsManageSynonyms
        {
            get { return __PermissionsManageSynonyms; }
            set { SetField(ref __PermissionsManageSynonyms, value, "PermissionsManageSynonyms"); }
        }
        private System.Boolean __PermissionsViewContent;
        [EntityField(false)]
        public System.Boolean PermissionsViewContent
        {
            get { return __PermissionsViewContent; }
            set { SetField(ref __PermissionsViewContent, value, "PermissionsViewContent"); }
        }
        private System.Boolean __PermissionsManageEmailClientConfig;
        [EntityField(false)]
        public System.Boolean PermissionsManageEmailClientConfig
        {
            get { return __PermissionsManageEmailClientConfig; }
            set { SetField(ref __PermissionsManageEmailClientConfig, value, "PermissionsManageEmailClientConfig"); }
        }
        private System.Boolean __PermissionsEnableNotifications;
        [EntityField(false)]
        public System.Boolean PermissionsEnableNotifications
        {
            get { return __PermissionsEnableNotifications; }
            set { SetField(ref __PermissionsEnableNotifications, value, "PermissionsEnableNotifications"); }
        }
        private System.Boolean __PermissionsManageDataIntegrations;
        [EntityField(false)]
        public System.Boolean PermissionsManageDataIntegrations
        {
            get { return __PermissionsManageDataIntegrations; }
            set { SetField(ref __PermissionsManageDataIntegrations, value, "PermissionsManageDataIntegrations"); }
        }
        private System.Boolean __PermissionsDistributeFromPersWksp;
        [EntityField(false)]
        public System.Boolean PermissionsDistributeFromPersWksp
        {
            get { return __PermissionsDistributeFromPersWksp; }
            set { SetField(ref __PermissionsDistributeFromPersWksp, value, "PermissionsDistributeFromPersWksp"); }
        }
        private System.Boolean __PermissionsViewDataCategories;
        [EntityField(false)]
        public System.Boolean PermissionsViewDataCategories
        {
            get { return __PermissionsViewDataCategories; }
            set { SetField(ref __PermissionsViewDataCategories, value, "PermissionsViewDataCategories"); }
        }
        private System.Boolean __PermissionsManageDataCategories;
        [EntityField(false)]
        public System.Boolean PermissionsManageDataCategories
        {
            get { return __PermissionsManageDataCategories; }
            set { SetField(ref __PermissionsManageDataCategories, value, "PermissionsManageDataCategories"); }
        }
        private System.Boolean __PermissionsAuthorApex;
        [EntityField(false)]
        public System.Boolean PermissionsAuthorApex
        {
            get { return __PermissionsAuthorApex; }
            set { SetField(ref __PermissionsAuthorApex, value, "PermissionsAuthorApex"); }
        }
        private System.Boolean __PermissionsManageMobile;
        [EntityField(false)]
        public System.Boolean PermissionsManageMobile
        {
            get { return __PermissionsManageMobile; }
            set { SetField(ref __PermissionsManageMobile, value, "PermissionsManageMobile"); }
        }
        private System.Boolean __PermissionsApiEnabled;
        [EntityField(false)]
        public System.Boolean PermissionsApiEnabled
        {
            get { return __PermissionsApiEnabled; }
            set { SetField(ref __PermissionsApiEnabled, value, "PermissionsApiEnabled"); }
        }
        private System.Boolean __PermissionsManageCustomReportTypes;
        [EntityField(false)]
        public System.Boolean PermissionsManageCustomReportTypes
        {
            get { return __PermissionsManageCustomReportTypes; }
            set { SetField(ref __PermissionsManageCustomReportTypes, value, "PermissionsManageCustomReportTypes"); }
        }
        private System.Boolean __PermissionsEditCaseComments;
        [EntityField(false)]
        public System.Boolean PermissionsEditCaseComments
        {
            get { return __PermissionsEditCaseComments; }
            set { SetField(ref __PermissionsEditCaseComments, value, "PermissionsEditCaseComments"); }
        }
        private System.Boolean __PermissionsTransferAnyCase;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyCase
        {
            get { return __PermissionsTransferAnyCase; }
            set { SetField(ref __PermissionsTransferAnyCase, value, "PermissionsTransferAnyCase"); }
        }
        private System.Boolean __PermissionsContentAdministrator;
        [EntityField(false)]
        public System.Boolean PermissionsContentAdministrator
        {
            get { return __PermissionsContentAdministrator; }
            set { SetField(ref __PermissionsContentAdministrator, value, "PermissionsContentAdministrator"); }
        }
        private System.Boolean __PermissionsCreateWorkspaces;
        [EntityField(false)]
        public System.Boolean PermissionsCreateWorkspaces
        {
            get { return __PermissionsCreateWorkspaces; }
            set { SetField(ref __PermissionsCreateWorkspaces, value, "PermissionsCreateWorkspaces"); }
        }
        private System.Boolean __PermissionsManageContentPermissions;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentPermissions
        {
            get { return __PermissionsManageContentPermissions; }
            set { SetField(ref __PermissionsManageContentPermissions, value, "PermissionsManageContentPermissions"); }
        }
        private System.Boolean __PermissionsManageContentProperties;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentProperties
        {
            get { return __PermissionsManageContentProperties; }
            set { SetField(ref __PermissionsManageContentProperties, value, "PermissionsManageContentProperties"); }
        }
        private System.Boolean __PermissionsManageContentTypes;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentTypes
        {
            get { return __PermissionsManageContentTypes; }
            set { SetField(ref __PermissionsManageContentTypes, value, "PermissionsManageContentTypes"); }
        }
        private System.Boolean __PermissionsManageExchangeConfig;
        [EntityField(false)]
        public System.Boolean PermissionsManageExchangeConfig
        {
            get { return __PermissionsManageExchangeConfig; }
            set { SetField(ref __PermissionsManageExchangeConfig, value, "PermissionsManageExchangeConfig"); }
        }
        private System.Boolean __PermissionsManageAnalyticSnapshots;
        [EntityField(false)]
        public System.Boolean PermissionsManageAnalyticSnapshots
        {
            get { return __PermissionsManageAnalyticSnapshots; }
            set { SetField(ref __PermissionsManageAnalyticSnapshots, value, "PermissionsManageAnalyticSnapshots"); }
        }
        private System.Boolean __PermissionsScheduleReports;
        [EntityField(false)]
        public System.Boolean PermissionsScheduleReports
        {
            get { return __PermissionsScheduleReports; }
            set { SetField(ref __PermissionsScheduleReports, value, "PermissionsScheduleReports"); }
        }
        private System.Boolean __PermissionsManageBusinessHourHolidays;
        [EntityField(false)]
        public System.Boolean PermissionsManageBusinessHourHolidays
        {
            get { return __PermissionsManageBusinessHourHolidays; }
            set { SetField(ref __PermissionsManageBusinessHourHolidays, value, "PermissionsManageBusinessHourHolidays"); }
        }
        private System.Boolean __PermissionsManageDynamicDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsManageDynamicDashboards
        {
            get { return __PermissionsManageDynamicDashboards; }
            set { SetField(ref __PermissionsManageDynamicDashboards, value, "PermissionsManageDynamicDashboards"); }
        }
        private System.Boolean __PermissionsCustomSidebarOnAllPages;
        [EntityField(false)]
        public System.Boolean PermissionsCustomSidebarOnAllPages
        {
            get { return __PermissionsCustomSidebarOnAllPages; }
            set { SetField(ref __PermissionsCustomSidebarOnAllPages, value, "PermissionsCustomSidebarOnAllPages"); }
        }
        private System.Boolean __PermissionsManageInteraction;
        [EntityField(false)]
        public System.Boolean PermissionsManageInteraction
        {
            get { return __PermissionsManageInteraction; }
            set { SetField(ref __PermissionsManageInteraction, value, "PermissionsManageInteraction"); }
        }
        private System.Boolean __PermissionsViewMyTeamsDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsViewMyTeamsDashboards
        {
            get { return __PermissionsViewMyTeamsDashboards; }
            set { SetField(ref __PermissionsViewMyTeamsDashboards, value, "PermissionsViewMyTeamsDashboards"); }
        }
        private System.Boolean __PermissionsModerateChatter;
        [EntityField(false)]
        public System.Boolean PermissionsModerateChatter
        {
            get { return __PermissionsModerateChatter; }
            set { SetField(ref __PermissionsModerateChatter, value, "PermissionsModerateChatter"); }
        }
        private System.Boolean __PermissionsResetPasswords;
        [EntityField(false)]
        public System.Boolean PermissionsResetPasswords
        {
            get { return __PermissionsResetPasswords; }
            set { SetField(ref __PermissionsResetPasswords, value, "PermissionsResetPasswords"); }
        }
        private System.Boolean __PermissionsFlowUFLRequired;
        [EntityField(false)]
        public System.Boolean PermissionsFlowUFLRequired
        {
            get { return __PermissionsFlowUFLRequired; }
            set { SetField(ref __PermissionsFlowUFLRequired, value, "PermissionsFlowUFLRequired"); }
        }
        private System.Boolean __PermissionsCanInsertFeedSystemFields;
        [EntityField(false)]
        public System.Boolean PermissionsCanInsertFeedSystemFields
        {
            get { return __PermissionsCanInsertFeedSystemFields; }
            set { SetField(ref __PermissionsCanInsertFeedSystemFields, value, "PermissionsCanInsertFeedSystemFields"); }
        }
        private System.Boolean __PermissionsManageKnowledgeImportExport;
        [EntityField(false)]
        public System.Boolean PermissionsManageKnowledgeImportExport
        {
            get { return __PermissionsManageKnowledgeImportExport; }
            set { SetField(ref __PermissionsManageKnowledgeImportExport, value, "PermissionsManageKnowledgeImportExport"); }
        }
        private System.Boolean __PermissionsEmailTemplateManagement;
        [EntityField(false)]
        public System.Boolean PermissionsEmailTemplateManagement
        {
            get { return __PermissionsEmailTemplateManagement; }
            set { SetField(ref __PermissionsEmailTemplateManagement, value, "PermissionsEmailTemplateManagement"); }
        }
        private System.Boolean __PermissionsEmailAdministration;
        [EntityField(false)]
        public System.Boolean PermissionsEmailAdministration
        {
            get { return __PermissionsEmailAdministration; }
            set { SetField(ref __PermissionsEmailAdministration, value, "PermissionsEmailAdministration"); }
        }
        private System.Boolean __PermissionsManageChatterMessages;
        [EntityField(false)]
        public System.Boolean PermissionsManageChatterMessages
        {
            get { return __PermissionsManageChatterMessages; }
            set { SetField(ref __PermissionsManageChatterMessages, value, "PermissionsManageChatterMessages"); }
        }
        private System.Boolean __PermissionsAllowEmailIC;
        [EntityField(false)]
        public System.Boolean PermissionsAllowEmailIC
        {
            get { return __PermissionsAllowEmailIC; }
            set { SetField(ref __PermissionsAllowEmailIC, value, "PermissionsAllowEmailIC"); }
        }
        private System.Boolean __PermissionsChatterFileLink;
        [EntityField(false)]
        public System.Boolean PermissionsChatterFileLink
        {
            get { return __PermissionsChatterFileLink; }
            set { SetField(ref __PermissionsChatterFileLink, value, "PermissionsChatterFileLink"); }
        }
        private System.Boolean __PermissionsForceTwoFactor;
        [EntityField(false)]
        public System.Boolean PermissionsForceTwoFactor
        {
            get { return __PermissionsForceTwoFactor; }
            set { SetField(ref __PermissionsForceTwoFactor, value, "PermissionsForceTwoFactor"); }
        }
        private System.Boolean __PermissionsViewEventLogFiles;
        [EntityField(false)]
        public System.Boolean PermissionsViewEventLogFiles
        {
            get { return __PermissionsViewEventLogFiles; }
            set { SetField(ref __PermissionsViewEventLogFiles, value, "PermissionsViewEventLogFiles"); }
        }
        private System.Boolean __PermissionsManageNetworks;
        [EntityField(false)]
        public System.Boolean PermissionsManageNetworks
        {
            get { return __PermissionsManageNetworks; }
            set { SetField(ref __PermissionsManageNetworks, value, "PermissionsManageNetworks"); }
        }
        private System.Boolean __PermissionsManageAuthProviders;
        [EntityField(false)]
        public System.Boolean PermissionsManageAuthProviders
        {
            get { return __PermissionsManageAuthProviders; }
            set { SetField(ref __PermissionsManageAuthProviders, value, "PermissionsManageAuthProviders"); }
        }
        private System.Boolean __PermissionsRunFlow;
        [EntityField(false)]
        public System.Boolean PermissionsRunFlow
        {
            get { return __PermissionsRunFlow; }
            set { SetField(ref __PermissionsRunFlow, value, "PermissionsRunFlow"); }
        }
        private System.Boolean __PermissionsCreateCustomizeDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeDashboards
        {
            get { return __PermissionsCreateCustomizeDashboards; }
            set { SetField(ref __PermissionsCreateCustomizeDashboards, value, "PermissionsCreateCustomizeDashboards"); }
        }
        private System.Boolean __PermissionsCreateDashboardFolders;
        [EntityField(false)]
        public System.Boolean PermissionsCreateDashboardFolders
        {
            get { return __PermissionsCreateDashboardFolders; }
            set { SetField(ref __PermissionsCreateDashboardFolders, value, "PermissionsCreateDashboardFolders"); }
        }
        private System.Boolean __PermissionsViewPublicDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsViewPublicDashboards
        {
            get { return __PermissionsViewPublicDashboards; }
            set { SetField(ref __PermissionsViewPublicDashboards, value, "PermissionsViewPublicDashboards"); }
        }
        private System.Boolean __PermissionsManageDashbdsInPubFolders;
        [EntityField(false)]
        public System.Boolean PermissionsManageDashbdsInPubFolders
        {
            get { return __PermissionsManageDashbdsInPubFolders; }
            set { SetField(ref __PermissionsManageDashbdsInPubFolders, value, "PermissionsManageDashbdsInPubFolders"); }
        }
        private System.Boolean __PermissionsCreateCustomizeReports;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeReports
        {
            get { return __PermissionsCreateCustomizeReports; }
            set { SetField(ref __PermissionsCreateCustomizeReports, value, "PermissionsCreateCustomizeReports"); }
        }
        private System.Boolean __PermissionsCreateReportFolders;
        [EntityField(false)]
        public System.Boolean PermissionsCreateReportFolders
        {
            get { return __PermissionsCreateReportFolders; }
            set { SetField(ref __PermissionsCreateReportFolders, value, "PermissionsCreateReportFolders"); }
        }
        private System.Boolean __PermissionsViewPublicReports;
        [EntityField(false)]
        public System.Boolean PermissionsViewPublicReports
        {
            get { return __PermissionsViewPublicReports; }
            set { SetField(ref __PermissionsViewPublicReports, value, "PermissionsViewPublicReports"); }
        }
        private System.Boolean __PermissionsManageReportsInPubFolders;
        [EntityField(false)]
        public System.Boolean PermissionsManageReportsInPubFolders
        {
            get { return __PermissionsManageReportsInPubFolders; }
            set { SetField(ref __PermissionsManageReportsInPubFolders, value, "PermissionsManageReportsInPubFolders"); }
        }
        private System.Boolean __PermissionsEditMyDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsEditMyDashboards
        {
            get { return __PermissionsEditMyDashboards; }
            set { SetField(ref __PermissionsEditMyDashboards, value, "PermissionsEditMyDashboards"); }
        }
        private System.Boolean __PermissionsEditMyReports;
        [EntityField(false)]
        public System.Boolean PermissionsEditMyReports
        {
            get { return __PermissionsEditMyReports; }
            set { SetField(ref __PermissionsEditMyReports, value, "PermissionsEditMyReports"); }
        }
        private System.Boolean __PermissionsViewAllUsers;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllUsers
        {
            get { return __PermissionsViewAllUsers; }
            set { SetField(ref __PermissionsViewAllUsers, value, "PermissionsViewAllUsers"); }
        }
        private System.Boolean __PermissionsAllowUniversalSearch;
        [EntityField(false)]
        public System.Boolean PermissionsAllowUniversalSearch
        {
            get { return __PermissionsAllowUniversalSearch; }
            set { SetField(ref __PermissionsAllowUniversalSearch, value, "PermissionsAllowUniversalSearch"); }
        }
        private System.Boolean __PermissionsConnectOrgToEnvironmentHub;
        [EntityField(false)]
        public System.Boolean PermissionsConnectOrgToEnvironmentHub
        {
            get { return __PermissionsConnectOrgToEnvironmentHub; }
            set { SetField(ref __PermissionsConnectOrgToEnvironmentHub, value, "PermissionsConnectOrgToEnvironmentHub"); }
        }
        private System.Boolean __PermissionsWorkCalibrationUser;
        [EntityField(false)]
        public System.Boolean PermissionsWorkCalibrationUser
        {
            get { return __PermissionsWorkCalibrationUser; }
            set { SetField(ref __PermissionsWorkCalibrationUser, value, "PermissionsWorkCalibrationUser"); }
        }
        private System.Boolean __PermissionsCreateCustomizeFilters;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeFilters
        {
            get { return __PermissionsCreateCustomizeFilters; }
            set { SetField(ref __PermissionsCreateCustomizeFilters, value, "PermissionsCreateCustomizeFilters"); }
        }
        private System.Boolean __PermissionsWorkDotComUserPerm;
        [EntityField(false)]
        public System.Boolean PermissionsWorkDotComUserPerm
        {
            get { return __PermissionsWorkDotComUserPerm; }
            set { SetField(ref __PermissionsWorkDotComUserPerm, value, "PermissionsWorkDotComUserPerm"); }
        }
        private System.Boolean __PermissionsSalesConsole;
        [EntityField(false)]
        public System.Boolean PermissionsSalesConsole
        {
            get { return __PermissionsSalesConsole; }
            set { SetField(ref __PermissionsSalesConsole, value, "PermissionsSalesConsole"); }
        }
        private System.Boolean __PermissionsTwoFactorApi;
        [EntityField(false)]
        public System.Boolean PermissionsTwoFactorApi
        {
            get { return __PermissionsTwoFactorApi; }
            set { SetField(ref __PermissionsTwoFactorApi, value, "PermissionsTwoFactorApi"); }
        }
        private System.Boolean __PermissionsDeleteTopics;
        [EntityField(false)]
        public System.Boolean PermissionsDeleteTopics
        {
            get { return __PermissionsDeleteTopics; }
            set { SetField(ref __PermissionsDeleteTopics, value, "PermissionsDeleteTopics"); }
        }
        private System.Boolean __PermissionsEditTopics;
        [EntityField(false)]
        public System.Boolean PermissionsEditTopics
        {
            get { return __PermissionsEditTopics; }
            set { SetField(ref __PermissionsEditTopics, value, "PermissionsEditTopics"); }
        }
        private System.Boolean __PermissionsCreateTopics;
        [EntityField(false)]
        public System.Boolean PermissionsCreateTopics
        {
            get { return __PermissionsCreateTopics; }
            set { SetField(ref __PermissionsCreateTopics, value, "PermissionsCreateTopics"); }
        }
        private System.Boolean __PermissionsAssignTopics;
        [EntityField(false)]
        public System.Boolean PermissionsAssignTopics
        {
            get { return __PermissionsAssignTopics; }
            set { SetField(ref __PermissionsAssignTopics, value, "PermissionsAssignTopics"); }
        }
        private System.Boolean __PermissionsIdentityEnabled;
        [EntityField(false)]
        public System.Boolean PermissionsIdentityEnabled
        {
            get { return __PermissionsIdentityEnabled; }
            set { SetField(ref __PermissionsIdentityEnabled, value, "PermissionsIdentityEnabled"); }
        }
        private System.Boolean __PermissionsIdentityConnect;
        [EntityField(false)]
        public System.Boolean PermissionsIdentityConnect
        {
            get { return __PermissionsIdentityConnect; }
            set { SetField(ref __PermissionsIdentityConnect, value, "PermissionsIdentityConnect"); }
        }
        private System.Boolean __PermissionsAllowViewKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsAllowViewKnowledge
        {
            get { return __PermissionsAllowViewKnowledge; }
            set { SetField(ref __PermissionsAllowViewKnowledge, value, "PermissionsAllowViewKnowledge"); }
        }
        private System.Boolean __PermissionsManageSearchPromotionRules;
        [EntityField(false)]
        public System.Boolean PermissionsManageSearchPromotionRules
        {
            get { return __PermissionsManageSearchPromotionRules; }
            set { SetField(ref __PermissionsManageSearchPromotionRules, value, "PermissionsManageSearchPromotionRules"); }
        }
        private System.Boolean __PermissionsCustomMobileAppsAccess;
        [EntityField(false)]
        public System.Boolean PermissionsCustomMobileAppsAccess
        {
            get { return __PermissionsCustomMobileAppsAccess; }
            set { SetField(ref __PermissionsCustomMobileAppsAccess, value, "PermissionsCustomMobileAppsAccess"); }
        }
        private System.Boolean __PermissionsViewHelpLink;
        [EntityField(false)]
        public System.Boolean PermissionsViewHelpLink
        {
            get { return __PermissionsViewHelpLink; }
            set { SetField(ref __PermissionsViewHelpLink, value, "PermissionsViewHelpLink"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<PermissionSet,FieldPermissions> FieldPerms
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<PermissionSet,ObjectPermissions> ObjectPerms
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("PermissionSetId")]
        public RelationShip<PermissionSet,PermissionSetAssignment> Assignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<PermissionSet,SetupEntityAccess> SetupEntityAccessItems
        {
            get;set;
        }
    }
    [EntityName("PermissionSetAssignment")]
    public class PermissionSetAssignment : ISalesforceEntity
    {
    [JsonConstructor]
        private PermissionSetAssignment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PermissionSetAssignment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __PermissionSetId;
        [EntityField(false)]
        public System.String PermissionSetId
        {
            get { return __PermissionSetId; }
            set { SetField(ref __PermissionSetId, value, "PermissionSetId"); }
        }
        private System.String __AssigneeId;
        [EntityField(false)]
        public System.String AssigneeId
        {
            get { return __AssigneeId; }
            set { SetField(ref __AssigneeId, value, "AssigneeId"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("PermissionSetLicense")]
    public class PermissionSetLicense : ISalesforceEntity
    {
    [JsonConstructor]
        private PermissionSetLicense(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PermissionSetLicense()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickPermissionSetLicenseLanguage __Language;
        [EntityField(false)]
        public PickPermissionSetLicenseLanguage Language
        {
            get { return __Language; }
            set { SetField(ref __Language, value, "Language"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __PermissionSetLicenseKey;
        [EntityField(false)]
        public System.String PermissionSetLicenseKey
        {
            get { return __PermissionSetLicenseKey; }
            set { SetField(ref __PermissionSetLicenseKey, value, "PermissionSetLicenseKey"); }
        }
        private System.Int32 __TotalLicenses;
        [EntityField(false)]
        public System.Int32 TotalLicenses
        {
            get { return __TotalLicenses; }
            set { SetField(ref __TotalLicenses, value, "TotalLicenses"); }
        }
        private PickPermissionSetLicenseStatus __Status;
        [EntityField(false)]
        public PickPermissionSetLicenseStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.DateTime? __ExpirationDate;
        [EntityField(true)]
        public System.DateTime? ExpirationDate
        {
            get { return __ExpirationDate; }
            set { SetField(ref __ExpirationDate, value, "ExpirationDate"); }
        }
        private System.Boolean __MaximumPermissionsEmailSingle;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEmailSingle
        {
            get { return __MaximumPermissionsEmailSingle; }
            set { SetField(ref __MaximumPermissionsEmailSingle, value, "MaximumPermissionsEmailSingle"); }
        }
        private System.Boolean __MaximumPermissionsEmailMass;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEmailMass
        {
            get { return __MaximumPermissionsEmailMass; }
            set { SetField(ref __MaximumPermissionsEmailMass, value, "MaximumPermissionsEmailMass"); }
        }
        private System.Boolean __MaximumPermissionsEditTask;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditTask
        {
            get { return __MaximumPermissionsEditTask; }
            set { SetField(ref __MaximumPermissionsEditTask, value, "MaximumPermissionsEditTask"); }
        }
        private System.Boolean __MaximumPermissionsEditEvent;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditEvent
        {
            get { return __MaximumPermissionsEditEvent; }
            set { SetField(ref __MaximumPermissionsEditEvent, value, "MaximumPermissionsEditEvent"); }
        }
        private System.Boolean __MaximumPermissionsExportReport;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsExportReport
        {
            get { return __MaximumPermissionsExportReport; }
            set { SetField(ref __MaximumPermissionsExportReport, value, "MaximumPermissionsExportReport"); }
        }
        private System.Boolean __MaximumPermissionsImportPersonal;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsImportPersonal
        {
            get { return __MaximumPermissionsImportPersonal; }
            set { SetField(ref __MaximumPermissionsImportPersonal, value, "MaximumPermissionsImportPersonal"); }
        }
        private System.Boolean __MaximumPermissionsManageUsers;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageUsers
        {
            get { return __MaximumPermissionsManageUsers; }
            set { SetField(ref __MaximumPermissionsManageUsers, value, "MaximumPermissionsManageUsers"); }
        }
        private System.Boolean __MaximumPermissionsEditPublicTemplates;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditPublicTemplates
        {
            get { return __MaximumPermissionsEditPublicTemplates; }
            set { SetField(ref __MaximumPermissionsEditPublicTemplates, value, "MaximumPermissionsEditPublicTemplates"); }
        }
        private System.Boolean __MaximumPermissionsModifyAllData;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsModifyAllData
        {
            get { return __MaximumPermissionsModifyAllData; }
            set { SetField(ref __MaximumPermissionsModifyAllData, value, "MaximumPermissionsModifyAllData"); }
        }
        private System.Boolean __MaximumPermissionsManageCases;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageCases
        {
            get { return __MaximumPermissionsManageCases; }
            set { SetField(ref __MaximumPermissionsManageCases, value, "MaximumPermissionsManageCases"); }
        }
        private System.Boolean __MaximumPermissionsMassInlineEdit;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsMassInlineEdit
        {
            get { return __MaximumPermissionsMassInlineEdit; }
            set { SetField(ref __MaximumPermissionsMassInlineEdit, value, "MaximumPermissionsMassInlineEdit"); }
        }
        private System.Boolean __MaximumPermissionsEditKnowledge;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditKnowledge
        {
            get { return __MaximumPermissionsEditKnowledge; }
            set { SetField(ref __MaximumPermissionsEditKnowledge, value, "MaximumPermissionsEditKnowledge"); }
        }
        private System.Boolean __MaximumPermissionsManageKnowledge;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageKnowledge
        {
            get { return __MaximumPermissionsManageKnowledge; }
            set { SetField(ref __MaximumPermissionsManageKnowledge, value, "MaximumPermissionsManageKnowledge"); }
        }
        private System.Boolean __MaximumPermissionsManageSolutions;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageSolutions
        {
            get { return __MaximumPermissionsManageSolutions; }
            set { SetField(ref __MaximumPermissionsManageSolutions, value, "MaximumPermissionsManageSolutions"); }
        }
        private System.Boolean __MaximumPermissionsCustomizeApplication;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCustomizeApplication
        {
            get { return __MaximumPermissionsCustomizeApplication; }
            set { SetField(ref __MaximumPermissionsCustomizeApplication, value, "MaximumPermissionsCustomizeApplication"); }
        }
        private System.Boolean __MaximumPermissionsEditReadonlyFields;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditReadonlyFields
        {
            get { return __MaximumPermissionsEditReadonlyFields; }
            set { SetField(ref __MaximumPermissionsEditReadonlyFields, value, "MaximumPermissionsEditReadonlyFields"); }
        }
        private System.Boolean __MaximumPermissionsRunReports;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsRunReports
        {
            get { return __MaximumPermissionsRunReports; }
            set { SetField(ref __MaximumPermissionsRunReports, value, "MaximumPermissionsRunReports"); }
        }
        private System.Boolean __MaximumPermissionsViewSetup;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewSetup
        {
            get { return __MaximumPermissionsViewSetup; }
            set { SetField(ref __MaximumPermissionsViewSetup, value, "MaximumPermissionsViewSetup"); }
        }
        private System.Boolean __MaximumPermissionsTransferAnyEntity;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsTransferAnyEntity
        {
            get { return __MaximumPermissionsTransferAnyEntity; }
            set { SetField(ref __MaximumPermissionsTransferAnyEntity, value, "MaximumPermissionsTransferAnyEntity"); }
        }
        private System.Boolean __MaximumPermissionsNewReportBuilder;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsNewReportBuilder
        {
            get { return __MaximumPermissionsNewReportBuilder; }
            set { SetField(ref __MaximumPermissionsNewReportBuilder, value, "MaximumPermissionsNewReportBuilder"); }
        }
        private System.Boolean __MaximumPermissionsActivateContract;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsActivateContract
        {
            get { return __MaximumPermissionsActivateContract; }
            set { SetField(ref __MaximumPermissionsActivateContract, value, "MaximumPermissionsActivateContract"); }
        }
        private System.Boolean __MaximumPermissionsActivateOrder;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsActivateOrder
        {
            get { return __MaximumPermissionsActivateOrder; }
            set { SetField(ref __MaximumPermissionsActivateOrder, value, "MaximumPermissionsActivateOrder"); }
        }
        private System.Boolean __MaximumPermissionsImportLeads;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsImportLeads
        {
            get { return __MaximumPermissionsImportLeads; }
            set { SetField(ref __MaximumPermissionsImportLeads, value, "MaximumPermissionsImportLeads"); }
        }
        private System.Boolean __MaximumPermissionsManageLeads;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageLeads
        {
            get { return __MaximumPermissionsManageLeads; }
            set { SetField(ref __MaximumPermissionsManageLeads, value, "MaximumPermissionsManageLeads"); }
        }
        private System.Boolean __MaximumPermissionsTransferAnyLead;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsTransferAnyLead
        {
            get { return __MaximumPermissionsTransferAnyLead; }
            set { SetField(ref __MaximumPermissionsTransferAnyLead, value, "MaximumPermissionsTransferAnyLead"); }
        }
        private System.Boolean __MaximumPermissionsViewAllData;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewAllData
        {
            get { return __MaximumPermissionsViewAllData; }
            set { SetField(ref __MaximumPermissionsViewAllData, value, "MaximumPermissionsViewAllData"); }
        }
        private System.Boolean __MaximumPermissionsEditPublicDocuments;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditPublicDocuments
        {
            get { return __MaximumPermissionsEditPublicDocuments; }
            set { SetField(ref __MaximumPermissionsEditPublicDocuments, value, "MaximumPermissionsEditPublicDocuments"); }
        }
        private System.Boolean __MaximumPermissionsViewEncryptedData;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewEncryptedData
        {
            get { return __MaximumPermissionsViewEncryptedData; }
            set { SetField(ref __MaximumPermissionsViewEncryptedData, value, "MaximumPermissionsViewEncryptedData"); }
        }
        private System.Boolean __MaximumPermissionsEditBrandTemplates;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditBrandTemplates
        {
            get { return __MaximumPermissionsEditBrandTemplates; }
            set { SetField(ref __MaximumPermissionsEditBrandTemplates, value, "MaximumPermissionsEditBrandTemplates"); }
        }
        private System.Boolean __MaximumPermissionsEditHtmlTemplates;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditHtmlTemplates
        {
            get { return __MaximumPermissionsEditHtmlTemplates; }
            set { SetField(ref __MaximumPermissionsEditHtmlTemplates, value, "MaximumPermissionsEditHtmlTemplates"); }
        }
        private System.Boolean __MaximumPermissionsChatterInternalUser;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsChatterInternalUser
        {
            get { return __MaximumPermissionsChatterInternalUser; }
            set { SetField(ref __MaximumPermissionsChatterInternalUser, value, "MaximumPermissionsChatterInternalUser"); }
        }
        private System.Boolean __MaximumPermissionsDeleteActivatedContract;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsDeleteActivatedContract
        {
            get { return __MaximumPermissionsDeleteActivatedContract; }
            set { SetField(ref __MaximumPermissionsDeleteActivatedContract, value, "MaximumPermissionsDeleteActivatedContract"); }
        }
        private System.Boolean __MaximumPermissionsChatterInviteExternalUsers;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsChatterInviteExternalUsers
        {
            get { return __MaximumPermissionsChatterInviteExternalUsers; }
            set { SetField(ref __MaximumPermissionsChatterInviteExternalUsers, value, "MaximumPermissionsChatterInviteExternalUsers"); }
        }
        private System.Boolean __MaximumPermissionsSendSitRequests;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsSendSitRequests
        {
            get { return __MaximumPermissionsSendSitRequests; }
            set { SetField(ref __MaximumPermissionsSendSitRequests, value, "MaximumPermissionsSendSitRequests"); }
        }
        private System.Boolean __MaximumPermissionsManageRemoteAccess;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageRemoteAccess
        {
            get { return __MaximumPermissionsManageRemoteAccess; }
            set { SetField(ref __MaximumPermissionsManageRemoteAccess, value, "MaximumPermissionsManageRemoteAccess"); }
        }
        private System.Boolean __MaximumPermissionsCanUseNewDashboardBuilder;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCanUseNewDashboardBuilder
        {
            get { return __MaximumPermissionsCanUseNewDashboardBuilder; }
            set { SetField(ref __MaximumPermissionsCanUseNewDashboardBuilder, value, "MaximumPermissionsCanUseNewDashboardBuilder"); }
        }
        private System.Boolean __MaximumPermissionsManageCategories;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageCategories
        {
            get { return __MaximumPermissionsManageCategories; }
            set { SetField(ref __MaximumPermissionsManageCategories, value, "MaximumPermissionsManageCategories"); }
        }
        private System.Boolean __MaximumPermissionsConvertLeads;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsConvertLeads
        {
            get { return __MaximumPermissionsConvertLeads; }
            set { SetField(ref __MaximumPermissionsConvertLeads, value, "MaximumPermissionsConvertLeads"); }
        }
        private System.Boolean __MaximumPermissionsPasswordNeverExpires;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsPasswordNeverExpires
        {
            get { return __MaximumPermissionsPasswordNeverExpires; }
            set { SetField(ref __MaximumPermissionsPasswordNeverExpires, value, "MaximumPermissionsPasswordNeverExpires"); }
        }
        private System.Boolean __MaximumPermissionsUseTeamReassignWizards;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsUseTeamReassignWizards
        {
            get { return __MaximumPermissionsUseTeamReassignWizards; }
            set { SetField(ref __MaximumPermissionsUseTeamReassignWizards, value, "MaximumPermissionsUseTeamReassignWizards"); }
        }
        private System.Boolean __MaximumPermissionsEditActivatedOrders;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditActivatedOrders
        {
            get { return __MaximumPermissionsEditActivatedOrders; }
            set { SetField(ref __MaximumPermissionsEditActivatedOrders, value, "MaximumPermissionsEditActivatedOrders"); }
        }
        private System.Boolean __MaximumPermissionsInstallPackaging;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsInstallPackaging
        {
            get { return __MaximumPermissionsInstallPackaging; }
            set { SetField(ref __MaximumPermissionsInstallPackaging, value, "MaximumPermissionsInstallPackaging"); }
        }
        private System.Boolean __MaximumPermissionsPublishPackaging;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsPublishPackaging
        {
            get { return __MaximumPermissionsPublishPackaging; }
            set { SetField(ref __MaximumPermissionsPublishPackaging, value, "MaximumPermissionsPublishPackaging"); }
        }
        private System.Boolean __MaximumPermissionsChatterOwnGroups;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsChatterOwnGroups
        {
            get { return __MaximumPermissionsChatterOwnGroups; }
            set { SetField(ref __MaximumPermissionsChatterOwnGroups, value, "MaximumPermissionsChatterOwnGroups"); }
        }
        private System.Boolean __MaximumPermissionsEditOppLineItemUnitPrice;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditOppLineItemUnitPrice
        {
            get { return __MaximumPermissionsEditOppLineItemUnitPrice; }
            set { SetField(ref __MaximumPermissionsEditOppLineItemUnitPrice, value, "MaximumPermissionsEditOppLineItemUnitPrice"); }
        }
        private System.Boolean __MaximumPermissionsCreatePackaging;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreatePackaging
        {
            get { return __MaximumPermissionsCreatePackaging; }
            set { SetField(ref __MaximumPermissionsCreatePackaging, value, "MaximumPermissionsCreatePackaging"); }
        }
        private System.Boolean __MaximumPermissionsBulkApiHardDelete;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsBulkApiHardDelete
        {
            get { return __MaximumPermissionsBulkApiHardDelete; }
            set { SetField(ref __MaximumPermissionsBulkApiHardDelete, value, "MaximumPermissionsBulkApiHardDelete"); }
        }
        private System.Boolean __MaximumPermissionsSolutionImport;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsSolutionImport
        {
            get { return __MaximumPermissionsSolutionImport; }
            set { SetField(ref __MaximumPermissionsSolutionImport, value, "MaximumPermissionsSolutionImport"); }
        }
        private System.Boolean __MaximumPermissionsManageCallCenters;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageCallCenters
        {
            get { return __MaximumPermissionsManageCallCenters; }
            set { SetField(ref __MaximumPermissionsManageCallCenters, value, "MaximumPermissionsManageCallCenters"); }
        }
        private System.Boolean __MaximumPermissionsManageSynonyms;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageSynonyms
        {
            get { return __MaximumPermissionsManageSynonyms; }
            set { SetField(ref __MaximumPermissionsManageSynonyms, value, "MaximumPermissionsManageSynonyms"); }
        }
        private System.Boolean __MaximumPermissionsViewContent;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewContent
        {
            get { return __MaximumPermissionsViewContent; }
            set { SetField(ref __MaximumPermissionsViewContent, value, "MaximumPermissionsViewContent"); }
        }
        private System.Boolean __MaximumPermissionsManageEmailClientConfig;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageEmailClientConfig
        {
            get { return __MaximumPermissionsManageEmailClientConfig; }
            set { SetField(ref __MaximumPermissionsManageEmailClientConfig, value, "MaximumPermissionsManageEmailClientConfig"); }
        }
        private System.Boolean __MaximumPermissionsEnableNotifications;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEnableNotifications
        {
            get { return __MaximumPermissionsEnableNotifications; }
            set { SetField(ref __MaximumPermissionsEnableNotifications, value, "MaximumPermissionsEnableNotifications"); }
        }
        private System.Boolean __MaximumPermissionsManageDataIntegrations;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageDataIntegrations
        {
            get { return __MaximumPermissionsManageDataIntegrations; }
            set { SetField(ref __MaximumPermissionsManageDataIntegrations, value, "MaximumPermissionsManageDataIntegrations"); }
        }
        private System.Boolean __MaximumPermissionsDistributeFromPersWksp;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsDistributeFromPersWksp
        {
            get { return __MaximumPermissionsDistributeFromPersWksp; }
            set { SetField(ref __MaximumPermissionsDistributeFromPersWksp, value, "MaximumPermissionsDistributeFromPersWksp"); }
        }
        private System.Boolean __MaximumPermissionsViewDataCategories;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewDataCategories
        {
            get { return __MaximumPermissionsViewDataCategories; }
            set { SetField(ref __MaximumPermissionsViewDataCategories, value, "MaximumPermissionsViewDataCategories"); }
        }
        private System.Boolean __MaximumPermissionsManageDataCategories;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageDataCategories
        {
            get { return __MaximumPermissionsManageDataCategories; }
            set { SetField(ref __MaximumPermissionsManageDataCategories, value, "MaximumPermissionsManageDataCategories"); }
        }
        private System.Boolean __MaximumPermissionsAuthorApex;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsAuthorApex
        {
            get { return __MaximumPermissionsAuthorApex; }
            set { SetField(ref __MaximumPermissionsAuthorApex, value, "MaximumPermissionsAuthorApex"); }
        }
        private System.Boolean __MaximumPermissionsManageMobile;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageMobile
        {
            get { return __MaximumPermissionsManageMobile; }
            set { SetField(ref __MaximumPermissionsManageMobile, value, "MaximumPermissionsManageMobile"); }
        }
        private System.Boolean __MaximumPermissionsApiEnabled;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsApiEnabled
        {
            get { return __MaximumPermissionsApiEnabled; }
            set { SetField(ref __MaximumPermissionsApiEnabled, value, "MaximumPermissionsApiEnabled"); }
        }
        private System.Boolean __MaximumPermissionsManageCustomReportTypes;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageCustomReportTypes
        {
            get { return __MaximumPermissionsManageCustomReportTypes; }
            set { SetField(ref __MaximumPermissionsManageCustomReportTypes, value, "MaximumPermissionsManageCustomReportTypes"); }
        }
        private System.Boolean __MaximumPermissionsEditCaseComments;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditCaseComments
        {
            get { return __MaximumPermissionsEditCaseComments; }
            set { SetField(ref __MaximumPermissionsEditCaseComments, value, "MaximumPermissionsEditCaseComments"); }
        }
        private System.Boolean __MaximumPermissionsTransferAnyCase;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsTransferAnyCase
        {
            get { return __MaximumPermissionsTransferAnyCase; }
            set { SetField(ref __MaximumPermissionsTransferAnyCase, value, "MaximumPermissionsTransferAnyCase"); }
        }
        private System.Boolean __MaximumPermissionsContentAdministrator;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsContentAdministrator
        {
            get { return __MaximumPermissionsContentAdministrator; }
            set { SetField(ref __MaximumPermissionsContentAdministrator, value, "MaximumPermissionsContentAdministrator"); }
        }
        private System.Boolean __MaximumPermissionsCreateWorkspaces;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateWorkspaces
        {
            get { return __MaximumPermissionsCreateWorkspaces; }
            set { SetField(ref __MaximumPermissionsCreateWorkspaces, value, "MaximumPermissionsCreateWorkspaces"); }
        }
        private System.Boolean __MaximumPermissionsManageContentPermissions;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageContentPermissions
        {
            get { return __MaximumPermissionsManageContentPermissions; }
            set { SetField(ref __MaximumPermissionsManageContentPermissions, value, "MaximumPermissionsManageContentPermissions"); }
        }
        private System.Boolean __MaximumPermissionsManageContentProperties;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageContentProperties
        {
            get { return __MaximumPermissionsManageContentProperties; }
            set { SetField(ref __MaximumPermissionsManageContentProperties, value, "MaximumPermissionsManageContentProperties"); }
        }
        private System.Boolean __MaximumPermissionsManageContentTypes;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageContentTypes
        {
            get { return __MaximumPermissionsManageContentTypes; }
            set { SetField(ref __MaximumPermissionsManageContentTypes, value, "MaximumPermissionsManageContentTypes"); }
        }
        private System.Boolean __MaximumPermissionsManageExchangeConfig;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageExchangeConfig
        {
            get { return __MaximumPermissionsManageExchangeConfig; }
            set { SetField(ref __MaximumPermissionsManageExchangeConfig, value, "MaximumPermissionsManageExchangeConfig"); }
        }
        private System.Boolean __MaximumPermissionsManageAnalyticSnapshots;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageAnalyticSnapshots
        {
            get { return __MaximumPermissionsManageAnalyticSnapshots; }
            set { SetField(ref __MaximumPermissionsManageAnalyticSnapshots, value, "MaximumPermissionsManageAnalyticSnapshots"); }
        }
        private System.Boolean __MaximumPermissionsScheduleReports;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsScheduleReports
        {
            get { return __MaximumPermissionsScheduleReports; }
            set { SetField(ref __MaximumPermissionsScheduleReports, value, "MaximumPermissionsScheduleReports"); }
        }
        private System.Boolean __MaximumPermissionsManageBusinessHourHolidays;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageBusinessHourHolidays
        {
            get { return __MaximumPermissionsManageBusinessHourHolidays; }
            set { SetField(ref __MaximumPermissionsManageBusinessHourHolidays, value, "MaximumPermissionsManageBusinessHourHolidays"); }
        }
        private System.Boolean __MaximumPermissionsManageDynamicDashboards;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageDynamicDashboards
        {
            get { return __MaximumPermissionsManageDynamicDashboards; }
            set { SetField(ref __MaximumPermissionsManageDynamicDashboards, value, "MaximumPermissionsManageDynamicDashboards"); }
        }
        private System.Boolean __MaximumPermissionsCustomSidebarOnAllPages;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCustomSidebarOnAllPages
        {
            get { return __MaximumPermissionsCustomSidebarOnAllPages; }
            set { SetField(ref __MaximumPermissionsCustomSidebarOnAllPages, value, "MaximumPermissionsCustomSidebarOnAllPages"); }
        }
        private System.Boolean __MaximumPermissionsManageInteraction;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageInteraction
        {
            get { return __MaximumPermissionsManageInteraction; }
            set { SetField(ref __MaximumPermissionsManageInteraction, value, "MaximumPermissionsManageInteraction"); }
        }
        private System.Boolean __MaximumPermissionsViewMyTeamsDashboards;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewMyTeamsDashboards
        {
            get { return __MaximumPermissionsViewMyTeamsDashboards; }
            set { SetField(ref __MaximumPermissionsViewMyTeamsDashboards, value, "MaximumPermissionsViewMyTeamsDashboards"); }
        }
        private System.Boolean __MaximumPermissionsModerateChatter;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsModerateChatter
        {
            get { return __MaximumPermissionsModerateChatter; }
            set { SetField(ref __MaximumPermissionsModerateChatter, value, "MaximumPermissionsModerateChatter"); }
        }
        private System.Boolean __MaximumPermissionsResetPasswords;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsResetPasswords
        {
            get { return __MaximumPermissionsResetPasswords; }
            set { SetField(ref __MaximumPermissionsResetPasswords, value, "MaximumPermissionsResetPasswords"); }
        }
        private System.Boolean __MaximumPermissionsFlowUFLRequired;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsFlowUFLRequired
        {
            get { return __MaximumPermissionsFlowUFLRequired; }
            set { SetField(ref __MaximumPermissionsFlowUFLRequired, value, "MaximumPermissionsFlowUFLRequired"); }
        }
        private System.Boolean __MaximumPermissionsCanInsertFeedSystemFields;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCanInsertFeedSystemFields
        {
            get { return __MaximumPermissionsCanInsertFeedSystemFields; }
            set { SetField(ref __MaximumPermissionsCanInsertFeedSystemFields, value, "MaximumPermissionsCanInsertFeedSystemFields"); }
        }
        private System.Boolean __MaximumPermissionsManageKnowledgeImportExport;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageKnowledgeImportExport
        {
            get { return __MaximumPermissionsManageKnowledgeImportExport; }
            set { SetField(ref __MaximumPermissionsManageKnowledgeImportExport, value, "MaximumPermissionsManageKnowledgeImportExport"); }
        }
        private System.Boolean __MaximumPermissionsEmailTemplateManagement;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEmailTemplateManagement
        {
            get { return __MaximumPermissionsEmailTemplateManagement; }
            set { SetField(ref __MaximumPermissionsEmailTemplateManagement, value, "MaximumPermissionsEmailTemplateManagement"); }
        }
        private System.Boolean __MaximumPermissionsEmailAdministration;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEmailAdministration
        {
            get { return __MaximumPermissionsEmailAdministration; }
            set { SetField(ref __MaximumPermissionsEmailAdministration, value, "MaximumPermissionsEmailAdministration"); }
        }
        private System.Boolean __MaximumPermissionsManageChatterMessages;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageChatterMessages
        {
            get { return __MaximumPermissionsManageChatterMessages; }
            set { SetField(ref __MaximumPermissionsManageChatterMessages, value, "MaximumPermissionsManageChatterMessages"); }
        }
        private System.Boolean __MaximumPermissionsAllowEmailIC;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsAllowEmailIC
        {
            get { return __MaximumPermissionsAllowEmailIC; }
            set { SetField(ref __MaximumPermissionsAllowEmailIC, value, "MaximumPermissionsAllowEmailIC"); }
        }
        private System.Boolean __MaximumPermissionsChatterFileLink;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsChatterFileLink
        {
            get { return __MaximumPermissionsChatterFileLink; }
            set { SetField(ref __MaximumPermissionsChatterFileLink, value, "MaximumPermissionsChatterFileLink"); }
        }
        private System.Boolean __MaximumPermissionsForceTwoFactor;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsForceTwoFactor
        {
            get { return __MaximumPermissionsForceTwoFactor; }
            set { SetField(ref __MaximumPermissionsForceTwoFactor, value, "MaximumPermissionsForceTwoFactor"); }
        }
        private System.Boolean __MaximumPermissionsViewEventLogFiles;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewEventLogFiles
        {
            get { return __MaximumPermissionsViewEventLogFiles; }
            set { SetField(ref __MaximumPermissionsViewEventLogFiles, value, "MaximumPermissionsViewEventLogFiles"); }
        }
        private System.Boolean __MaximumPermissionsManageNetworks;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageNetworks
        {
            get { return __MaximumPermissionsManageNetworks; }
            set { SetField(ref __MaximumPermissionsManageNetworks, value, "MaximumPermissionsManageNetworks"); }
        }
        private System.Boolean __MaximumPermissionsManageAuthProviders;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageAuthProviders
        {
            get { return __MaximumPermissionsManageAuthProviders; }
            set { SetField(ref __MaximumPermissionsManageAuthProviders, value, "MaximumPermissionsManageAuthProviders"); }
        }
        private System.Boolean __MaximumPermissionsRunFlow;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsRunFlow
        {
            get { return __MaximumPermissionsRunFlow; }
            set { SetField(ref __MaximumPermissionsRunFlow, value, "MaximumPermissionsRunFlow"); }
        }
        private System.Boolean __MaximumPermissionsCreateCustomizeDashboards;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateCustomizeDashboards
        {
            get { return __MaximumPermissionsCreateCustomizeDashboards; }
            set { SetField(ref __MaximumPermissionsCreateCustomizeDashboards, value, "MaximumPermissionsCreateCustomizeDashboards"); }
        }
        private System.Boolean __MaximumPermissionsCreateDashboardFolders;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateDashboardFolders
        {
            get { return __MaximumPermissionsCreateDashboardFolders; }
            set { SetField(ref __MaximumPermissionsCreateDashboardFolders, value, "MaximumPermissionsCreateDashboardFolders"); }
        }
        private System.Boolean __MaximumPermissionsViewPublicDashboards;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewPublicDashboards
        {
            get { return __MaximumPermissionsViewPublicDashboards; }
            set { SetField(ref __MaximumPermissionsViewPublicDashboards, value, "MaximumPermissionsViewPublicDashboards"); }
        }
        private System.Boolean __MaximumPermissionsManageDashbdsInPubFolders;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageDashbdsInPubFolders
        {
            get { return __MaximumPermissionsManageDashbdsInPubFolders; }
            set { SetField(ref __MaximumPermissionsManageDashbdsInPubFolders, value, "MaximumPermissionsManageDashbdsInPubFolders"); }
        }
        private System.Boolean __MaximumPermissionsCreateCustomizeReports;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateCustomizeReports
        {
            get { return __MaximumPermissionsCreateCustomizeReports; }
            set { SetField(ref __MaximumPermissionsCreateCustomizeReports, value, "MaximumPermissionsCreateCustomizeReports"); }
        }
        private System.Boolean __MaximumPermissionsCreateReportFolders;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateReportFolders
        {
            get { return __MaximumPermissionsCreateReportFolders; }
            set { SetField(ref __MaximumPermissionsCreateReportFolders, value, "MaximumPermissionsCreateReportFolders"); }
        }
        private System.Boolean __MaximumPermissionsViewPublicReports;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewPublicReports
        {
            get { return __MaximumPermissionsViewPublicReports; }
            set { SetField(ref __MaximumPermissionsViewPublicReports, value, "MaximumPermissionsViewPublicReports"); }
        }
        private System.Boolean __MaximumPermissionsManageReportsInPubFolders;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageReportsInPubFolders
        {
            get { return __MaximumPermissionsManageReportsInPubFolders; }
            set { SetField(ref __MaximumPermissionsManageReportsInPubFolders, value, "MaximumPermissionsManageReportsInPubFolders"); }
        }
        private System.Boolean __MaximumPermissionsEditMyDashboards;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditMyDashboards
        {
            get { return __MaximumPermissionsEditMyDashboards; }
            set { SetField(ref __MaximumPermissionsEditMyDashboards, value, "MaximumPermissionsEditMyDashboards"); }
        }
        private System.Boolean __MaximumPermissionsEditMyReports;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditMyReports
        {
            get { return __MaximumPermissionsEditMyReports; }
            set { SetField(ref __MaximumPermissionsEditMyReports, value, "MaximumPermissionsEditMyReports"); }
        }
        private System.Boolean __MaximumPermissionsViewAllUsers;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewAllUsers
        {
            get { return __MaximumPermissionsViewAllUsers; }
            set { SetField(ref __MaximumPermissionsViewAllUsers, value, "MaximumPermissionsViewAllUsers"); }
        }
        private System.Boolean __MaximumPermissionsAllowUniversalSearch;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsAllowUniversalSearch
        {
            get { return __MaximumPermissionsAllowUniversalSearch; }
            set { SetField(ref __MaximumPermissionsAllowUniversalSearch, value, "MaximumPermissionsAllowUniversalSearch"); }
        }
        private System.Boolean __MaximumPermissionsConnectOrgToEnvironmentHub;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsConnectOrgToEnvironmentHub
        {
            get { return __MaximumPermissionsConnectOrgToEnvironmentHub; }
            set { SetField(ref __MaximumPermissionsConnectOrgToEnvironmentHub, value, "MaximumPermissionsConnectOrgToEnvironmentHub"); }
        }
        private System.Boolean __MaximumPermissionsWorkCalibrationUser;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsWorkCalibrationUser
        {
            get { return __MaximumPermissionsWorkCalibrationUser; }
            set { SetField(ref __MaximumPermissionsWorkCalibrationUser, value, "MaximumPermissionsWorkCalibrationUser"); }
        }
        private System.Boolean __MaximumPermissionsCreateCustomizeFilters;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateCustomizeFilters
        {
            get { return __MaximumPermissionsCreateCustomizeFilters; }
            set { SetField(ref __MaximumPermissionsCreateCustomizeFilters, value, "MaximumPermissionsCreateCustomizeFilters"); }
        }
        private System.Boolean __MaximumPermissionsWorkDotComUserPerm;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsWorkDotComUserPerm
        {
            get { return __MaximumPermissionsWorkDotComUserPerm; }
            set { SetField(ref __MaximumPermissionsWorkDotComUserPerm, value, "MaximumPermissionsWorkDotComUserPerm"); }
        }
        private System.Boolean __MaximumPermissionsSalesConsole;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsSalesConsole
        {
            get { return __MaximumPermissionsSalesConsole; }
            set { SetField(ref __MaximumPermissionsSalesConsole, value, "MaximumPermissionsSalesConsole"); }
        }
        private System.Boolean __MaximumPermissionsTwoFactorApi;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsTwoFactorApi
        {
            get { return __MaximumPermissionsTwoFactorApi; }
            set { SetField(ref __MaximumPermissionsTwoFactorApi, value, "MaximumPermissionsTwoFactorApi"); }
        }
        private System.Boolean __MaximumPermissionsDeleteTopics;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsDeleteTopics
        {
            get { return __MaximumPermissionsDeleteTopics; }
            set { SetField(ref __MaximumPermissionsDeleteTopics, value, "MaximumPermissionsDeleteTopics"); }
        }
        private System.Boolean __MaximumPermissionsEditTopics;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsEditTopics
        {
            get { return __MaximumPermissionsEditTopics; }
            set { SetField(ref __MaximumPermissionsEditTopics, value, "MaximumPermissionsEditTopics"); }
        }
        private System.Boolean __MaximumPermissionsCreateTopics;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCreateTopics
        {
            get { return __MaximumPermissionsCreateTopics; }
            set { SetField(ref __MaximumPermissionsCreateTopics, value, "MaximumPermissionsCreateTopics"); }
        }
        private System.Boolean __MaximumPermissionsAssignTopics;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsAssignTopics
        {
            get { return __MaximumPermissionsAssignTopics; }
            set { SetField(ref __MaximumPermissionsAssignTopics, value, "MaximumPermissionsAssignTopics"); }
        }
        private System.Boolean __MaximumPermissionsIdentityEnabled;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsIdentityEnabled
        {
            get { return __MaximumPermissionsIdentityEnabled; }
            set { SetField(ref __MaximumPermissionsIdentityEnabled, value, "MaximumPermissionsIdentityEnabled"); }
        }
        private System.Boolean __MaximumPermissionsIdentityConnect;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsIdentityConnect
        {
            get { return __MaximumPermissionsIdentityConnect; }
            set { SetField(ref __MaximumPermissionsIdentityConnect, value, "MaximumPermissionsIdentityConnect"); }
        }
        private System.Boolean __MaximumPermissionsAllowViewKnowledge;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsAllowViewKnowledge
        {
            get { return __MaximumPermissionsAllowViewKnowledge; }
            set { SetField(ref __MaximumPermissionsAllowViewKnowledge, value, "MaximumPermissionsAllowViewKnowledge"); }
        }
        private System.Boolean __MaximumPermissionsManageSearchPromotionRules;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsManageSearchPromotionRules
        {
            get { return __MaximumPermissionsManageSearchPromotionRules; }
            set { SetField(ref __MaximumPermissionsManageSearchPromotionRules, value, "MaximumPermissionsManageSearchPromotionRules"); }
        }
        private System.Boolean __MaximumPermissionsCustomMobileAppsAccess;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsCustomMobileAppsAccess
        {
            get { return __MaximumPermissionsCustomMobileAppsAccess; }
            set { SetField(ref __MaximumPermissionsCustomMobileAppsAccess, value, "MaximumPermissionsCustomMobileAppsAccess"); }
        }
        private System.Boolean __MaximumPermissionsViewHelpLink;
        [EntityField(false)]
        public System.Boolean MaximumPermissionsViewHelpLink
        {
            get { return __MaximumPermissionsViewHelpLink; }
            set { SetField(ref __MaximumPermissionsViewHelpLink, value, "MaximumPermissionsViewHelpLink"); }
        }
        private System.Int32 __UsedLicenses;
        [EntityField(false)]
        public System.Int32 UsedLicenses
        {
            get { return __UsedLicenses; }
            set { SetField(ref __UsedLicenses, value, "UsedLicenses"); }
        }
        [JsonIgnore]
        [ReferencedByField("PermissionSetLicenseId")]
        public RelationShip<PermissionSetLicense,PermissionSetLicenseAssign> PermissionSetLicenseAssignments
        {
            get;set;
        }
    }
    [EntityName("PermissionSetLicenseAssign")]
    public class PermissionSetLicenseAssign : ISalesforceEntity
    {
    [JsonConstructor]
        private PermissionSetLicenseAssign(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PermissionSetLicenseAssign()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __PermissionSetLicenseId;
        [EntityField(false)]
        public System.String PermissionSetLicenseId
        {
            get { return __PermissionSetLicenseId; }
            set { SetField(ref __PermissionSetLicenseId, value, "PermissionSetLicenseId"); }
        }
        private System.String __AssigneeId;
        [EntityField(false)]
        public System.String AssigneeId
        {
            get { return __AssigneeId; }
            set { SetField(ref __AssigneeId, value, "AssigneeId"); }
        }
    }
    [EntityName("Pricebook2")]
    public class Pricebook2 : ISalesforceEntity
    {
    [JsonConstructor]
        private Pricebook2(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Pricebook2()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsStandard;
        [EntityField(false)]
        public System.Boolean IsStandard
        {
            get { return __IsStandard; }
            set { SetField(ref __IsStandard, value, "IsStandard"); }
        }
        [JsonIgnore]
        [ReferencedByField("Pricebook2Id")]
        public RelationShip<Pricebook2,Contract> Contracts
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Pricebook2Id")]
        public RelationShip<Pricebook2,Opportunity> Opportunities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Pricebook2Id")]
        public RelationShip<Pricebook2,Order> Orders
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Pricebook2Id")]
        public RelationShip<Pricebook2,Pricebook2History> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Pricebook2Id")]
        public RelationShip<Pricebook2,PricebookEntry> PricebookEntries
        {
            get;set;
        }
    }
    [EntityName("Pricebook2History")]
    public class Pricebook2History : ISalesforceEntity
    {
    [JsonConstructor]
        private Pricebook2History(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Pricebook2History()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Pricebook2Id;
        [EntityField(false)]
        public System.String Pricebook2Id
        {
            get { return __Pricebook2Id; }
            set { SetField(ref __Pricebook2Id, value, "Pricebook2Id"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickPricebook2HistoryField __Field;
        [EntityField(false)]
        public PickPricebook2HistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("PricebookEntry")]
    public class PricebookEntry : ISalesforceEntity
    {
    [JsonConstructor]
        private PricebookEntry(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PricebookEntry()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Pricebook2Id;
        [EntityField(false)]
        public System.String Pricebook2Id
        {
            get { return __Pricebook2Id; }
            set { SetField(ref __Pricebook2Id, value, "Pricebook2Id"); }
        }
        private System.String __Product2Id;
        [EntityField(false)]
        public System.String Product2Id
        {
            get { return __Product2Id; }
            set { SetField(ref __Product2Id, value, "Product2Id"); }
        }
        private System.String __UnitPrice;
        [EntityField(false)]
        public System.String UnitPrice
        {
            get { return __UnitPrice; }
            set { SetField(ref __UnitPrice, value, "UnitPrice"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.Boolean __UseStandardPrice;
        [EntityField(false)]
        public System.Boolean UseStandardPrice
        {
            get { return __UseStandardPrice; }
            set { SetField(ref __UseStandardPrice, value, "UseStandardPrice"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ProductCode;
        [EntityField(true)]
        public System.String ProductCode
        {
            get { return __ProductCode; }
            set { SetField(ref __ProductCode, value, "ProductCode"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        [JsonIgnore]
        [ReferencedByField("PricebookEntryId")]
        public RelationShip<PricebookEntry,OpportunityLineItem> OpportunityLineItems
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("PricebookEntryId")]
        public RelationShip<PricebookEntry,OrderItem> OrderItems
        {
            get;set;
        }
    }
    [EntityName("ProcessDefinition")]
    public class ProcessDefinition : ISalesforceEntity
    {
    [JsonConstructor]
        private ProcessDefinition(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProcessDefinition()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickProcessDefinitionType __Type;
        [EntityField(false)]
        public PickProcessDefinitionType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickProcessDefinitionTableEnumOrId __TableEnumOrId;
        [EntityField(false)]
        public PickProcessDefinitionTableEnumOrId TableEnumOrId
        {
            get { return __TableEnumOrId; }
            set { SetField(ref __TableEnumOrId, value, "TableEnumOrId"); }
        }
        private PickProcessDefinitionLockType __LockType;
        [EntityField(false)]
        public PickProcessDefinitionLockType LockType
        {
            get { return __LockType; }
            set { SetField(ref __LockType, value, "LockType"); }
        }
        private PickProcessDefinitionState __State;
        [EntityField(false)]
        public PickProcessDefinitionState State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ProcessInstance")]
    public class ProcessInstance : ISalesforceEntity
    {
    [JsonConstructor]
        private ProcessInstance(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProcessInstance()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ProcessDefinitionId;
        [EntityField(false)]
        public System.String ProcessDefinitionId
        {
            get { return __ProcessDefinitionId; }
            set { SetField(ref __ProcessDefinitionId, value, "ProcessDefinitionId"); }
        }
        private System.String __TargetObjectId;
        [EntityField(false)]
        public System.String TargetObjectId
        {
            get { return __TargetObjectId; }
            set { SetField(ref __TargetObjectId, value, "TargetObjectId"); }
        }
        private PickProcessInstanceStatus __Status;
        [EntityField(false)]
        public PickProcessInstanceStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("ProcessInstanceId")]
        public RelationShip<ProcessInstance,ProcessInstanceHistory> StepsAndWorkitems
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ProcessInstanceId")]
        public RelationShip<ProcessInstance,ProcessInstanceStep> Steps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ProcessInstanceId")]
        public RelationShip<ProcessInstance,ProcessInstanceWorkitem> Workitems
        {
            get;set;
        }
    }
    [EntityName("ProcessInstanceHistory")]
    public class ProcessInstanceHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private ProcessInstanceHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProcessInstanceHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsPending;
        [EntityField(false)]
        public System.Boolean IsPending
        {
            get { return __IsPending; }
            set { SetField(ref __IsPending, value, "IsPending"); }
        }
        private System.String __ProcessInstanceId;
        [EntityField(false)]
        public System.String ProcessInstanceId
        {
            get { return __ProcessInstanceId; }
            set { SetField(ref __ProcessInstanceId, value, "ProcessInstanceId"); }
        }
        private System.String __TargetObjectId;
        [EntityField(true)]
        public System.String TargetObjectId
        {
            get { return __TargetObjectId; }
            set { SetField(ref __TargetObjectId, value, "TargetObjectId"); }
        }
        private PickProcessInstanceHistoryStepStatus __StepStatus;
        [EntityField(true)]
        public PickProcessInstanceHistoryStepStatus StepStatus
        {
            get { return __StepStatus; }
            set { SetField(ref __StepStatus, value, "StepStatus"); }
        }
        private System.String __OriginalActorId;
        [EntityField(false)]
        public System.String OriginalActorId
        {
            get { return __OriginalActorId; }
            set { SetField(ref __OriginalActorId, value, "OriginalActorId"); }
        }
        private System.String __ActorId;
        [EntityField(false)]
        public System.String ActorId
        {
            get { return __ActorId; }
            set { SetField(ref __ActorId, value, "ActorId"); }
        }
        private System.Int32? __RemindersSent;
        [EntityField(true)]
        public System.Int32? RemindersSent
        {
            get { return __RemindersSent; }
            set { SetField(ref __RemindersSent, value, "RemindersSent"); }
        }
        private System.String __Comments;
        [EntityField(true)]
        public System.String Comments
        {
            get { return __Comments; }
            set { SetField(ref __Comments, value, "Comments"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ProcessInstanceStep")]
    public class ProcessInstanceStep : ISalesforceEntity
    {
    [JsonConstructor]
        private ProcessInstanceStep(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProcessInstanceStep()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ProcessInstanceId;
        [EntityField(false)]
        public System.String ProcessInstanceId
        {
            get { return __ProcessInstanceId; }
            set { SetField(ref __ProcessInstanceId, value, "ProcessInstanceId"); }
        }
        private PickProcessInstanceStepStepStatus __StepStatus;
        [EntityField(true)]
        public PickProcessInstanceStepStepStatus StepStatus
        {
            get { return __StepStatus; }
            set { SetField(ref __StepStatus, value, "StepStatus"); }
        }
        private System.String __OriginalActorId;
        [EntityField(false)]
        public System.String OriginalActorId
        {
            get { return __OriginalActorId; }
            set { SetField(ref __OriginalActorId, value, "OriginalActorId"); }
        }
        private System.String __ActorId;
        [EntityField(false)]
        public System.String ActorId
        {
            get { return __ActorId; }
            set { SetField(ref __ActorId, value, "ActorId"); }
        }
        private System.String __Comments;
        [EntityField(true)]
        public System.String Comments
        {
            get { return __Comments; }
            set { SetField(ref __Comments, value, "Comments"); }
        }
        private System.String __StepNodeId;
        [EntityField(true)]
        public System.String StepNodeId
        {
            get { return __StepNodeId; }
            set { SetField(ref __StepNodeId, value, "StepNodeId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ProcessInstanceWorkitem")]
    public class ProcessInstanceWorkitem : ISalesforceEntity
    {
    [JsonConstructor]
        private ProcessInstanceWorkitem(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProcessInstanceWorkitem()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ProcessInstanceId;
        [EntityField(false)]
        public System.String ProcessInstanceId
        {
            get { return __ProcessInstanceId; }
            set { SetField(ref __ProcessInstanceId, value, "ProcessInstanceId"); }
        }
        private System.String __OriginalActorId;
        [EntityField(false)]
        public System.String OriginalActorId
        {
            get { return __OriginalActorId; }
            set { SetField(ref __OriginalActorId, value, "OriginalActorId"); }
        }
        private System.String __ActorId;
        [EntityField(false)]
        public System.String ActorId
        {
            get { return __ActorId; }
            set { SetField(ref __ActorId, value, "ActorId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("ProcessNode")]
    public class ProcessNode : ISalesforceEntity
    {
    [JsonConstructor]
        private ProcessNode(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ProcessNode()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __ProcessDefinitionId;
        [EntityField(false)]
        public System.String ProcessDefinitionId
        {
            get { return __ProcessDefinitionId; }
            set { SetField(ref __ProcessDefinitionId, value, "ProcessDefinitionId"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Product2")]
    public class Product2 : ISalesforceEntity
    {
    [JsonConstructor]
        private Product2(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Product2()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __ProductCode;
        [EntityField(true)]
        public System.String ProductCode
        {
            get { return __ProductCode; }
            set { SetField(ref __ProductCode, value, "ProductCode"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickProduct2Family __Family;
        [EntityField(true)]
        public PickProduct2Family Family
        {
            get { return __Family; }
            set { SetField(ref __Family, value, "Family"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Product2,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Product2Id")]
        public RelationShip<Product2,Asset> Assets
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Product2,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Product2,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Product2,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Product2,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Product2,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Product2,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Product2,Note> Notes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Product2,NoteAndAttachment> NotesAndAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Product2,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("Product2Id")]
        public RelationShip<Product2,PricebookEntry> PricebookEntries
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Product2,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Product2,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Product2,Product2Feed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Product2,Task> Tasks
        {
            get;set;
        }
    }
    [EntityName("Product2Feed")]
    public class Product2Feed : ISalesforceEntity
    {
    [JsonConstructor]
        private Product2Feed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Product2Feed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickProduct2FeedType __Type;
        [EntityField(true)]
        public PickProduct2FeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<Product2Feed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<Product2Feed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<Product2Feed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("Profile")]
    public class Profile : ISalesforceEntity
    {
    [JsonConstructor]
        private Profile(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Profile()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Boolean __PermissionsEmailSingle;
        [EntityField(false)]
        public System.Boolean PermissionsEmailSingle
        {
            get { return __PermissionsEmailSingle; }
            set { SetField(ref __PermissionsEmailSingle, value, "PermissionsEmailSingle"); }
        }
        private System.Boolean __PermissionsEmailMass;
        [EntityField(false)]
        public System.Boolean PermissionsEmailMass
        {
            get { return __PermissionsEmailMass; }
            set { SetField(ref __PermissionsEmailMass, value, "PermissionsEmailMass"); }
        }
        private System.Boolean __PermissionsEditTask;
        [EntityField(false)]
        public System.Boolean PermissionsEditTask
        {
            get { return __PermissionsEditTask; }
            set { SetField(ref __PermissionsEditTask, value, "PermissionsEditTask"); }
        }
        private System.Boolean __PermissionsEditEvent;
        [EntityField(false)]
        public System.Boolean PermissionsEditEvent
        {
            get { return __PermissionsEditEvent; }
            set { SetField(ref __PermissionsEditEvent, value, "PermissionsEditEvent"); }
        }
        private System.Boolean __PermissionsExportReport;
        [EntityField(false)]
        public System.Boolean PermissionsExportReport
        {
            get { return __PermissionsExportReport; }
            set { SetField(ref __PermissionsExportReport, value, "PermissionsExportReport"); }
        }
        private System.Boolean __PermissionsImportPersonal;
        [EntityField(false)]
        public System.Boolean PermissionsImportPersonal
        {
            get { return __PermissionsImportPersonal; }
            set { SetField(ref __PermissionsImportPersonal, value, "PermissionsImportPersonal"); }
        }
        private System.Boolean __PermissionsManageUsers;
        [EntityField(false)]
        public System.Boolean PermissionsManageUsers
        {
            get { return __PermissionsManageUsers; }
            set { SetField(ref __PermissionsManageUsers, value, "PermissionsManageUsers"); }
        }
        private System.Boolean __PermissionsEditPublicTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditPublicTemplates
        {
            get { return __PermissionsEditPublicTemplates; }
            set { SetField(ref __PermissionsEditPublicTemplates, value, "PermissionsEditPublicTemplates"); }
        }
        private System.Boolean __PermissionsModifyAllData;
        [EntityField(false)]
        public System.Boolean PermissionsModifyAllData
        {
            get { return __PermissionsModifyAllData; }
            set { SetField(ref __PermissionsModifyAllData, value, "PermissionsModifyAllData"); }
        }
        private System.Boolean __PermissionsManageCases;
        [EntityField(false)]
        public System.Boolean PermissionsManageCases
        {
            get { return __PermissionsManageCases; }
            set { SetField(ref __PermissionsManageCases, value, "PermissionsManageCases"); }
        }
        private System.Boolean __PermissionsMassInlineEdit;
        [EntityField(false)]
        public System.Boolean PermissionsMassInlineEdit
        {
            get { return __PermissionsMassInlineEdit; }
            set { SetField(ref __PermissionsMassInlineEdit, value, "PermissionsMassInlineEdit"); }
        }
        private System.Boolean __PermissionsEditKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsEditKnowledge
        {
            get { return __PermissionsEditKnowledge; }
            set { SetField(ref __PermissionsEditKnowledge, value, "PermissionsEditKnowledge"); }
        }
        private System.Boolean __PermissionsManageKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsManageKnowledge
        {
            get { return __PermissionsManageKnowledge; }
            set { SetField(ref __PermissionsManageKnowledge, value, "PermissionsManageKnowledge"); }
        }
        private System.Boolean __PermissionsManageSolutions;
        [EntityField(false)]
        public System.Boolean PermissionsManageSolutions
        {
            get { return __PermissionsManageSolutions; }
            set { SetField(ref __PermissionsManageSolutions, value, "PermissionsManageSolutions"); }
        }
        private System.Boolean __PermissionsCustomizeApplication;
        [EntityField(false)]
        public System.Boolean PermissionsCustomizeApplication
        {
            get { return __PermissionsCustomizeApplication; }
            set { SetField(ref __PermissionsCustomizeApplication, value, "PermissionsCustomizeApplication"); }
        }
        private System.Boolean __PermissionsEditReadonlyFields;
        [EntityField(false)]
        public System.Boolean PermissionsEditReadonlyFields
        {
            get { return __PermissionsEditReadonlyFields; }
            set { SetField(ref __PermissionsEditReadonlyFields, value, "PermissionsEditReadonlyFields"); }
        }
        private System.Boolean __PermissionsRunReports;
        [EntityField(false)]
        public System.Boolean PermissionsRunReports
        {
            get { return __PermissionsRunReports; }
            set { SetField(ref __PermissionsRunReports, value, "PermissionsRunReports"); }
        }
        private System.Boolean __PermissionsViewSetup;
        [EntityField(false)]
        public System.Boolean PermissionsViewSetup
        {
            get { return __PermissionsViewSetup; }
            set { SetField(ref __PermissionsViewSetup, value, "PermissionsViewSetup"); }
        }
        private System.Boolean __PermissionsTransferAnyEntity;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyEntity
        {
            get { return __PermissionsTransferAnyEntity; }
            set { SetField(ref __PermissionsTransferAnyEntity, value, "PermissionsTransferAnyEntity"); }
        }
        private System.Boolean __PermissionsNewReportBuilder;
        [EntityField(false)]
        public System.Boolean PermissionsNewReportBuilder
        {
            get { return __PermissionsNewReportBuilder; }
            set { SetField(ref __PermissionsNewReportBuilder, value, "PermissionsNewReportBuilder"); }
        }
        private System.Boolean __PermissionsActivateContract;
        [EntityField(false)]
        public System.Boolean PermissionsActivateContract
        {
            get { return __PermissionsActivateContract; }
            set { SetField(ref __PermissionsActivateContract, value, "PermissionsActivateContract"); }
        }
        private System.Boolean __PermissionsActivateOrder;
        [EntityField(false)]
        public System.Boolean PermissionsActivateOrder
        {
            get { return __PermissionsActivateOrder; }
            set { SetField(ref __PermissionsActivateOrder, value, "PermissionsActivateOrder"); }
        }
        private System.Boolean __PermissionsImportLeads;
        [EntityField(false)]
        public System.Boolean PermissionsImportLeads
        {
            get { return __PermissionsImportLeads; }
            set { SetField(ref __PermissionsImportLeads, value, "PermissionsImportLeads"); }
        }
        private System.Boolean __PermissionsManageLeads;
        [EntityField(false)]
        public System.Boolean PermissionsManageLeads
        {
            get { return __PermissionsManageLeads; }
            set { SetField(ref __PermissionsManageLeads, value, "PermissionsManageLeads"); }
        }
        private System.Boolean __PermissionsTransferAnyLead;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyLead
        {
            get { return __PermissionsTransferAnyLead; }
            set { SetField(ref __PermissionsTransferAnyLead, value, "PermissionsTransferAnyLead"); }
        }
        private System.Boolean __PermissionsViewAllData;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllData
        {
            get { return __PermissionsViewAllData; }
            set { SetField(ref __PermissionsViewAllData, value, "PermissionsViewAllData"); }
        }
        private System.Boolean __PermissionsEditPublicDocuments;
        [EntityField(false)]
        public System.Boolean PermissionsEditPublicDocuments
        {
            get { return __PermissionsEditPublicDocuments; }
            set { SetField(ref __PermissionsEditPublicDocuments, value, "PermissionsEditPublicDocuments"); }
        }
        private System.Boolean __PermissionsViewEncryptedData;
        [EntityField(false)]
        public System.Boolean PermissionsViewEncryptedData
        {
            get { return __PermissionsViewEncryptedData; }
            set { SetField(ref __PermissionsViewEncryptedData, value, "PermissionsViewEncryptedData"); }
        }
        private System.Boolean __PermissionsEditBrandTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditBrandTemplates
        {
            get { return __PermissionsEditBrandTemplates; }
            set { SetField(ref __PermissionsEditBrandTemplates, value, "PermissionsEditBrandTemplates"); }
        }
        private System.Boolean __PermissionsEditHtmlTemplates;
        [EntityField(false)]
        public System.Boolean PermissionsEditHtmlTemplates
        {
            get { return __PermissionsEditHtmlTemplates; }
            set { SetField(ref __PermissionsEditHtmlTemplates, value, "PermissionsEditHtmlTemplates"); }
        }
        private System.Boolean __PermissionsChatterInternalUser;
        [EntityField(false)]
        public System.Boolean PermissionsChatterInternalUser
        {
            get { return __PermissionsChatterInternalUser; }
            set { SetField(ref __PermissionsChatterInternalUser, value, "PermissionsChatterInternalUser"); }
        }
        private System.Boolean __PermissionsDeleteActivatedContract;
        [EntityField(false)]
        public System.Boolean PermissionsDeleteActivatedContract
        {
            get { return __PermissionsDeleteActivatedContract; }
            set { SetField(ref __PermissionsDeleteActivatedContract, value, "PermissionsDeleteActivatedContract"); }
        }
        private System.Boolean __PermissionsChatterInviteExternalUsers;
        [EntityField(false)]
        public System.Boolean PermissionsChatterInviteExternalUsers
        {
            get { return __PermissionsChatterInviteExternalUsers; }
            set { SetField(ref __PermissionsChatterInviteExternalUsers, value, "PermissionsChatterInviteExternalUsers"); }
        }
        private System.Boolean __PermissionsSendSitRequests;
        [EntityField(false)]
        public System.Boolean PermissionsSendSitRequests
        {
            get { return __PermissionsSendSitRequests; }
            set { SetField(ref __PermissionsSendSitRequests, value, "PermissionsSendSitRequests"); }
        }
        private System.Boolean __PermissionsManageRemoteAccess;
        [EntityField(false)]
        public System.Boolean PermissionsManageRemoteAccess
        {
            get { return __PermissionsManageRemoteAccess; }
            set { SetField(ref __PermissionsManageRemoteAccess, value, "PermissionsManageRemoteAccess"); }
        }
        private System.Boolean __PermissionsCanUseNewDashboardBuilder;
        [EntityField(false)]
        public System.Boolean PermissionsCanUseNewDashboardBuilder
        {
            get { return __PermissionsCanUseNewDashboardBuilder; }
            set { SetField(ref __PermissionsCanUseNewDashboardBuilder, value, "PermissionsCanUseNewDashboardBuilder"); }
        }
        private System.Boolean __PermissionsManageCategories;
        [EntityField(false)]
        public System.Boolean PermissionsManageCategories
        {
            get { return __PermissionsManageCategories; }
            set { SetField(ref __PermissionsManageCategories, value, "PermissionsManageCategories"); }
        }
        private System.Boolean __PermissionsConvertLeads;
        [EntityField(false)]
        public System.Boolean PermissionsConvertLeads
        {
            get { return __PermissionsConvertLeads; }
            set { SetField(ref __PermissionsConvertLeads, value, "PermissionsConvertLeads"); }
        }
        private System.Boolean __PermissionsPasswordNeverExpires;
        [EntityField(false)]
        public System.Boolean PermissionsPasswordNeverExpires
        {
            get { return __PermissionsPasswordNeverExpires; }
            set { SetField(ref __PermissionsPasswordNeverExpires, value, "PermissionsPasswordNeverExpires"); }
        }
        private System.Boolean __PermissionsUseTeamReassignWizards;
        [EntityField(false)]
        public System.Boolean PermissionsUseTeamReassignWizards
        {
            get { return __PermissionsUseTeamReassignWizards; }
            set { SetField(ref __PermissionsUseTeamReassignWizards, value, "PermissionsUseTeamReassignWizards"); }
        }
        private System.Boolean __PermissionsEditActivatedOrders;
        [EntityField(false)]
        public System.Boolean PermissionsEditActivatedOrders
        {
            get { return __PermissionsEditActivatedOrders; }
            set { SetField(ref __PermissionsEditActivatedOrders, value, "PermissionsEditActivatedOrders"); }
        }
        private System.Boolean __PermissionsInstallMultiforce;
        [EntityField(false)]
        public System.Boolean PermissionsInstallMultiforce
        {
            get { return __PermissionsInstallMultiforce; }
            set { SetField(ref __PermissionsInstallMultiforce, value, "PermissionsInstallMultiforce"); }
        }
        private System.Boolean __PermissionsPublishMultiforce;
        [EntityField(false)]
        public System.Boolean PermissionsPublishMultiforce
        {
            get { return __PermissionsPublishMultiforce; }
            set { SetField(ref __PermissionsPublishMultiforce, value, "PermissionsPublishMultiforce"); }
        }
        private System.Boolean __PermissionsChatterOwnGroups;
        [EntityField(false)]
        public System.Boolean PermissionsChatterOwnGroups
        {
            get { return __PermissionsChatterOwnGroups; }
            set { SetField(ref __PermissionsChatterOwnGroups, value, "PermissionsChatterOwnGroups"); }
        }
        private System.Boolean __PermissionsEditOppLineItemUnitPrice;
        [EntityField(false)]
        public System.Boolean PermissionsEditOppLineItemUnitPrice
        {
            get { return __PermissionsEditOppLineItemUnitPrice; }
            set { SetField(ref __PermissionsEditOppLineItemUnitPrice, value, "PermissionsEditOppLineItemUnitPrice"); }
        }
        private System.Boolean __PermissionsCreateMultiforce;
        [EntityField(false)]
        public System.Boolean PermissionsCreateMultiforce
        {
            get { return __PermissionsCreateMultiforce; }
            set { SetField(ref __PermissionsCreateMultiforce, value, "PermissionsCreateMultiforce"); }
        }
        private System.Boolean __PermissionsBulkApiHardDelete;
        [EntityField(false)]
        public System.Boolean PermissionsBulkApiHardDelete
        {
            get { return __PermissionsBulkApiHardDelete; }
            set { SetField(ref __PermissionsBulkApiHardDelete, value, "PermissionsBulkApiHardDelete"); }
        }
        private System.Boolean __PermissionsSolutionImport;
        [EntityField(false)]
        public System.Boolean PermissionsSolutionImport
        {
            get { return __PermissionsSolutionImport; }
            set { SetField(ref __PermissionsSolutionImport, value, "PermissionsSolutionImport"); }
        }
        private System.Boolean __PermissionsManageCallCenters;
        [EntityField(false)]
        public System.Boolean PermissionsManageCallCenters
        {
            get { return __PermissionsManageCallCenters; }
            set { SetField(ref __PermissionsManageCallCenters, value, "PermissionsManageCallCenters"); }
        }
        private System.Boolean __PermissionsManageSynonyms;
        [EntityField(false)]
        public System.Boolean PermissionsManageSynonyms
        {
            get { return __PermissionsManageSynonyms; }
            set { SetField(ref __PermissionsManageSynonyms, value, "PermissionsManageSynonyms"); }
        }
        private System.Boolean __PermissionsViewContent;
        [EntityField(false)]
        public System.Boolean PermissionsViewContent
        {
            get { return __PermissionsViewContent; }
            set { SetField(ref __PermissionsViewContent, value, "PermissionsViewContent"); }
        }
        private System.Boolean __PermissionsManageEmailClientConfig;
        [EntityField(false)]
        public System.Boolean PermissionsManageEmailClientConfig
        {
            get { return __PermissionsManageEmailClientConfig; }
            set { SetField(ref __PermissionsManageEmailClientConfig, value, "PermissionsManageEmailClientConfig"); }
        }
        private System.Boolean __PermissionsEnableNotifications;
        [EntityField(false)]
        public System.Boolean PermissionsEnableNotifications
        {
            get { return __PermissionsEnableNotifications; }
            set { SetField(ref __PermissionsEnableNotifications, value, "PermissionsEnableNotifications"); }
        }
        private System.Boolean __PermissionsManageDataIntegrations;
        [EntityField(false)]
        public System.Boolean PermissionsManageDataIntegrations
        {
            get { return __PermissionsManageDataIntegrations; }
            set { SetField(ref __PermissionsManageDataIntegrations, value, "PermissionsManageDataIntegrations"); }
        }
        private System.Boolean __PermissionsDistributeFromPersWksp;
        [EntityField(false)]
        public System.Boolean PermissionsDistributeFromPersWksp
        {
            get { return __PermissionsDistributeFromPersWksp; }
            set { SetField(ref __PermissionsDistributeFromPersWksp, value, "PermissionsDistributeFromPersWksp"); }
        }
        private System.Boolean __PermissionsViewDataCategories;
        [EntityField(false)]
        public System.Boolean PermissionsViewDataCategories
        {
            get { return __PermissionsViewDataCategories; }
            set { SetField(ref __PermissionsViewDataCategories, value, "PermissionsViewDataCategories"); }
        }
        private System.Boolean __PermissionsManageDataCategories;
        [EntityField(false)]
        public System.Boolean PermissionsManageDataCategories
        {
            get { return __PermissionsManageDataCategories; }
            set { SetField(ref __PermissionsManageDataCategories, value, "PermissionsManageDataCategories"); }
        }
        private System.Boolean __PermissionsAuthorApex;
        [EntityField(false)]
        public System.Boolean PermissionsAuthorApex
        {
            get { return __PermissionsAuthorApex; }
            set { SetField(ref __PermissionsAuthorApex, value, "PermissionsAuthorApex"); }
        }
        private System.Boolean __PermissionsManageMobile;
        [EntityField(false)]
        public System.Boolean PermissionsManageMobile
        {
            get { return __PermissionsManageMobile; }
            set { SetField(ref __PermissionsManageMobile, value, "PermissionsManageMobile"); }
        }
        private System.Boolean __PermissionsApiEnabled;
        [EntityField(false)]
        public System.Boolean PermissionsApiEnabled
        {
            get { return __PermissionsApiEnabled; }
            set { SetField(ref __PermissionsApiEnabled, value, "PermissionsApiEnabled"); }
        }
        private System.Boolean __PermissionsManageCustomReportTypes;
        [EntityField(false)]
        public System.Boolean PermissionsManageCustomReportTypes
        {
            get { return __PermissionsManageCustomReportTypes; }
            set { SetField(ref __PermissionsManageCustomReportTypes, value, "PermissionsManageCustomReportTypes"); }
        }
        private System.Boolean __PermissionsEditCaseComments;
        [EntityField(false)]
        public System.Boolean PermissionsEditCaseComments
        {
            get { return __PermissionsEditCaseComments; }
            set { SetField(ref __PermissionsEditCaseComments, value, "PermissionsEditCaseComments"); }
        }
        private System.Boolean __PermissionsTransferAnyCase;
        [EntityField(false)]
        public System.Boolean PermissionsTransferAnyCase
        {
            get { return __PermissionsTransferAnyCase; }
            set { SetField(ref __PermissionsTransferAnyCase, value, "PermissionsTransferAnyCase"); }
        }
        private System.Boolean __PermissionsContentAdministrator;
        [EntityField(false)]
        public System.Boolean PermissionsContentAdministrator
        {
            get { return __PermissionsContentAdministrator; }
            set { SetField(ref __PermissionsContentAdministrator, value, "PermissionsContentAdministrator"); }
        }
        private System.Boolean __PermissionsCreateWorkspaces;
        [EntityField(false)]
        public System.Boolean PermissionsCreateWorkspaces
        {
            get { return __PermissionsCreateWorkspaces; }
            set { SetField(ref __PermissionsCreateWorkspaces, value, "PermissionsCreateWorkspaces"); }
        }
        private System.Boolean __PermissionsManageContentPermissions;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentPermissions
        {
            get { return __PermissionsManageContentPermissions; }
            set { SetField(ref __PermissionsManageContentPermissions, value, "PermissionsManageContentPermissions"); }
        }
        private System.Boolean __PermissionsManageContentProperties;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentProperties
        {
            get { return __PermissionsManageContentProperties; }
            set { SetField(ref __PermissionsManageContentProperties, value, "PermissionsManageContentProperties"); }
        }
        private System.Boolean __PermissionsManageContentTypes;
        [EntityField(false)]
        public System.Boolean PermissionsManageContentTypes
        {
            get { return __PermissionsManageContentTypes; }
            set { SetField(ref __PermissionsManageContentTypes, value, "PermissionsManageContentTypes"); }
        }
        private System.Boolean __PermissionsManageExchangeConfig;
        [EntityField(false)]
        public System.Boolean PermissionsManageExchangeConfig
        {
            get { return __PermissionsManageExchangeConfig; }
            set { SetField(ref __PermissionsManageExchangeConfig, value, "PermissionsManageExchangeConfig"); }
        }
        private System.Boolean __PermissionsManageAnalyticSnapshots;
        [EntityField(false)]
        public System.Boolean PermissionsManageAnalyticSnapshots
        {
            get { return __PermissionsManageAnalyticSnapshots; }
            set { SetField(ref __PermissionsManageAnalyticSnapshots, value, "PermissionsManageAnalyticSnapshots"); }
        }
        private System.Boolean __PermissionsScheduleReports;
        [EntityField(false)]
        public System.Boolean PermissionsScheduleReports
        {
            get { return __PermissionsScheduleReports; }
            set { SetField(ref __PermissionsScheduleReports, value, "PermissionsScheduleReports"); }
        }
        private System.Boolean __PermissionsManageBusinessHourHolidays;
        [EntityField(false)]
        public System.Boolean PermissionsManageBusinessHourHolidays
        {
            get { return __PermissionsManageBusinessHourHolidays; }
            set { SetField(ref __PermissionsManageBusinessHourHolidays, value, "PermissionsManageBusinessHourHolidays"); }
        }
        private System.Boolean __PermissionsManageDynamicDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsManageDynamicDashboards
        {
            get { return __PermissionsManageDynamicDashboards; }
            set { SetField(ref __PermissionsManageDynamicDashboards, value, "PermissionsManageDynamicDashboards"); }
        }
        private System.Boolean __PermissionsCustomSidebarOnAllPages;
        [EntityField(false)]
        public System.Boolean PermissionsCustomSidebarOnAllPages
        {
            get { return __PermissionsCustomSidebarOnAllPages; }
            set { SetField(ref __PermissionsCustomSidebarOnAllPages, value, "PermissionsCustomSidebarOnAllPages"); }
        }
        private System.Boolean __PermissionsManageInteraction;
        [EntityField(false)]
        public System.Boolean PermissionsManageInteraction
        {
            get { return __PermissionsManageInteraction; }
            set { SetField(ref __PermissionsManageInteraction, value, "PermissionsManageInteraction"); }
        }
        private System.Boolean __PermissionsViewMyTeamsDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsViewMyTeamsDashboards
        {
            get { return __PermissionsViewMyTeamsDashboards; }
            set { SetField(ref __PermissionsViewMyTeamsDashboards, value, "PermissionsViewMyTeamsDashboards"); }
        }
        private System.Boolean __PermissionsModerateChatter;
        [EntityField(false)]
        public System.Boolean PermissionsModerateChatter
        {
            get { return __PermissionsModerateChatter; }
            set { SetField(ref __PermissionsModerateChatter, value, "PermissionsModerateChatter"); }
        }
        private System.Boolean __PermissionsResetPasswords;
        [EntityField(false)]
        public System.Boolean PermissionsResetPasswords
        {
            get { return __PermissionsResetPasswords; }
            set { SetField(ref __PermissionsResetPasswords, value, "PermissionsResetPasswords"); }
        }
        private System.Boolean __PermissionsFlowUFLRequired;
        [EntityField(false)]
        public System.Boolean PermissionsFlowUFLRequired
        {
            get { return __PermissionsFlowUFLRequired; }
            set { SetField(ref __PermissionsFlowUFLRequired, value, "PermissionsFlowUFLRequired"); }
        }
        private System.Boolean __PermissionsCanInsertFeedSystemFields;
        [EntityField(false)]
        public System.Boolean PermissionsCanInsertFeedSystemFields
        {
            get { return __PermissionsCanInsertFeedSystemFields; }
            set { SetField(ref __PermissionsCanInsertFeedSystemFields, value, "PermissionsCanInsertFeedSystemFields"); }
        }
        private System.Boolean __PermissionsManageKnowledgeImportExport;
        [EntityField(false)]
        public System.Boolean PermissionsManageKnowledgeImportExport
        {
            get { return __PermissionsManageKnowledgeImportExport; }
            set { SetField(ref __PermissionsManageKnowledgeImportExport, value, "PermissionsManageKnowledgeImportExport"); }
        }
        private System.Boolean __PermissionsEmailTemplateManagement;
        [EntityField(false)]
        public System.Boolean PermissionsEmailTemplateManagement
        {
            get { return __PermissionsEmailTemplateManagement; }
            set { SetField(ref __PermissionsEmailTemplateManagement, value, "PermissionsEmailTemplateManagement"); }
        }
        private System.Boolean __PermissionsEmailAdministration;
        [EntityField(false)]
        public System.Boolean PermissionsEmailAdministration
        {
            get { return __PermissionsEmailAdministration; }
            set { SetField(ref __PermissionsEmailAdministration, value, "PermissionsEmailAdministration"); }
        }
        private System.Boolean __PermissionsManageChatterMessages;
        [EntityField(false)]
        public System.Boolean PermissionsManageChatterMessages
        {
            get { return __PermissionsManageChatterMessages; }
            set { SetField(ref __PermissionsManageChatterMessages, value, "PermissionsManageChatterMessages"); }
        }
        private System.Boolean __PermissionsAllowEmailIC;
        [EntityField(false)]
        public System.Boolean PermissionsAllowEmailIC
        {
            get { return __PermissionsAllowEmailIC; }
            set { SetField(ref __PermissionsAllowEmailIC, value, "PermissionsAllowEmailIC"); }
        }
        private System.Boolean __PermissionsChatterFileLink;
        [EntityField(false)]
        public System.Boolean PermissionsChatterFileLink
        {
            get { return __PermissionsChatterFileLink; }
            set { SetField(ref __PermissionsChatterFileLink, value, "PermissionsChatterFileLink"); }
        }
        private System.Boolean __PermissionsForceTwoFactor;
        [EntityField(false)]
        public System.Boolean PermissionsForceTwoFactor
        {
            get { return __PermissionsForceTwoFactor; }
            set { SetField(ref __PermissionsForceTwoFactor, value, "PermissionsForceTwoFactor"); }
        }
        private System.Boolean __PermissionsViewEventLogFiles;
        [EntityField(false)]
        public System.Boolean PermissionsViewEventLogFiles
        {
            get { return __PermissionsViewEventLogFiles; }
            set { SetField(ref __PermissionsViewEventLogFiles, value, "PermissionsViewEventLogFiles"); }
        }
        private System.Boolean __PermissionsManageNetworks;
        [EntityField(false)]
        public System.Boolean PermissionsManageNetworks
        {
            get { return __PermissionsManageNetworks; }
            set { SetField(ref __PermissionsManageNetworks, value, "PermissionsManageNetworks"); }
        }
        private System.Boolean __PermissionsManageAuthProviders;
        [EntityField(false)]
        public System.Boolean PermissionsManageAuthProviders
        {
            get { return __PermissionsManageAuthProviders; }
            set { SetField(ref __PermissionsManageAuthProviders, value, "PermissionsManageAuthProviders"); }
        }
        private System.Boolean __PermissionsRunFlow;
        [EntityField(false)]
        public System.Boolean PermissionsRunFlow
        {
            get { return __PermissionsRunFlow; }
            set { SetField(ref __PermissionsRunFlow, value, "PermissionsRunFlow"); }
        }
        private System.Boolean __PermissionsCreateCustomizeDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeDashboards
        {
            get { return __PermissionsCreateCustomizeDashboards; }
            set { SetField(ref __PermissionsCreateCustomizeDashboards, value, "PermissionsCreateCustomizeDashboards"); }
        }
        private System.Boolean __PermissionsCreateDashboardFolders;
        [EntityField(false)]
        public System.Boolean PermissionsCreateDashboardFolders
        {
            get { return __PermissionsCreateDashboardFolders; }
            set { SetField(ref __PermissionsCreateDashboardFolders, value, "PermissionsCreateDashboardFolders"); }
        }
        private System.Boolean __PermissionsViewPublicDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsViewPublicDashboards
        {
            get { return __PermissionsViewPublicDashboards; }
            set { SetField(ref __PermissionsViewPublicDashboards, value, "PermissionsViewPublicDashboards"); }
        }
        private System.Boolean __PermissionsManageDashbdsInPubFolders;
        [EntityField(false)]
        public System.Boolean PermissionsManageDashbdsInPubFolders
        {
            get { return __PermissionsManageDashbdsInPubFolders; }
            set { SetField(ref __PermissionsManageDashbdsInPubFolders, value, "PermissionsManageDashbdsInPubFolders"); }
        }
        private System.Boolean __PermissionsCreateCustomizeReports;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeReports
        {
            get { return __PermissionsCreateCustomizeReports; }
            set { SetField(ref __PermissionsCreateCustomizeReports, value, "PermissionsCreateCustomizeReports"); }
        }
        private System.Boolean __PermissionsCreateReportFolders;
        [EntityField(false)]
        public System.Boolean PermissionsCreateReportFolders
        {
            get { return __PermissionsCreateReportFolders; }
            set { SetField(ref __PermissionsCreateReportFolders, value, "PermissionsCreateReportFolders"); }
        }
        private System.Boolean __PermissionsViewPublicReports;
        [EntityField(false)]
        public System.Boolean PermissionsViewPublicReports
        {
            get { return __PermissionsViewPublicReports; }
            set { SetField(ref __PermissionsViewPublicReports, value, "PermissionsViewPublicReports"); }
        }
        private System.Boolean __PermissionsManageReportsInPubFolders;
        [EntityField(false)]
        public System.Boolean PermissionsManageReportsInPubFolders
        {
            get { return __PermissionsManageReportsInPubFolders; }
            set { SetField(ref __PermissionsManageReportsInPubFolders, value, "PermissionsManageReportsInPubFolders"); }
        }
        private System.Boolean __PermissionsEditMyDashboards;
        [EntityField(false)]
        public System.Boolean PermissionsEditMyDashboards
        {
            get { return __PermissionsEditMyDashboards; }
            set { SetField(ref __PermissionsEditMyDashboards, value, "PermissionsEditMyDashboards"); }
        }
        private System.Boolean __PermissionsEditMyReports;
        [EntityField(false)]
        public System.Boolean PermissionsEditMyReports
        {
            get { return __PermissionsEditMyReports; }
            set { SetField(ref __PermissionsEditMyReports, value, "PermissionsEditMyReports"); }
        }
        private System.Boolean __PermissionsViewAllUsers;
        [EntityField(false)]
        public System.Boolean PermissionsViewAllUsers
        {
            get { return __PermissionsViewAllUsers; }
            set { SetField(ref __PermissionsViewAllUsers, value, "PermissionsViewAllUsers"); }
        }
        private System.Boolean __PermissionsAllowUniversalSearch;
        [EntityField(false)]
        public System.Boolean PermissionsAllowUniversalSearch
        {
            get { return __PermissionsAllowUniversalSearch; }
            set { SetField(ref __PermissionsAllowUniversalSearch, value, "PermissionsAllowUniversalSearch"); }
        }
        private System.Boolean __PermissionsConnectOrgToEnvironmentHub;
        [EntityField(false)]
        public System.Boolean PermissionsConnectOrgToEnvironmentHub
        {
            get { return __PermissionsConnectOrgToEnvironmentHub; }
            set { SetField(ref __PermissionsConnectOrgToEnvironmentHub, value, "PermissionsConnectOrgToEnvironmentHub"); }
        }
        private System.Boolean __PermissionsWorkCalibrationUser;
        [EntityField(false)]
        public System.Boolean PermissionsWorkCalibrationUser
        {
            get { return __PermissionsWorkCalibrationUser; }
            set { SetField(ref __PermissionsWorkCalibrationUser, value, "PermissionsWorkCalibrationUser"); }
        }
        private System.Boolean __PermissionsCreateCustomizeFilters;
        [EntityField(false)]
        public System.Boolean PermissionsCreateCustomizeFilters
        {
            get { return __PermissionsCreateCustomizeFilters; }
            set { SetField(ref __PermissionsCreateCustomizeFilters, value, "PermissionsCreateCustomizeFilters"); }
        }
        private System.Boolean __PermissionsWorkDotComUserPerm;
        [EntityField(false)]
        public System.Boolean PermissionsWorkDotComUserPerm
        {
            get { return __PermissionsWorkDotComUserPerm; }
            set { SetField(ref __PermissionsWorkDotComUserPerm, value, "PermissionsWorkDotComUserPerm"); }
        }
        private System.Boolean __PermissionsSalesConsole;
        [EntityField(false)]
        public System.Boolean PermissionsSalesConsole
        {
            get { return __PermissionsSalesConsole; }
            set { SetField(ref __PermissionsSalesConsole, value, "PermissionsSalesConsole"); }
        }
        private System.Boolean __PermissionsTwoFactorApi;
        [EntityField(false)]
        public System.Boolean PermissionsTwoFactorApi
        {
            get { return __PermissionsTwoFactorApi; }
            set { SetField(ref __PermissionsTwoFactorApi, value, "PermissionsTwoFactorApi"); }
        }
        private System.Boolean __PermissionsDeleteTopics;
        [EntityField(false)]
        public System.Boolean PermissionsDeleteTopics
        {
            get { return __PermissionsDeleteTopics; }
            set { SetField(ref __PermissionsDeleteTopics, value, "PermissionsDeleteTopics"); }
        }
        private System.Boolean __PermissionsEditTopics;
        [EntityField(false)]
        public System.Boolean PermissionsEditTopics
        {
            get { return __PermissionsEditTopics; }
            set { SetField(ref __PermissionsEditTopics, value, "PermissionsEditTopics"); }
        }
        private System.Boolean __PermissionsCreateTopics;
        [EntityField(false)]
        public System.Boolean PermissionsCreateTopics
        {
            get { return __PermissionsCreateTopics; }
            set { SetField(ref __PermissionsCreateTopics, value, "PermissionsCreateTopics"); }
        }
        private System.Boolean __PermissionsAssignTopics;
        [EntityField(false)]
        public System.Boolean PermissionsAssignTopics
        {
            get { return __PermissionsAssignTopics; }
            set { SetField(ref __PermissionsAssignTopics, value, "PermissionsAssignTopics"); }
        }
        private System.Boolean __PermissionsIdentityEnabled;
        [EntityField(false)]
        public System.Boolean PermissionsIdentityEnabled
        {
            get { return __PermissionsIdentityEnabled; }
            set { SetField(ref __PermissionsIdentityEnabled, value, "PermissionsIdentityEnabled"); }
        }
        private System.Boolean __PermissionsIdentityConnect;
        [EntityField(false)]
        public System.Boolean PermissionsIdentityConnect
        {
            get { return __PermissionsIdentityConnect; }
            set { SetField(ref __PermissionsIdentityConnect, value, "PermissionsIdentityConnect"); }
        }
        private System.Boolean __PermissionsAllowViewKnowledge;
        [EntityField(false)]
        public System.Boolean PermissionsAllowViewKnowledge
        {
            get { return __PermissionsAllowViewKnowledge; }
            set { SetField(ref __PermissionsAllowViewKnowledge, value, "PermissionsAllowViewKnowledge"); }
        }
        private System.Boolean __PermissionsManageSearchPromotionRules;
        [EntityField(false)]
        public System.Boolean PermissionsManageSearchPromotionRules
        {
            get { return __PermissionsManageSearchPromotionRules; }
            set { SetField(ref __PermissionsManageSearchPromotionRules, value, "PermissionsManageSearchPromotionRules"); }
        }
        private System.Boolean __PermissionsCustomMobileAppsAccess;
        [EntityField(false)]
        public System.Boolean PermissionsCustomMobileAppsAccess
        {
            get { return __PermissionsCustomMobileAppsAccess; }
            set { SetField(ref __PermissionsCustomMobileAppsAccess, value, "PermissionsCustomMobileAppsAccess"); }
        }
        private System.Boolean __PermissionsViewHelpLink;
        [EntityField(false)]
        public System.Boolean PermissionsViewHelpLink
        {
            get { return __PermissionsViewHelpLink; }
            set { SetField(ref __PermissionsViewHelpLink, value, "PermissionsViewHelpLink"); }
        }
        private System.String __UserLicenseId;
        [EntityField(false)]
        public System.String UserLicenseId
        {
            get { return __UserLicenseId; }
            set { SetField(ref __UserLicenseId, value, "UserLicenseId"); }
        }
        private PickProfileUserType __UserType;
        [EntityField(true)]
        public PickProfileUserType UserType
        {
            get { return __UserType; }
            set { SetField(ref __UserType, value, "UserType"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("ProfileId")]
        public RelationShip<Profile,User> Users
        {
            get;set;
        }
    }
    [EntityName("PushTopic")]
    public class PushTopic : ISalesforceEntity
    {
    [JsonConstructor]
        private PushTopic(string hack)
        {
            trackPropertyUpdates = false;
        }

        public PushTopic()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Query;
        [EntityField(false)]
        public System.String Query
        {
            get { return __Query; }
            set { SetField(ref __Query, value, "Query"); }
        }
        private System.Double __ApiVersion;
        [EntityField(false)]
        public System.Double ApiVersion
        {
            get { return __ApiVersion; }
            set { SetField(ref __ApiVersion, value, "ApiVersion"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private PickPushTopicNotifyForFields __NotifyForFields;
        [EntityField(false)]
        public PickPushTopicNotifyForFields NotifyForFields
        {
            get { return __NotifyForFields; }
            set { SetField(ref __NotifyForFields, value, "NotifyForFields"); }
        }
        private PickPushTopicNotifyForOperations __NotifyForOperations;
        [EntityField(false)]
        public PickPushTopicNotifyForOperations NotifyForOperations
        {
            get { return __NotifyForOperations; }
            set { SetField(ref __NotifyForOperations, value, "NotifyForOperations"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __NotifyForOperationCreate;
        [EntityField(false)]
        public System.Boolean NotifyForOperationCreate
        {
            get { return __NotifyForOperationCreate; }
            set { SetField(ref __NotifyForOperationCreate, value, "NotifyForOperationCreate"); }
        }
        private System.Boolean __NotifyForOperationUpdate;
        [EntityField(false)]
        public System.Boolean NotifyForOperationUpdate
        {
            get { return __NotifyForOperationUpdate; }
            set { SetField(ref __NotifyForOperationUpdate, value, "NotifyForOperationUpdate"); }
        }
        private System.Boolean __NotifyForOperationDelete;
        [EntityField(false)]
        public System.Boolean NotifyForOperationDelete
        {
            get { return __NotifyForOperationDelete; }
            set { SetField(ref __NotifyForOperationDelete, value, "NotifyForOperationDelete"); }
        }
        private System.Boolean __NotifyForOperationUndelete;
        [EntityField(false)]
        public System.Boolean NotifyForOperationUndelete
        {
            get { return __NotifyForOperationUndelete; }
            set { SetField(ref __NotifyForOperationUndelete, value, "NotifyForOperationUndelete"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("QueueSobject")]
    public class QueueSobject : ISalesforceEntity
    {
    [JsonConstructor]
        private QueueSobject(string hack)
        {
            trackPropertyUpdates = false;
        }

        public QueueSobject()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __QueueId;
        [EntityField(false)]
        public System.String QueueId
        {
            get { return __QueueId; }
            set { SetField(ref __QueueId, value, "QueueId"); }
        }
        private PickQueueSobjectSobjectType __SobjectType;
        [EntityField(false)]
        public PickQueueSobjectSobjectType SobjectType
        {
            get { return __SobjectType; }
            set { SetField(ref __SobjectType, value, "SobjectType"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("RecentlyViewed")]
    public class RecentlyViewed : ISalesforceEntity
    {
    [JsonConstructor]
        private RecentlyViewed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public RecentlyViewed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(true)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __LastName;
        [EntityField(true)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private PickRecentlyViewedType __Type;
        [EntityField(true)]
        public PickRecentlyViewedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __Alias;
        [EntityField(true)]
        public System.String Alias
        {
            get { return __Alias; }
            set { SetField(ref __Alias, value, "Alias"); }
        }
        private System.String __UserRoleId;
        [EntityField(true)]
        public System.String UserRoleId
        {
            get { return __UserRoleId; }
            set { SetField(ref __UserRoleId, value, "UserRoleId"); }
        }
        private System.String __RecordTypeId;
        [EntityField(true)]
        public System.String RecordTypeId
        {
            get { return __RecordTypeId; }
            set { SetField(ref __RecordTypeId, value, "RecordTypeId"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __ProfileId;
        [EntityField(true)]
        public System.String ProfileId
        {
            get { return __ProfileId; }
            set { SetField(ref __ProfileId, value, "ProfileId"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Email;
        [EntityField(true)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private PickRecentlyViewedLanguage __Language;
        [EntityField(true)]
        public PickRecentlyViewedLanguage Language
        {
            get { return __Language; }
            set { SetField(ref __Language, value, "Language"); }
        }
    }
    [EntityName("RecordType")]
    public class RecordType : ISalesforceEntity
    {
    [JsonConstructor]
        private RecordType(string hack)
        {
            trackPropertyUpdates = false;
        }

        public RecordType()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __BusinessProcessId;
        [EntityField(true)]
        public System.String BusinessProcessId
        {
            get { return __BusinessProcessId; }
            set { SetField(ref __BusinessProcessId, value, "BusinessProcessId"); }
        }
        private PickRecordTypeSobjectType __SobjectType;
        [EntityField(false)]
        public PickRecordTypeSobjectType SobjectType
        {
            get { return __SobjectType; }
            set { SetField(ref __SobjectType, value, "SobjectType"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Report")]
    public class Report : ISalesforceEntity
    {
    [JsonConstructor]
        private Report(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Report()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime? __LastRunDate;
        [EntityField(true)]
        public System.DateTime? LastRunDate
        {
            get { return __LastRunDate; }
            set { SetField(ref __LastRunDate, value, "LastRunDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickReportFormat __Format;
        [EntityField(false)]
        public PickReportFormat Format
        {
            get { return __Format; }
            set { SetField(ref __Format, value, "Format"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Report,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Report,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Report,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Report,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Report,ReportFeed> Feeds
        {
            get;set;
        }
    }
    [EntityName("ReportFeed")]
    public class ReportFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private ReportFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public ReportFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickReportFeedType __Type;
        [EntityField(true)]
        public PickReportFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ReportFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ReportFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<ReportFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("Scontrol")]
    public class Scontrol : ISalesforceEntity
    {
    [JsonConstructor]
        private Scontrol(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Scontrol()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickScontrolEncodingKey __EncodingKey;
        [EntityField(false)]
        public PickScontrolEncodingKey EncodingKey
        {
            get { return __EncodingKey; }
            set { SetField(ref __EncodingKey, value, "EncodingKey"); }
        }
        private System.String __HtmlWrapper;
        [EntityField(false)]
        public System.String HtmlWrapper
        {
            get { return __HtmlWrapper; }
            set { SetField(ref __HtmlWrapper, value, "HtmlWrapper"); }
        }
        private System.String __Filename;
        [EntityField(true)]
        public System.String Filename
        {
            get { return __Filename; }
            set { SetField(ref __Filename, value, "Filename"); }
        }
        private System.Int32 __BodyLength;
        [EntityField(false)]
        public System.Int32 BodyLength
        {
            get { return __BodyLength; }
            set { SetField(ref __BodyLength, value, "BodyLength"); }
        }
        private System.String __Binary;
        [EntityField(true)]
        public System.String Binary
        {
            get { return __Binary; }
            set { SetField(ref __Binary, value, "Binary"); }
        }
        private PickScontrolContentSource __ContentSource;
        [EntityField(true)]
        public PickScontrolContentSource ContentSource
        {
            get { return __ContentSource; }
            set { SetField(ref __ContentSource, value, "ContentSource"); }
        }
        private System.Boolean __SupportsCaching;
        [EntityField(false)]
        public System.Boolean SupportsCaching
        {
            get { return __SupportsCaching; }
            set { SetField(ref __SupportsCaching, value, "SupportsCaching"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("SecureAgent")]
    public class SecureAgent : ISalesforceEntity
    {
    [JsonConstructor]
        private SecureAgent(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SecureAgent()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __DeveloperName;
        [EntityField(false)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private PickSecureAgentLanguage __Language;
        [EntityField(false)]
        public PickSecureAgentLanguage Language
        {
            get { return __Language; }
            set { SetField(ref __Language, value, "Language"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __AgentKey;
        [EntityField(true)]
        public System.String AgentKey
        {
            get { return __AgentKey; }
            set { SetField(ref __AgentKey, value, "AgentKey"); }
        }
        private System.String __ProxyUserId;
        [EntityField(true)]
        public System.String ProxyUserId
        {
            get { return __ProxyUserId; }
            set { SetField(ref __ProxyUserId, value, "ProxyUserId"); }
        }
        [JsonIgnore]
        [ReferencedByField("SecureAgentId")]
        public RelationShip<SecureAgent,SecureAgentPlugin> SecureAgentPlugins
        {
            get;set;
        }
    }
    [EntityName("SecureAgentPlugin")]
    public class SecureAgentPlugin : ISalesforceEntity
    {
    [JsonConstructor]
        private SecureAgentPlugin(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SecureAgentPlugin()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __SecureAgentId;
        [EntityField(false)]
        public System.String SecureAgentId
        {
            get { return __SecureAgentId; }
            set { SetField(ref __SecureAgentId, value, "SecureAgentId"); }
        }
        private System.String __PluginName;
        [EntityField(true)]
        public System.String PluginName
        {
            get { return __PluginName; }
            set { SetField(ref __PluginName, value, "PluginName"); }
        }
        private System.String __PluginType;
        [EntityField(true)]
        public System.String PluginType
        {
            get { return __PluginType; }
            set { SetField(ref __PluginType, value, "PluginType"); }
        }
        private System.String __RequestedVersion;
        [EntityField(true)]
        public System.String RequestedVersion
        {
            get { return __RequestedVersion; }
            set { SetField(ref __RequestedVersion, value, "RequestedVersion"); }
        }
        private System.DateTime? __UpdateWindowStart;
        [EntityField(true)]
        public System.DateTime? UpdateWindowStart
        {
            get { return __UpdateWindowStart; }
            set { SetField(ref __UpdateWindowStart, value, "UpdateWindowStart"); }
        }
        private System.DateTime? __UpdateWindowEnd;
        [EntityField(true)]
        public System.DateTime? UpdateWindowEnd
        {
            get { return __UpdateWindowEnd; }
            set { SetField(ref __UpdateWindowEnd, value, "UpdateWindowEnd"); }
        }
        [JsonIgnore]
        [ReferencedByField("SecureAgentPluginId")]
        public RelationShip<SecureAgentPlugin,SecureAgentPluginProperty> SecureAgentPluginProperties
        {
            get;set;
        }
    }
    [EntityName("SecureAgentPluginProperty")]
    public class SecureAgentPluginProperty : ISalesforceEntity
    {
    [JsonConstructor]
        private SecureAgentPluginProperty(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SecureAgentPluginProperty()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __SecureAgentPluginId;
        [EntityField(false)]
        public System.String SecureAgentPluginId
        {
            get { return __SecureAgentPluginId; }
            set { SetField(ref __SecureAgentPluginId, value, "SecureAgentPluginId"); }
        }
        private System.String __PropertyName;
        [EntityField(true)]
        public System.String PropertyName
        {
            get { return __PropertyName; }
            set { SetField(ref __PropertyName, value, "PropertyName"); }
        }
        private System.String __PropertyValue;
        [EntityField(true)]
        public System.String PropertyValue
        {
            get { return __PropertyValue; }
            set { SetField(ref __PropertyValue, value, "PropertyValue"); }
        }
    }
    [EntityName("SetupAuditTrail")]
    public class SetupAuditTrail : ISalesforceEntity
    {
    [JsonConstructor]
        private SetupAuditTrail(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SetupAuditTrail()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Action;
        [EntityField(false)]
        public System.String Action
        {
            get { return __Action; }
            set { SetField(ref __Action, value, "Action"); }
        }
        private System.String __Section;
        [EntityField(true)]
        public System.String Section
        {
            get { return __Section; }
            set { SetField(ref __Section, value, "Section"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.String __Display;
        [EntityField(true)]
        public System.String Display
        {
            get { return __Display; }
            set { SetField(ref __Display, value, "Display"); }
        }
    }
    [EntityName("SetupEntityAccess")]
    public class SetupEntityAccess : ISalesforceEntity
    {
    [JsonConstructor]
        private SetupEntityAccess(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SetupEntityAccess()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __SetupEntityId;
        [EntityField(false)]
        public System.String SetupEntityId
        {
            get { return __SetupEntityId; }
            set { SetField(ref __SetupEntityId, value, "SetupEntityId"); }
        }
        private PickSetupEntityAccessSetupEntityType __SetupEntityType;
        [EntityField(true)]
        public PickSetupEntityAccessSetupEntityType SetupEntityType
        {
            get { return __SetupEntityType; }
            set { SetField(ref __SetupEntityType, value, "SetupEntityType"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("Site")]
    public class Site : ISalesforceEntity
    {
    [JsonConstructor]
        private Site(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Site()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Subdomain;
        [EntityField(true)]
        public System.String Subdomain
        {
            get { return __Subdomain; }
            set { SetField(ref __Subdomain, value, "Subdomain"); }
        }
        private System.String __UrlPathPrefix;
        [EntityField(true)]
        public System.String UrlPathPrefix
        {
            get { return __UrlPathPrefix; }
            set { SetField(ref __UrlPathPrefix, value, "UrlPathPrefix"); }
        }
        private System.String __GuestUserId;
        [EntityField(true)]
        public System.String GuestUserId
        {
            get { return __GuestUserId; }
            set { SetField(ref __GuestUserId, value, "GuestUserId"); }
        }
        private PickSiteStatus __Status;
        [EntityField(false)]
        public PickSiteStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.String __AdminId;
        [EntityField(false)]
        public System.String AdminId
        {
            get { return __AdminId; }
            set { SetField(ref __AdminId, value, "AdminId"); }
        }
        private System.Boolean __OptionsEnableFeeds;
        [EntityField(false)]
        public System.Boolean OptionsEnableFeeds
        {
            get { return __OptionsEnableFeeds; }
            set { SetField(ref __OptionsEnableFeeds, value, "OptionsEnableFeeds"); }
        }
        private System.Boolean __OptionsAllowHomePage;
        [EntityField(false)]
        public System.Boolean OptionsAllowHomePage
        {
            get { return __OptionsAllowHomePage; }
            set { SetField(ref __OptionsAllowHomePage, value, "OptionsAllowHomePage"); }
        }
        private System.Boolean __OptionsAllowStandardIdeasPages;
        [EntityField(false)]
        public System.Boolean OptionsAllowStandardIdeasPages
        {
            get { return __OptionsAllowStandardIdeasPages; }
            set { SetField(ref __OptionsAllowStandardIdeasPages, value, "OptionsAllowStandardIdeasPages"); }
        }
        private System.Boolean __OptionsAllowStandardSearch;
        [EntityField(false)]
        public System.Boolean OptionsAllowStandardSearch
        {
            get { return __OptionsAllowStandardSearch; }
            set { SetField(ref __OptionsAllowStandardSearch, value, "OptionsAllowStandardSearch"); }
        }
        private System.Boolean __OptionsAllowStandardLookups;
        [EntityField(false)]
        public System.Boolean OptionsAllowStandardLookups
        {
            get { return __OptionsAllowStandardLookups; }
            set { SetField(ref __OptionsAllowStandardLookups, value, "OptionsAllowStandardLookups"); }
        }
        private System.Boolean __OptionsAllowStandardAnswersPages;
        [EntityField(false)]
        public System.Boolean OptionsAllowStandardAnswersPages
        {
            get { return __OptionsAllowStandardAnswersPages; }
            set { SetField(ref __OptionsAllowStandardAnswersPages, value, "OptionsAllowStandardAnswersPages"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.String __MasterLabel;
        [EntityField(false)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.String __AnalyticsTrackingCode;
        [EntityField(true)]
        public System.String AnalyticsTrackingCode
        {
            get { return __AnalyticsTrackingCode; }
            set { SetField(ref __AnalyticsTrackingCode, value, "AnalyticsTrackingCode"); }
        }
        private PickSiteSiteType __SiteType;
        [EntityField(false)]
        public PickSiteSiteType SiteType
        {
            get { return __SiteType; }
            set { SetField(ref __SiteType, value, "SiteType"); }
        }
        private PickSiteClickjackProtectionLevel __ClickjackProtectionLevel;
        [EntityField(false)]
        public PickSiteClickjackProtectionLevel ClickjackProtectionLevel
        {
            get { return __ClickjackProtectionLevel; }
            set { SetField(ref __ClickjackProtectionLevel, value, "ClickjackProtectionLevel"); }
        }
        private System.Int32? __DailyBandwidthLimit;
        [EntityField(true)]
        public System.Int32? DailyBandwidthLimit
        {
            get { return __DailyBandwidthLimit; }
            set { SetField(ref __DailyBandwidthLimit, value, "DailyBandwidthLimit"); }
        }
        private System.Int32? __DailyBandwidthUsed;
        [EntityField(true)]
        public System.Int32? DailyBandwidthUsed
        {
            get { return __DailyBandwidthUsed; }
            set { SetField(ref __DailyBandwidthUsed, value, "DailyBandwidthUsed"); }
        }
        private System.Int32? __DailyRequestTimeLimit;
        [EntityField(true)]
        public System.Int32? DailyRequestTimeLimit
        {
            get { return __DailyRequestTimeLimit; }
            set { SetField(ref __DailyRequestTimeLimit, value, "DailyRequestTimeLimit"); }
        }
        private System.Int32? __DailyRequestTimeUsed;
        [EntityField(true)]
        public System.Int32? DailyRequestTimeUsed
        {
            get { return __DailyRequestTimeUsed; }
            set { SetField(ref __DailyRequestTimeUsed, value, "DailyRequestTimeUsed"); }
        }
        private System.Int32? __MonthlyPageViewsEntitlement;
        [EntityField(true)]
        public System.Int32? MonthlyPageViewsEntitlement
        {
            get { return __MonthlyPageViewsEntitlement; }
            set { SetField(ref __MonthlyPageViewsEntitlement, value, "MonthlyPageViewsEntitlement"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Site,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Site,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Site,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SiteId")]
        public RelationShip<Site,DomainSite> SiteDomainPaths
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Site,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Site,SiteFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SiteId")]
        public RelationShip<Site,SiteHistory> Histories
        {
            get;set;
        }
    }
    [EntityName("SiteFeed")]
    public class SiteFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private SiteFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SiteFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickSiteFeedType __Type;
        [EntityField(true)]
        public PickSiteFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<SiteFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<SiteFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<SiteFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("SiteHistory")]
    public class SiteHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private SiteHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SiteHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __SiteId;
        [EntityField(false)]
        public System.String SiteId
        {
            get { return __SiteId; }
            set { SetField(ref __SiteId, value, "SiteId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickSiteHistoryField __Field;
        [EntityField(false)]
        public PickSiteHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("Solution")]
    public class Solution : ISalesforceEntity
    {
    [JsonConstructor]
        private Solution(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Solution()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __SolutionNumber;
        [EntityField(false)]
        public System.String SolutionNumber
        {
            get { return __SolutionNumber; }
            set { SetField(ref __SolutionNumber, value, "SolutionNumber"); }
        }
        private System.String __SolutionName;
        [EntityField(false)]
        public System.String SolutionName
        {
            get { return __SolutionName; }
            set { SetField(ref __SolutionName, value, "SolutionName"); }
        }
        private System.Boolean __IsPublished;
        [EntityField(false)]
        public System.Boolean IsPublished
        {
            get { return __IsPublished; }
            set { SetField(ref __IsPublished, value, "IsPublished"); }
        }
        private System.Boolean __IsPublishedInPublicKb;
        [EntityField(false)]
        public System.Boolean IsPublishedInPublicKb
        {
            get { return __IsPublishedInPublicKb; }
            set { SetField(ref __IsPublishedInPublicKb, value, "IsPublishedInPublicKb"); }
        }
        private PickSolutionStatus __Status;
        [EntityField(false)]
        public PickSolutionStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private System.Boolean __IsReviewed;
        [EntityField(false)]
        public System.Boolean IsReviewed
        {
            get { return __IsReviewed; }
            set { SetField(ref __IsReviewed, value, "IsReviewed"); }
        }
        private System.String __SolutionNote;
        [EntityField(true)]
        public System.String SolutionNote
        {
            get { return __SolutionNote; }
            set { SetField(ref __SolutionNote, value, "SolutionNote"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __TimesUsed;
        [EntityField(false)]
        public System.Int32 TimesUsed
        {
            get { return __TimesUsed; }
            set { SetField(ref __TimesUsed, value, "TimesUsed"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.Boolean __IsHtml;
        [EntityField(false)]
        public System.Boolean IsHtml
        {
            get { return __IsHtml; }
            set { SetField(ref __IsHtml, value, "IsHtml"); }
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Solution,ActivityHistory> ActivityHistories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Solution,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Solution,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SolutionId")]
        public RelationShip<Solution,CaseSolution> CaseSolutions
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Solution,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Solution,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Solution,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Solution,Event> Events
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Solution,OpenActivity> OpenActivities
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Solution,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<Solution,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Solution,SolutionFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SolutionId")]
        public RelationShip<Solution,SolutionHistory> Histories
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("WhatId")]
        public RelationShip<Solution,Task> Tasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Solution,TopicAssignment> TopicAssignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Solution,Vote> Votes
        {
            get;set;
        }
    }
    [EntityName("SolutionFeed")]
    public class SolutionFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private SolutionFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SolutionFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickSolutionFeedType __Type;
        [EntityField(true)]
        public PickSolutionFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<SolutionFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<SolutionFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<SolutionFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("SolutionHistory")]
    public class SolutionHistory : ISalesforceEntity
    {
    [JsonConstructor]
        private SolutionHistory(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SolutionHistory()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __SolutionId;
        [EntityField(false)]
        public System.String SolutionId
        {
            get { return __SolutionId; }
            set { SetField(ref __SolutionId, value, "SolutionId"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private PickSolutionHistoryField __Field;
        [EntityField(false)]
        public PickSolutionHistoryField Field
        {
            get { return __Field; }
            set { SetField(ref __Field, value, "Field"); }
        }
        private System.String __OldValue;
        [EntityField(true)]
        public System.String OldValue
        {
            get { return __OldValue; }
            set { SetField(ref __OldValue, value, "OldValue"); }
        }
        private System.String __NewValue;
        [EntityField(true)]
        public System.String NewValue
        {
            get { return __NewValue; }
            set { SetField(ref __NewValue, value, "NewValue"); }
        }
    }
    [EntityName("SolutionStatus")]
    public class SolutionStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private SolutionStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public SolutionStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __IsReviewed;
        [EntityField(false)]
        public System.Boolean IsReviewed
        {
            get { return __IsReviewed; }
            set { SetField(ref __IsReviewed, value, "IsReviewed"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("StaticResource")]
    public class StaticResource : ISalesforceEntity
    {
    [JsonConstructor]
        private StaticResource(string hack)
        {
            trackPropertyUpdates = false;
        }

        public StaticResource()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __ContentType;
        [EntityField(false)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32 __BodyLength;
        [EntityField(false)]
        public System.Int32 BodyLength
        {
            get { return __BodyLength; }
            set { SetField(ref __BodyLength, value, "BodyLength"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private PickStaticResourceCacheControl __CacheControl;
        [EntityField(false)]
        public PickStaticResourceCacheControl CacheControl
        {
            get { return __CacheControl; }
            set { SetField(ref __CacheControl, value, "CacheControl"); }
        }
    }
    [EntityName("StreamingChannel")]
    public class StreamingChannel : ISalesforceEntity
    {
    [JsonConstructor]
        private StreamingChannel(string hack)
        {
            trackPropertyUpdates = false;
        }

        public StreamingChannel()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        private System.Boolean __IsDynamic;
        [EntityField(false)]
        public System.Boolean IsDynamic
        {
            get { return __IsDynamic; }
            set { SetField(ref __IsDynamic, value, "IsDynamic"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<StreamingChannel,ProcessInstance> ProcessInstances
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("TargetObjectId")]
        public RelationShip<StreamingChannel,ProcessInstanceHistory> ProcessSteps
        {
            get;set;
        }
    }
    [EntityName("StreamingChannelShare")]
    public class StreamingChannelShare : ISalesforceEntity
    {
    [JsonConstructor]
        private StreamingChannelShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public StreamingChannelShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickStreamingChannelShareAccessLevel __AccessLevel;
        [EntityField(false)]
        public PickStreamingChannelShareAccessLevel AccessLevel
        {
            get { return __AccessLevel; }
            set { SetField(ref __AccessLevel, value, "AccessLevel"); }
        }
        private PickStreamingChannelShareRowCause __RowCause;
        [EntityField(true)]
        public PickStreamingChannelShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
    }
    [EntityName("Task")]
    public class Task : ISalesforceEntity
    {
    [JsonConstructor]
        private Task(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Task()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __WhoId;
        [EntityField(true)]
        public System.String WhoId
        {
            get { return __WhoId; }
            set { SetField(ref __WhoId, value, "WhoId"); }
        }
        private System.String __WhatId;
        [EntityField(true)]
        public System.String WhatId
        {
            get { return __WhatId; }
            set { SetField(ref __WhatId, value, "WhatId"); }
        }
        private System.String __Subject;
        [EntityField(true)]
        public System.String Subject
        {
            get { return __Subject; }
            set { SetField(ref __Subject, value, "Subject"); }
        }
        private System.DateTime? __ActivityDate;
        [EntityField(true)]
        public System.DateTime? ActivityDate
        {
            get { return __ActivityDate; }
            set { SetField(ref __ActivityDate, value, "ActivityDate"); }
        }
        private PickTaskStatus __Status;
        [EntityField(false)]
        public PickTaskStatus Status
        {
            get { return __Status; }
            set { SetField(ref __Status, value, "Status"); }
        }
        private PickTaskPriority __Priority;
        [EntityField(false)]
        public PickTaskPriority Priority
        {
            get { return __Priority; }
            set { SetField(ref __Priority, value, "Priority"); }
        }
        private System.String __OwnerId;
        [EntityField(false)]
        public System.String OwnerId
        {
            get { return __OwnerId; }
            set { SetField(ref __OwnerId, value, "OwnerId"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsArchived;
        [EntityField(false)]
        public System.Boolean IsArchived
        {
            get { return __IsArchived; }
            set { SetField(ref __IsArchived, value, "IsArchived"); }
        }
        private System.Int32? __CallDurationInSeconds;
        [EntityField(true)]
        public System.Int32? CallDurationInSeconds
        {
            get { return __CallDurationInSeconds; }
            set { SetField(ref __CallDurationInSeconds, value, "CallDurationInSeconds"); }
        }
        private PickTaskCallType __CallType;
        [EntityField(true)]
        public PickTaskCallType CallType
        {
            get { return __CallType; }
            set { SetField(ref __CallType, value, "CallType"); }
        }
        private System.String __CallDisposition;
        [EntityField(true)]
        public System.String CallDisposition
        {
            get { return __CallDisposition; }
            set { SetField(ref __CallDisposition, value, "CallDisposition"); }
        }
        private System.String __CallObject;
        [EntityField(true)]
        public System.String CallObject
        {
            get { return __CallObject; }
            set { SetField(ref __CallObject, value, "CallObject"); }
        }
        private System.DateTime? __ReminderDateTime;
        [EntityField(true)]
        public System.DateTime? ReminderDateTime
        {
            get { return __ReminderDateTime; }
            set { SetField(ref __ReminderDateTime, value, "ReminderDateTime"); }
        }
        private System.Boolean __IsReminderSet;
        [EntityField(false)]
        public System.Boolean IsReminderSet
        {
            get { return __IsReminderSet; }
            set { SetField(ref __IsReminderSet, value, "IsReminderSet"); }
        }
        private System.String __RecurrenceActivityId;
        [EntityField(true)]
        public System.String RecurrenceActivityId
        {
            get { return __RecurrenceActivityId; }
            set { SetField(ref __RecurrenceActivityId, value, "RecurrenceActivityId"); }
        }
        private System.Boolean __IsRecurrence;
        [EntityField(false)]
        public System.Boolean IsRecurrence
        {
            get { return __IsRecurrence; }
            set { SetField(ref __IsRecurrence, value, "IsRecurrence"); }
        }
        private System.DateTime? __RecurrenceStartDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceStartDateOnly
        {
            get { return __RecurrenceStartDateOnly; }
            set { SetField(ref __RecurrenceStartDateOnly, value, "RecurrenceStartDateOnly"); }
        }
        private System.DateTime? __RecurrenceEndDateOnly;
        [EntityField(true)]
        public System.DateTime? RecurrenceEndDateOnly
        {
            get { return __RecurrenceEndDateOnly; }
            set { SetField(ref __RecurrenceEndDateOnly, value, "RecurrenceEndDateOnly"); }
        }
        private PickTaskRecurrenceTimeZoneSidKey __RecurrenceTimeZoneSidKey;
        [EntityField(true)]
        public PickTaskRecurrenceTimeZoneSidKey RecurrenceTimeZoneSidKey
        {
            get { return __RecurrenceTimeZoneSidKey; }
            set { SetField(ref __RecurrenceTimeZoneSidKey, value, "RecurrenceTimeZoneSidKey"); }
        }
        private PickTaskRecurrenceType __RecurrenceType;
        [EntityField(true)]
        public PickTaskRecurrenceType RecurrenceType
        {
            get { return __RecurrenceType; }
            set { SetField(ref __RecurrenceType, value, "RecurrenceType"); }
        }
        private System.Int32? __RecurrenceInterval;
        [EntityField(true)]
        public System.Int32? RecurrenceInterval
        {
            get { return __RecurrenceInterval; }
            set { SetField(ref __RecurrenceInterval, value, "RecurrenceInterval"); }
        }
        private System.Int32? __RecurrenceDayOfWeekMask;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfWeekMask
        {
            get { return __RecurrenceDayOfWeekMask; }
            set { SetField(ref __RecurrenceDayOfWeekMask, value, "RecurrenceDayOfWeekMask"); }
        }
        private System.Int32? __RecurrenceDayOfMonth;
        [EntityField(true)]
        public System.Int32? RecurrenceDayOfMonth
        {
            get { return __RecurrenceDayOfMonth; }
            set { SetField(ref __RecurrenceDayOfMonth, value, "RecurrenceDayOfMonth"); }
        }
        private PickTaskRecurrenceInstance __RecurrenceInstance;
        [EntityField(true)]
        public PickTaskRecurrenceInstance RecurrenceInstance
        {
            get { return __RecurrenceInstance; }
            set { SetField(ref __RecurrenceInstance, value, "RecurrenceInstance"); }
        }
        private PickTaskRecurrenceMonthOfYear __RecurrenceMonthOfYear;
        [EntityField(true)]
        public PickTaskRecurrenceMonthOfYear RecurrenceMonthOfYear
        {
            get { return __RecurrenceMonthOfYear; }
            set { SetField(ref __RecurrenceMonthOfYear, value, "RecurrenceMonthOfYear"); }
        }
        private PickTaskRecurrenceRegeneratedType __RecurrenceRegeneratedType;
        [EntityField(true)]
        public PickTaskRecurrenceRegeneratedType RecurrenceRegeneratedType
        {
            get { return __RecurrenceRegeneratedType; }
            set { SetField(ref __RecurrenceRegeneratedType, value, "RecurrenceRegeneratedType"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Task,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Task,Attachment> Attachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Task,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Task,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Task,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RecurrenceActivityId")]
        public RelationShip<Task,Task> RecurringTasks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Task,TaskFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("EntityId")]
        public RelationShip<Task,TopicAssignment> TopicAssignments
        {
            get;set;
        }
    }
    [EntityName("TaskFeed")]
    public class TaskFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private TaskFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TaskFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickTaskFeedType __Type;
        [EntityField(true)]
        public PickTaskFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<TaskFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<TaskFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<TaskFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("TaskPriority")]
    public class TaskPriority : ISalesforceEntity
    {
    [JsonConstructor]
        private TaskPriority(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TaskPriority()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __IsHighPriority;
        [EntityField(false)]
        public System.Boolean IsHighPriority
        {
            get { return __IsHighPriority; }
            set { SetField(ref __IsHighPriority, value, "IsHighPriority"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("TaskStatus")]
    public class TaskStatus : ISalesforceEntity
    {
    [JsonConstructor]
        private TaskStatus(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TaskStatus()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.Int32? __SortOrder;
        [EntityField(true)]
        public System.Int32? SortOrder
        {
            get { return __SortOrder; }
            set { SetField(ref __SortOrder, value, "SortOrder"); }
        }
        private System.Boolean __IsDefault;
        [EntityField(false)]
        public System.Boolean IsDefault
        {
            get { return __IsDefault; }
            set { SetField(ref __IsDefault, value, "IsDefault"); }
        }
        private System.Boolean __IsClosed;
        [EntityField(false)]
        public System.Boolean IsClosed
        {
            get { return __IsClosed; }
            set { SetField(ref __IsClosed, value, "IsClosed"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("TenantUsageEntitlement")]
    public class TenantUsageEntitlement : ISalesforceEntity
    {
    [JsonConstructor]
        private TenantUsageEntitlement(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TenantUsageEntitlement()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __ResourceGroupKey;
        [EntityField(false)]
        public System.String ResourceGroupKey
        {
            get { return __ResourceGroupKey; }
            set { SetField(ref __ResourceGroupKey, value, "ResourceGroupKey"); }
        }
        private System.String __Setting;
        [EntityField(false)]
        public System.String Setting
        {
            get { return __Setting; }
            set { SetField(ref __Setting, value, "Setting"); }
        }
        private System.DateTime __StartDate;
        [EntityField(false)]
        public System.DateTime StartDate
        {
            get { return __StartDate; }
            set { SetField(ref __StartDate, value, "StartDate"); }
        }
        private System.DateTime? __EndDate;
        [EntityField(true)]
        public System.DateTime? EndDate
        {
            get { return __EndDate; }
            set { SetField(ref __EndDate, value, "EndDate"); }
        }
        private System.Double __CurrentAmountAllowed;
        [EntityField(false)]
        public System.Double CurrentAmountAllowed
        {
            get { return __CurrentAmountAllowed; }
            set { SetField(ref __CurrentAmountAllowed, value, "CurrentAmountAllowed"); }
        }
        private PickTenantUsageEntitlementFrequency __Frequency;
        [EntityField(true)]
        public PickTenantUsageEntitlementFrequency Frequency
        {
            get { return __Frequency; }
            set { SetField(ref __Frequency, value, "Frequency"); }
        }
        private System.Boolean __IsPersistentResource;
        [EntityField(false)]
        public System.Boolean IsPersistentResource
        {
            get { return __IsPersistentResource; }
            set { SetField(ref __IsPersistentResource, value, "IsPersistentResource"); }
        }
        private System.Boolean __HasRollover;
        [EntityField(false)]
        public System.Boolean HasRollover
        {
            get { return __HasRollover; }
            set { SetField(ref __HasRollover, value, "HasRollover"); }
        }
        private System.String __OverageGrace;
        [EntityField(true)]
        public System.String OverageGrace
        {
            get { return __OverageGrace; }
            set { SetField(ref __OverageGrace, value, "OverageGrace"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
    }
    [EntityName("Topic")]
    public class Topic : ISalesforceEntity
    {
    [JsonConstructor]
        private Topic(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Topic()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.Int32 __TalkingAbout;
        [EntityField(false)]
        public System.Int32 TalkingAbout
        {
            get { return __TalkingAbout; }
            set { SetField(ref __TalkingAbout, value, "TalkingAbout"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<Topic,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Topic,CustomBrand> CustomBrands
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Topic,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<Topic,TopicFeed> Feeds
        {
            get;set;
        }
    }
    [EntityName("TopicAssignment")]
    public class TopicAssignment : ISalesforceEntity
    {
    [JsonConstructor]
        private TopicAssignment(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TopicAssignment()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __TopicId;
        [EntityField(false)]
        public System.String TopicId
        {
            get { return __TopicId; }
            set { SetField(ref __TopicId, value, "TopicId"); }
        }
        private System.String __EntityId;
        [EntityField(false)]
        public System.String EntityId
        {
            get { return __EntityId; }
            set { SetField(ref __EntityId, value, "EntityId"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("TopicFeed")]
    public class TopicFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private TopicFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public TopicFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickTopicFeedType __Type;
        [EntityField(true)]
        public PickTopicFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<TopicFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<TopicFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<TopicFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("UndecidedEventRelation")]
    public class UndecidedEventRelation : ISalesforceEntity
    {
    [JsonConstructor]
        private UndecidedEventRelation(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UndecidedEventRelation()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __RelationId;
        [EntityField(true)]
        public System.String RelationId
        {
            get { return __RelationId; }
            set { SetField(ref __RelationId, value, "RelationId"); }
        }
        private System.String __EventId;
        [EntityField(true)]
        public System.String EventId
        {
            get { return __EventId; }
            set { SetField(ref __EventId, value, "EventId"); }
        }
        private System.DateTime? __RespondedDate;
        [EntityField(true)]
        public System.DateTime? RespondedDate
        {
            get { return __RespondedDate; }
            set { SetField(ref __RespondedDate, value, "RespondedDate"); }
        }
        private System.String __Response;
        [EntityField(true)]
        public System.String Response
        {
            get { return __Response; }
            set { SetField(ref __Response, value, "Response"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __Type;
        [EntityField(true)]
        public System.String Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
    }
    [EntityName("User")]
    public class User : ISalesforceEntity
    {
    [JsonConstructor]
        private User(string hack)
        {
            trackPropertyUpdates = false;
        }

        public User()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Username;
        [EntityField(false)]
        public System.String Username
        {
            get { return __Username; }
            set { SetField(ref __Username, value, "Username"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __CompanyName;
        [EntityField(true)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __Division;
        [EntityField(true)]
        public System.String Division
        {
            get { return __Division; }
            set { SetField(ref __Division, value, "Division"); }
        }
        private System.String __Department;
        [EntityField(true)]
        public System.String Department
        {
            get { return __Department; }
            set { SetField(ref __Department, value, "Department"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.String __Email;
        [EntityField(false)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.Boolean __EmailPreferencesAutoBcc;
        [EntityField(false)]
        public System.Boolean EmailPreferencesAutoBcc
        {
            get { return __EmailPreferencesAutoBcc; }
            set { SetField(ref __EmailPreferencesAutoBcc, value, "EmailPreferencesAutoBcc"); }
        }
        private System.Boolean __EmailPreferencesAutoBccStayInTouch;
        [EntityField(false)]
        public System.Boolean EmailPreferencesAutoBccStayInTouch
        {
            get { return __EmailPreferencesAutoBccStayInTouch; }
            set { SetField(ref __EmailPreferencesAutoBccStayInTouch, value, "EmailPreferencesAutoBccStayInTouch"); }
        }
        private System.Boolean __EmailPreferencesStayInTouchReminder;
        [EntityField(false)]
        public System.Boolean EmailPreferencesStayInTouchReminder
        {
            get { return __EmailPreferencesStayInTouchReminder; }
            set { SetField(ref __EmailPreferencesStayInTouchReminder, value, "EmailPreferencesStayInTouchReminder"); }
        }
        private System.String __SenderEmail;
        [EntityField(true)]
        public System.String SenderEmail
        {
            get { return __SenderEmail; }
            set { SetField(ref __SenderEmail, value, "SenderEmail"); }
        }
        private System.String __SenderName;
        [EntityField(true)]
        public System.String SenderName
        {
            get { return __SenderName; }
            set { SetField(ref __SenderName, value, "SenderName"); }
        }
        private System.String __Signature;
        [EntityField(true)]
        public System.String Signature
        {
            get { return __Signature; }
            set { SetField(ref __Signature, value, "Signature"); }
        }
        private System.String __StayInTouchSubject;
        [EntityField(true)]
        public System.String StayInTouchSubject
        {
            get { return __StayInTouchSubject; }
            set { SetField(ref __StayInTouchSubject, value, "StayInTouchSubject"); }
        }
        private System.String __StayInTouchSignature;
        [EntityField(true)]
        public System.String StayInTouchSignature
        {
            get { return __StayInTouchSignature; }
            set { SetField(ref __StayInTouchSignature, value, "StayInTouchSignature"); }
        }
        private System.String __StayInTouchNote;
        [EntityField(true)]
        public System.String StayInTouchNote
        {
            get { return __StayInTouchNote; }
            set { SetField(ref __StayInTouchNote, value, "StayInTouchNote"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __Alias;
        [EntityField(false)]
        public System.String Alias
        {
            get { return __Alias; }
            set { SetField(ref __Alias, value, "Alias"); }
        }
        private System.String __CommunityNickname;
        [EntityField(false)]
        public System.String CommunityNickname
        {
            get { return __CommunityNickname; }
            set { SetField(ref __CommunityNickname, value, "CommunityNickname"); }
        }
        private System.Boolean __IsBadged;
        [EntityField(false)]
        public System.Boolean IsBadged
        {
            get { return __IsBadged; }
            set { SetField(ref __IsBadged, value, "IsBadged"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private PickUserTimeZoneSidKey __TimeZoneSidKey;
        [EntityField(false)]
        public PickUserTimeZoneSidKey TimeZoneSidKey
        {
            get { return __TimeZoneSidKey; }
            set { SetField(ref __TimeZoneSidKey, value, "TimeZoneSidKey"); }
        }
        private System.String __UserRoleId;
        [EntityField(true)]
        public System.String UserRoleId
        {
            get { return __UserRoleId; }
            set { SetField(ref __UserRoleId, value, "UserRoleId"); }
        }
        private PickUserLocaleSidKey __LocaleSidKey;
        [EntityField(false)]
        public PickUserLocaleSidKey LocaleSidKey
        {
            get { return __LocaleSidKey; }
            set { SetField(ref __LocaleSidKey, value, "LocaleSidKey"); }
        }
        private System.Boolean __ReceivesInfoEmails;
        [EntityField(false)]
        public System.Boolean ReceivesInfoEmails
        {
            get { return __ReceivesInfoEmails; }
            set { SetField(ref __ReceivesInfoEmails, value, "ReceivesInfoEmails"); }
        }
        private System.Boolean __ReceivesAdminInfoEmails;
        [EntityField(false)]
        public System.Boolean ReceivesAdminInfoEmails
        {
            get { return __ReceivesAdminInfoEmails; }
            set { SetField(ref __ReceivesAdminInfoEmails, value, "ReceivesAdminInfoEmails"); }
        }
        private PickUserEmailEncodingKey __EmailEncodingKey;
        [EntityField(false)]
        public PickUserEmailEncodingKey EmailEncodingKey
        {
            get { return __EmailEncodingKey; }
            set { SetField(ref __EmailEncodingKey, value, "EmailEncodingKey"); }
        }
        private System.String __ProfileId;
        [EntityField(false)]
        public System.String ProfileId
        {
            get { return __ProfileId; }
            set { SetField(ref __ProfileId, value, "ProfileId"); }
        }
        private PickUserUserType __UserType;
        [EntityField(true)]
        public PickUserUserType UserType
        {
            get { return __UserType; }
            set { SetField(ref __UserType, value, "UserType"); }
        }
        private PickUserLanguageLocaleKey __LanguageLocaleKey;
        [EntityField(false)]
        public PickUserLanguageLocaleKey LanguageLocaleKey
        {
            get { return __LanguageLocaleKey; }
            set { SetField(ref __LanguageLocaleKey, value, "LanguageLocaleKey"); }
        }
        private System.String __EmployeeNumber;
        [EntityField(true)]
        public System.String EmployeeNumber
        {
            get { return __EmployeeNumber; }
            set { SetField(ref __EmployeeNumber, value, "EmployeeNumber"); }
        }
        private System.String __DelegatedApproverId;
        [EntityField(true)]
        public System.String DelegatedApproverId
        {
            get { return __DelegatedApproverId; }
            set { SetField(ref __DelegatedApproverId, value, "DelegatedApproverId"); }
        }
        private System.String __ManagerId;
        [EntityField(true)]
        public System.String ManagerId
        {
            get { return __ManagerId; }
            set { SetField(ref __ManagerId, value, "ManagerId"); }
        }
        private System.DateTime? __LastLoginDate;
        [EntityField(true)]
        public System.DateTime? LastLoginDate
        {
            get { return __LastLoginDate; }
            set { SetField(ref __LastLoginDate, value, "LastLoginDate"); }
        }
        private System.DateTime? __LastPasswordChangeDate;
        [EntityField(true)]
        public System.DateTime? LastPasswordChangeDate
        {
            get { return __LastPasswordChangeDate; }
            set { SetField(ref __LastPasswordChangeDate, value, "LastPasswordChangeDate"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.DateTime? __OfflineTrialExpirationDate;
        [EntityField(true)]
        public System.DateTime? OfflineTrialExpirationDate
        {
            get { return __OfflineTrialExpirationDate; }
            set { SetField(ref __OfflineTrialExpirationDate, value, "OfflineTrialExpirationDate"); }
        }
        private System.DateTime? __OfflinePdaTrialExpirationDate;
        [EntityField(true)]
        public System.DateTime? OfflinePdaTrialExpirationDate
        {
            get { return __OfflinePdaTrialExpirationDate; }
            set { SetField(ref __OfflinePdaTrialExpirationDate, value, "OfflinePdaTrialExpirationDate"); }
        }
        private System.Boolean __UserPermissionsMarketingUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsMarketingUser
        {
            get { return __UserPermissionsMarketingUser; }
            set { SetField(ref __UserPermissionsMarketingUser, value, "UserPermissionsMarketingUser"); }
        }
        private System.Boolean __UserPermissionsOfflineUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsOfflineUser
        {
            get { return __UserPermissionsOfflineUser; }
            set { SetField(ref __UserPermissionsOfflineUser, value, "UserPermissionsOfflineUser"); }
        }
        private System.Boolean __UserPermissionsCallCenterAutoLogin;
        [EntityField(false)]
        public System.Boolean UserPermissionsCallCenterAutoLogin
        {
            get { return __UserPermissionsCallCenterAutoLogin; }
            set { SetField(ref __UserPermissionsCallCenterAutoLogin, value, "UserPermissionsCallCenterAutoLogin"); }
        }
        private System.Boolean __UserPermissionsMobileUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsMobileUser
        {
            get { return __UserPermissionsMobileUser; }
            set { SetField(ref __UserPermissionsMobileUser, value, "UserPermissionsMobileUser"); }
        }
        private System.Boolean __UserPermissionsSFContentUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsSFContentUser
        {
            get { return __UserPermissionsSFContentUser; }
            set { SetField(ref __UserPermissionsSFContentUser, value, "UserPermissionsSFContentUser"); }
        }
        private System.Boolean __UserPermissionsKnowledgeUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsKnowledgeUser
        {
            get { return __UserPermissionsKnowledgeUser; }
            set { SetField(ref __UserPermissionsKnowledgeUser, value, "UserPermissionsKnowledgeUser"); }
        }
        private System.Boolean __UserPermissionsInteractionUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsInteractionUser
        {
            get { return __UserPermissionsInteractionUser; }
            set { SetField(ref __UserPermissionsInteractionUser, value, "UserPermissionsInteractionUser"); }
        }
        private System.Boolean __UserPermissionsSupportUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsSupportUser
        {
            get { return __UserPermissionsSupportUser; }
            set { SetField(ref __UserPermissionsSupportUser, value, "UserPermissionsSupportUser"); }
        }
        private System.Boolean __UserPermissionsJigsawProspectingUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsJigsawProspectingUser
        {
            get { return __UserPermissionsJigsawProspectingUser; }
            set { SetField(ref __UserPermissionsJigsawProspectingUser, value, "UserPermissionsJigsawProspectingUser"); }
        }
        private System.Boolean __UserPermissionsSiteforceContributorUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsSiteforceContributorUser
        {
            get { return __UserPermissionsSiteforceContributorUser; }
            set { SetField(ref __UserPermissionsSiteforceContributorUser, value, "UserPermissionsSiteforceContributorUser"); }
        }
        private System.Boolean __UserPermissionsSiteforcePublisherUser;
        [EntityField(false)]
        public System.Boolean UserPermissionsSiteforcePublisherUser
        {
            get { return __UserPermissionsSiteforcePublisherUser; }
            set { SetField(ref __UserPermissionsSiteforcePublisherUser, value, "UserPermissionsSiteforcePublisherUser"); }
        }
        private System.Boolean __UserPermissionsWorkDotComUserFeature;
        [EntityField(false)]
        public System.Boolean UserPermissionsWorkDotComUserFeature
        {
            get { return __UserPermissionsWorkDotComUserFeature; }
            set { SetField(ref __UserPermissionsWorkDotComUserFeature, value, "UserPermissionsWorkDotComUserFeature"); }
        }
        private System.Boolean __ForecastEnabled;
        [EntityField(false)]
        public System.Boolean ForecastEnabled
        {
            get { return __ForecastEnabled; }
            set { SetField(ref __ForecastEnabled, value, "ForecastEnabled"); }
        }
        private System.Boolean __UserPreferencesActivityRemindersPopup;
        [EntityField(false)]
        public System.Boolean UserPreferencesActivityRemindersPopup
        {
            get { return __UserPreferencesActivityRemindersPopup; }
            set { SetField(ref __UserPreferencesActivityRemindersPopup, value, "UserPreferencesActivityRemindersPopup"); }
        }
        private System.Boolean __UserPreferencesEventRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesEventRemindersCheckboxDefault
        {
            get { return __UserPreferencesEventRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesEventRemindersCheckboxDefault, value, "UserPreferencesEventRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesTaskRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesTaskRemindersCheckboxDefault
        {
            get { return __UserPreferencesTaskRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesTaskRemindersCheckboxDefault, value, "UserPreferencesTaskRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesReminderSoundOff;
        [EntityField(false)]
        public System.Boolean UserPreferencesReminderSoundOff
        {
            get { return __UserPreferencesReminderSoundOff; }
            set { SetField(ref __UserPreferencesReminderSoundOff, value, "UserPreferencesReminderSoundOff"); }
        }
        private System.Boolean __UserPreferencesDisableAllFeedsEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableAllFeedsEmail
        {
            get { return __UserPreferencesDisableAllFeedsEmail; }
            set { SetField(ref __UserPreferencesDisableAllFeedsEmail, value, "UserPreferencesDisableAllFeedsEmail"); }
        }
        private System.Boolean __UserPreferencesDisableFollowersEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFollowersEmail
        {
            get { return __UserPreferencesDisableFollowersEmail; }
            set { SetField(ref __UserPreferencesDisableFollowersEmail, value, "UserPreferencesDisableFollowersEmail"); }
        }
        private System.Boolean __UserPreferencesDisableProfilePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableProfilePostEmail
        {
            get { return __UserPreferencesDisableProfilePostEmail; }
            set { SetField(ref __UserPreferencesDisableProfilePostEmail, value, "UserPreferencesDisableProfilePostEmail"); }
        }
        private System.Boolean __UserPreferencesDisableChangeCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableChangeCommentEmail
        {
            get { return __UserPreferencesDisableChangeCommentEmail; }
            set { SetField(ref __UserPreferencesDisableChangeCommentEmail, value, "UserPreferencesDisableChangeCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLaterCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLaterCommentEmail
        {
            get { return __UserPreferencesDisableLaterCommentEmail; }
            set { SetField(ref __UserPreferencesDisableLaterCommentEmail, value, "UserPreferencesDisableLaterCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisProfPostCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisProfPostCommentEmail
        {
            get { return __UserPreferencesDisProfPostCommentEmail; }
            set { SetField(ref __UserPreferencesDisProfPostCommentEmail, value, "UserPreferencesDisProfPostCommentEmail"); }
        }
        private System.Boolean __UserPreferencesContentNoEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentNoEmail
        {
            get { return __UserPreferencesContentNoEmail; }
            set { SetField(ref __UserPreferencesContentNoEmail, value, "UserPreferencesContentNoEmail"); }
        }
        private System.Boolean __UserPreferencesContentEmailAsAndWhen;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentEmailAsAndWhen
        {
            get { return __UserPreferencesContentEmailAsAndWhen; }
            set { SetField(ref __UserPreferencesContentEmailAsAndWhen, value, "UserPreferencesContentEmailAsAndWhen"); }
        }
        private System.Boolean __UserPreferencesApexPagesDeveloperMode;
        [EntityField(false)]
        public System.Boolean UserPreferencesApexPagesDeveloperMode
        {
            get { return __UserPreferencesApexPagesDeveloperMode; }
            set { SetField(ref __UserPreferencesApexPagesDeveloperMode, value, "UserPreferencesApexPagesDeveloperMode"); }
        }
        private System.Boolean __UserPreferencesHideCSNGetChatterMobileTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNGetChatterMobileTask
        {
            get { return __UserPreferencesHideCSNGetChatterMobileTask; }
            set { SetField(ref __UserPreferencesHideCSNGetChatterMobileTask, value, "UserPreferencesHideCSNGetChatterMobileTask"); }
        }
        private System.Boolean __UserPreferencesDisableMentionsPostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMentionsPostEmail
        {
            get { return __UserPreferencesDisableMentionsPostEmail; }
            set { SetField(ref __UserPreferencesDisableMentionsPostEmail, value, "UserPreferencesDisableMentionsPostEmail"); }
        }
        private System.Boolean __UserPreferencesDisMentionsCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisMentionsCommentEmail
        {
            get { return __UserPreferencesDisMentionsCommentEmail; }
            set { SetField(ref __UserPreferencesDisMentionsCommentEmail, value, "UserPreferencesDisMentionsCommentEmail"); }
        }
        private System.Boolean __UserPreferencesHideCSNDesktopTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNDesktopTask
        {
            get { return __UserPreferencesHideCSNDesktopTask; }
            set { SetField(ref __UserPreferencesHideCSNDesktopTask, value, "UserPreferencesHideCSNDesktopTask"); }
        }
        private System.Boolean __UserPreferencesHideChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideChatterOnboardingSplash
        {
            get { return __UserPreferencesHideChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideChatterOnboardingSplash, value, "UserPreferencesHideChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesHideSecondChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideSecondChatterOnboardingSplash
        {
            get { return __UserPreferencesHideSecondChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideSecondChatterOnboardingSplash, value, "UserPreferencesHideSecondChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesDisCommentAfterLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisCommentAfterLikeEmail
        {
            get { return __UserPreferencesDisCommentAfterLikeEmail; }
            set { SetField(ref __UserPreferencesDisCommentAfterLikeEmail, value, "UserPreferencesDisCommentAfterLikeEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLikeEmail
        {
            get { return __UserPreferencesDisableLikeEmail; }
            set { SetField(ref __UserPreferencesDisableLikeEmail, value, "UserPreferencesDisableLikeEmail"); }
        }
        private System.Boolean __UserPreferencesSortFeedByComment;
        [EntityField(false)]
        public System.Boolean UserPreferencesSortFeedByComment
        {
            get { return __UserPreferencesSortFeedByComment; }
            set { SetField(ref __UserPreferencesSortFeedByComment, value, "UserPreferencesSortFeedByComment"); }
        }
        private System.Boolean __UserPreferencesDisableMessageEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMessageEmail
        {
            get { return __UserPreferencesDisableMessageEmail; }
            set { SetField(ref __UserPreferencesDisableMessageEmail, value, "UserPreferencesDisableMessageEmail"); }
        }
        private System.Boolean __UserPreferencesJigsawListUser;
        [EntityField(false)]
        public System.Boolean UserPreferencesJigsawListUser
        {
            get { return __UserPreferencesJigsawListUser; }
            set { SetField(ref __UserPreferencesJigsawListUser, value, "UserPreferencesJigsawListUser"); }
        }
        private System.Boolean __UserPreferencesDisableBookmarkEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableBookmarkEmail
        {
            get { return __UserPreferencesDisableBookmarkEmail; }
            set { SetField(ref __UserPreferencesDisableBookmarkEmail, value, "UserPreferencesDisableBookmarkEmail"); }
        }
        private System.Boolean __UserPreferencesDisableSharePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableSharePostEmail
        {
            get { return __UserPreferencesDisableSharePostEmail; }
            set { SetField(ref __UserPreferencesDisableSharePostEmail, value, "UserPreferencesDisableSharePostEmail"); }
        }
        private System.Boolean __UserPreferencesEnableAutoSubForFeeds;
        [EntityField(false)]
        public System.Boolean UserPreferencesEnableAutoSubForFeeds
        {
            get { return __UserPreferencesEnableAutoSubForFeeds; }
            set { SetField(ref __UserPreferencesEnableAutoSubForFeeds, value, "UserPreferencesEnableAutoSubForFeeds"); }
        }
        private System.Boolean __UserPreferencesDisableFileShareNotificationsForApi;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFileShareNotificationsForApi
        {
            get { return __UserPreferencesDisableFileShareNotificationsForApi; }
            set { SetField(ref __UserPreferencesDisableFileShareNotificationsForApi, value, "UserPreferencesDisableFileShareNotificationsForApi"); }
        }
        private System.Boolean __UserPreferencesShowTitleToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToExternalUsers
        {
            get { return __UserPreferencesShowTitleToExternalUsers; }
            set { SetField(ref __UserPreferencesShowTitleToExternalUsers, value, "UserPreferencesShowTitleToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowManagerToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowManagerToExternalUsers
        {
            get { return __UserPreferencesShowManagerToExternalUsers; }
            set { SetField(ref __UserPreferencesShowManagerToExternalUsers, value, "UserPreferencesShowManagerToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowEmailToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowEmailToExternalUsers
        {
            get { return __UserPreferencesShowEmailToExternalUsers; }
            set { SetField(ref __UserPreferencesShowEmailToExternalUsers, value, "UserPreferencesShowEmailToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowWorkPhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowWorkPhoneToExternalUsers
        {
            get { return __UserPreferencesShowWorkPhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowWorkPhoneToExternalUsers, value, "UserPreferencesShowWorkPhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowMobilePhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowMobilePhoneToExternalUsers
        {
            get { return __UserPreferencesShowMobilePhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowMobilePhoneToExternalUsers, value, "UserPreferencesShowMobilePhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowFaxToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowFaxToExternalUsers
        {
            get { return __UserPreferencesShowFaxToExternalUsers; }
            set { SetField(ref __UserPreferencesShowFaxToExternalUsers, value, "UserPreferencesShowFaxToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStreetAddressToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStreetAddressToExternalUsers
        {
            get { return __UserPreferencesShowStreetAddressToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStreetAddressToExternalUsers, value, "UserPreferencesShowStreetAddressToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToExternalUsers
        {
            get { return __UserPreferencesShowCityToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCityToExternalUsers, value, "UserPreferencesShowCityToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToExternalUsers
        {
            get { return __UserPreferencesShowStateToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStateToExternalUsers, value, "UserPreferencesShowStateToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToExternalUsers
        {
            get { return __UserPreferencesShowPostalCodeToExternalUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToExternalUsers, value, "UserPreferencesShowPostalCodeToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToExternalUsers
        {
            get { return __UserPreferencesShowCountryToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCountryToExternalUsers, value, "UserPreferencesShowCountryToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowProfilePicToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowProfilePicToGuestUsers
        {
            get { return __UserPreferencesShowProfilePicToGuestUsers; }
            set { SetField(ref __UserPreferencesShowProfilePicToGuestUsers, value, "UserPreferencesShowProfilePicToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowTitleToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToGuestUsers
        {
            get { return __UserPreferencesShowTitleToGuestUsers; }
            set { SetField(ref __UserPreferencesShowTitleToGuestUsers, value, "UserPreferencesShowTitleToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToGuestUsers
        {
            get { return __UserPreferencesShowCityToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCityToGuestUsers, value, "UserPreferencesShowCityToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToGuestUsers
        {
            get { return __UserPreferencesShowStateToGuestUsers; }
            set { SetField(ref __UserPreferencesShowStateToGuestUsers, value, "UserPreferencesShowStateToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToGuestUsers
        {
            get { return __UserPreferencesShowPostalCodeToGuestUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToGuestUsers, value, "UserPreferencesShowPostalCodeToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToGuestUsers
        {
            get { return __UserPreferencesShowCountryToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCountryToGuestUsers, value, "UserPreferencesShowCountryToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesDisableFeedbackEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFeedbackEmail
        {
            get { return __UserPreferencesDisableFeedbackEmail; }
            set { SetField(ref __UserPreferencesDisableFeedbackEmail, value, "UserPreferencesDisableFeedbackEmail"); }
        }
        private System.Boolean __UserPreferencesDisableWorkEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableWorkEmail
        {
            get { return __UserPreferencesDisableWorkEmail; }
            set { SetField(ref __UserPreferencesDisableWorkEmail, value, "UserPreferencesDisableWorkEmail"); }
        }
        private System.Boolean __UserPreferencesHideS1BrowserUI;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideS1BrowserUI
        {
            get { return __UserPreferencesHideS1BrowserUI; }
            set { SetField(ref __UserPreferencesHideS1BrowserUI, value, "UserPreferencesHideS1BrowserUI"); }
        }
        private System.Boolean __UserPreferencesDisableEndorsementEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableEndorsementEmail
        {
            get { return __UserPreferencesDisableEndorsementEmail; }
            set { SetField(ref __UserPreferencesDisableEndorsementEmail, value, "UserPreferencesDisableEndorsementEmail"); }
        }
        private System.Boolean __UserPreferencesLightningExperiencePreferred;
        [EntityField(false)]
        public System.Boolean UserPreferencesLightningExperiencePreferred
        {
            get { return __UserPreferencesLightningExperiencePreferred; }
            set { SetField(ref __UserPreferencesLightningExperiencePreferred, value, "UserPreferencesLightningExperiencePreferred"); }
        }
        private System.String __ContactId;
        [EntityField(true)]
        public System.String ContactId
        {
            get { return __ContactId; }
            set { SetField(ref __ContactId, value, "ContactId"); }
        }
        private System.String __AccountId;
        [EntityField(true)]
        public System.String AccountId
        {
            get { return __AccountId; }
            set { SetField(ref __AccountId, value, "AccountId"); }
        }
        private System.String __CallCenterId;
        [EntityField(true)]
        public System.String CallCenterId
        {
            get { return __CallCenterId; }
            set { SetField(ref __CallCenterId, value, "CallCenterId"); }
        }
        private System.String __Extension;
        [EntityField(true)]
        public System.String Extension
        {
            get { return __Extension; }
            set { SetField(ref __Extension, value, "Extension"); }
        }
        private System.String __FederationIdentifier;
        [EntityField(true)]
        public System.String FederationIdentifier
        {
            get { return __FederationIdentifier; }
            set { SetField(ref __FederationIdentifier, value, "FederationIdentifier"); }
        }
        private System.String __AboutMe;
        [EntityField(true)]
        public System.String AboutMe
        {
            get { return __AboutMe; }
            set { SetField(ref __AboutMe, value, "AboutMe"); }
        }
        private System.String __FullPhotoUrl;
        [EntityField(true)]
        public System.String FullPhotoUrl
        {
            get { return __FullPhotoUrl; }
            set { SetField(ref __FullPhotoUrl, value, "FullPhotoUrl"); }
        }
        private System.String __SmallPhotoUrl;
        [EntityField(true)]
        public System.String SmallPhotoUrl
        {
            get { return __SmallPhotoUrl; }
            set { SetField(ref __SmallPhotoUrl, value, "SmallPhotoUrl"); }
        }
        private PickUserDigestFrequency __DigestFrequency;
        [EntityField(false)]
        public PickUserDigestFrequency DigestFrequency
        {
            get { return __DigestFrequency; }
            set { SetField(ref __DigestFrequency, value, "DigestFrequency"); }
        }
        private PickUserDefaultGroupNotificationFrequency __DefaultGroupNotificationFrequency;
        [EntityField(false)]
        public PickUserDefaultGroupNotificationFrequency DefaultGroupNotificationFrequency
        {
            get { return __DefaultGroupNotificationFrequency; }
            set { SetField(ref __DefaultGroupNotificationFrequency, value, "DefaultGroupNotificationFrequency"); }
        }
        private System.Int32? __JigsawImportLimitOverride;
        [EntityField(true)]
        public System.Int32? JigsawImportLimitOverride
        {
            get { return __JigsawImportLimitOverride; }
            set { SetField(ref __JigsawImportLimitOverride, value, "JigsawImportLimitOverride"); }
        }
        private System.DateTime? __LastViewedDate;
        [EntityField(true)]
        public System.DateTime? LastViewedDate
        {
            get { return __LastViewedDate; }
            set { SetField(ref __LastViewedDate, value, "LastViewedDate"); }
        }
        private System.DateTime? __LastReferencedDate;
        [EntityField(true)]
        public System.DateTime? LastReferencedDate
        {
            get { return __LastReferencedDate; }
            set { SetField(ref __LastReferencedDate, value, "LastReferencedDate"); }
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<User,AcceptedEventRelation> AcceptedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LastStatusChangedById")]
        public RelationShip<User,AccountCleanInfo> AccountCleanInfoReviewers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<User,AttachedContentDocument> AttachedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("MemberId")]
        public RelationShip<User,CollaborationGroupMember> GroupMemberships
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RequesterId")]
        public RelationShip<User,CollaborationGroupMemberRequest> GroupMembershipRequests
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<User,CombinedAttachment> CombinedAttachments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LastStatusChangedById")]
        public RelationShip<User,ContactCleanInfo> ContactCleanInfoReviewers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LinkedEntityId")]
        public RelationShip<User,ContentDocumentLink> ContentDocumentLinks
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("CompanySignedId")]
        public RelationShip<User,Contract> ContractsSigned
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<User,DeclinedEventRelation> DeclinedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<User,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("SubscriberId")]
        public RelationShip<User,EntitySubscription> FeedSubscriptions
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<User,EventRelation> EventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("UserId")]
        public RelationShip<User,ExternalDataUserAuth> ExternalDataUserAuths
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("UserId")]
        public RelationShip<User,InstalledMobileApp> InstalledMobileApps
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("LastStatusChangedById")]
        public RelationShip<User,LeadCleanInfo> LeadCleanInfoReviewers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OwnerId")]
        public RelationShip<User,OwnedContentDocument> OwnedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AssigneeId")]
        public RelationShip<User,PermissionSetAssignment> PermissionSetAssignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AssigneeId")]
        public RelationShip<User,PermissionSetLicenseAssign> PermissionSetLicenseAssignments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("AdminId")]
        public RelationShip<User,Site> UserSites
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("RelationId")]
        public RelationShip<User,UndecidedEventRelation> UndecidedEventRelations
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("DelegatedApproverId")]
        public RelationShip<User,User> DelegatedUsers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ManagerId")]
        public RelationShip<User,User> ManagedUsers
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<User,UserFeed> Feeds
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("UserId")]
        public RelationShip<User,UserPreference> UserPreferences
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("UserId")]
        public RelationShip<User,UserShare> Shares
        {
            get;set;
        }
    }
    [EntityName("UserFeed")]
    public class UserFeed : ISalesforceEntity
    {
    [JsonConstructor]
        private UserFeed(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserFeed()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickUserFeedType __Type;
        [EntityField(true)]
        public PickUserFeedType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.Int32 __CommentCount;
        [EntityField(false)]
        public System.Int32 CommentCount
        {
            get { return __CommentCount; }
            set { SetField(ref __CommentCount, value, "CommentCount"); }
        }
        private System.Int32 __LikeCount;
        [EntityField(false)]
        public System.Int32 LikeCount
        {
            get { return __LikeCount; }
            set { SetField(ref __LikeCount, value, "LikeCount"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __Body;
        [EntityField(true)]
        public System.String Body
        {
            get { return __Body; }
            set { SetField(ref __Body, value, "Body"); }
        }
        private System.String __LinkUrl;
        [EntityField(true)]
        public System.String LinkUrl
        {
            get { return __LinkUrl; }
            set { SetField(ref __LinkUrl, value, "LinkUrl"); }
        }
        private System.String __RelatedRecordId;
        [EntityField(true)]
        public System.String RelatedRecordId
        {
            get { return __RelatedRecordId; }
            set { SetField(ref __RelatedRecordId, value, "RelatedRecordId"); }
        }
        private System.String __ContentData;
        [EntityField(true)]
        public System.String ContentData
        {
            get { return __ContentData; }
            set { SetField(ref __ContentData, value, "ContentData"); }
        }
        private System.String __ContentFileName;
        [EntityField(true)]
        public System.String ContentFileName
        {
            get { return __ContentFileName; }
            set { SetField(ref __ContentFileName, value, "ContentFileName"); }
        }
        private System.String __ContentDescription;
        [EntityField(true)]
        public System.String ContentDescription
        {
            get { return __ContentDescription; }
            set { SetField(ref __ContentDescription, value, "ContentDescription"); }
        }
        private System.String __ContentType;
        [EntityField(true)]
        public System.String ContentType
        {
            get { return __ContentType; }
            set { SetField(ref __ContentType, value, "ContentType"); }
        }
        private System.Int32? __ContentSize;
        [EntityField(true)]
        public System.Int32? ContentSize
        {
            get { return __ContentSize; }
            set { SetField(ref __ContentSize, value, "ContentSize"); }
        }
        private System.String __InsertedById;
        [EntityField(true)]
        public System.String InsertedById
        {
            get { return __InsertedById; }
            set { SetField(ref __InsertedById, value, "InsertedById"); }
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<UserFeed,FeedComment> FeedComments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<UserFeed,FeedLike> FeedLikes
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("FeedItemId")]
        public RelationShip<UserFeed,FeedTrackedChange> FeedTrackedChanges
        {
            get;set;
        }
    }
    [EntityName("UserLicense")]
    public class UserLicense : ISalesforceEntity
    {
    [JsonConstructor]
        private UserLicense(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserLicense()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __LicenseDefinitionKey;
        [EntityField(false)]
        public System.String LicenseDefinitionKey
        {
            get { return __LicenseDefinitionKey; }
            set { SetField(ref __LicenseDefinitionKey, value, "LicenseDefinitionKey"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Int32? __MonthlyLoginsUsed;
        [EntityField(true)]
        public System.Int32? MonthlyLoginsUsed
        {
            get { return __MonthlyLoginsUsed; }
            set { SetField(ref __MonthlyLoginsUsed, value, "MonthlyLoginsUsed"); }
        }
        private System.Int32? __MonthlyLoginsEntitlement;
        [EntityField(true)]
        public System.Int32? MonthlyLoginsEntitlement
        {
            get { return __MonthlyLoginsEntitlement; }
            set { SetField(ref __MonthlyLoginsEntitlement, value, "MonthlyLoginsEntitlement"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("UserLogin")]
    public class UserLogin : ISalesforceEntity
    {
    [JsonConstructor]
        private UserLogin(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserLogin()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserId;
        [EntityField(true)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private System.Boolean __IsFrozen;
        [EntityField(false)]
        public System.Boolean IsFrozen
        {
            get { return __IsFrozen; }
            set { SetField(ref __IsFrozen, value, "IsFrozen"); }
        }
        private System.Boolean __IsPasswordLocked;
        [EntityField(false)]
        public System.Boolean IsPasswordLocked
        {
            get { return __IsPasswordLocked; }
            set { SetField(ref __IsPasswordLocked, value, "IsPasswordLocked"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
    }
    [EntityName("UserPreference")]
    public class UserPreference : ISalesforceEntity
    {
    [JsonConstructor]
        private UserPreference(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserPreference()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private PickUserPreferencePreference __Preference;
        [EntityField(false)]
        public PickUserPreferencePreference Preference
        {
            get { return __Preference; }
            set { SetField(ref __Preference, value, "Preference"); }
        }
        private System.String __Value;
        [EntityField(true)]
        public System.String Value
        {
            get { return __Value; }
            set { SetField(ref __Value, value, "Value"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("UserProfile")]
    public class UserProfile : ISalesforceEntity
    {
    [JsonConstructor]
        private UserProfile(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserProfile()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __LastName;
        [EntityField(false)]
        public System.String LastName
        {
            get { return __LastName; }
            set { SetField(ref __LastName, value, "LastName"); }
        }
        private System.String __FirstName;
        [EntityField(true)]
        public System.String FirstName
        {
            get { return __FirstName; }
            set { SetField(ref __FirstName, value, "FirstName"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __Title;
        [EntityField(true)]
        public System.String Title
        {
            get { return __Title; }
            set { SetField(ref __Title, value, "Title"); }
        }
        private System.String __ManagerId;
        [EntityField(true)]
        public System.String ManagerId
        {
            get { return __ManagerId; }
            set { SetField(ref __ManagerId, value, "ManagerId"); }
        }
        private System.String __CompanyName;
        [EntityField(true)]
        public System.String CompanyName
        {
            get { return __CompanyName; }
            set { SetField(ref __CompanyName, value, "CompanyName"); }
        }
        private System.String __AboutMe;
        [EntityField(true)]
        public System.String AboutMe
        {
            get { return __AboutMe; }
            set { SetField(ref __AboutMe, value, "AboutMe"); }
        }
        private System.String __Email;
        [EntityField(false)]
        public System.String Email
        {
            get { return __Email; }
            set { SetField(ref __Email, value, "Email"); }
        }
        private System.String __Phone;
        [EntityField(true)]
        public System.String Phone
        {
            get { return __Phone; }
            set { SetField(ref __Phone, value, "Phone"); }
        }
        private System.String __MobilePhone;
        [EntityField(true)]
        public System.String MobilePhone
        {
            get { return __MobilePhone; }
            set { SetField(ref __MobilePhone, value, "MobilePhone"); }
        }
        private System.String __Fax;
        [EntityField(true)]
        public System.String Fax
        {
            get { return __Fax; }
            set { SetField(ref __Fax, value, "Fax"); }
        }
        private System.String __Street;
        [EntityField(true)]
        public System.String Street
        {
            get { return __Street; }
            set { SetField(ref __Street, value, "Street"); }
        }
        private System.String __City;
        [EntityField(true)]
        public System.String City
        {
            get { return __City; }
            set { SetField(ref __City, value, "City"); }
        }
        private System.String __State;
        [EntityField(true)]
        public System.String State
        {
            get { return __State; }
            set { SetField(ref __State, value, "State"); }
        }
        private System.String __PostalCode;
        [EntityField(true)]
        public System.String PostalCode
        {
            get { return __PostalCode; }
            set { SetField(ref __PostalCode, value, "PostalCode"); }
        }
        private System.String __Country;
        [EntityField(true)]
        public System.String Country
        {
            get { return __Country; }
            set { SetField(ref __Country, value, "Country"); }
        }
        private System.Double? __Latitude;
        [EntityField(true)]
        public System.Double? Latitude
        {
            get { return __Latitude; }
            set { SetField(ref __Latitude, value, "Latitude"); }
        }
        private System.Double? __Longitude;
        [EntityField(true)]
        public System.Double? Longitude
        {
            get { return __Longitude; }
            set { SetField(ref __Longitude, value, "Longitude"); }
        }
        private LinqToSalesforce.BuiltinTypes.Address __Address;
        [EntityField(true)]
        public LinqToSalesforce.BuiltinTypes.Address Address
        {
            get { return __Address; }
            set { SetField(ref __Address, value, "Address"); }
        }
        private System.Boolean __IsBadged;
        [EntityField(false)]
        public System.Boolean IsBadged
        {
            get { return __IsBadged; }
            set { SetField(ref __IsBadged, value, "IsBadged"); }
        }
        private System.String __BadgeText;
        [EntityField(true)]
        public System.String BadgeText
        {
            get { return __BadgeText; }
            set { SetField(ref __BadgeText, value, "BadgeText"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
        private System.Boolean __UserPreferencesActivityRemindersPopup;
        [EntityField(false)]
        public System.Boolean UserPreferencesActivityRemindersPopup
        {
            get { return __UserPreferencesActivityRemindersPopup; }
            set { SetField(ref __UserPreferencesActivityRemindersPopup, value, "UserPreferencesActivityRemindersPopup"); }
        }
        private System.Boolean __UserPreferencesEventRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesEventRemindersCheckboxDefault
        {
            get { return __UserPreferencesEventRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesEventRemindersCheckboxDefault, value, "UserPreferencesEventRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesTaskRemindersCheckboxDefault;
        [EntityField(false)]
        public System.Boolean UserPreferencesTaskRemindersCheckboxDefault
        {
            get { return __UserPreferencesTaskRemindersCheckboxDefault; }
            set { SetField(ref __UserPreferencesTaskRemindersCheckboxDefault, value, "UserPreferencesTaskRemindersCheckboxDefault"); }
        }
        private System.Boolean __UserPreferencesReminderSoundOff;
        [EntityField(false)]
        public System.Boolean UserPreferencesReminderSoundOff
        {
            get { return __UserPreferencesReminderSoundOff; }
            set { SetField(ref __UserPreferencesReminderSoundOff, value, "UserPreferencesReminderSoundOff"); }
        }
        private System.Boolean __UserPreferencesDisableAllFeedsEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableAllFeedsEmail
        {
            get { return __UserPreferencesDisableAllFeedsEmail; }
            set { SetField(ref __UserPreferencesDisableAllFeedsEmail, value, "UserPreferencesDisableAllFeedsEmail"); }
        }
        private System.Boolean __UserPreferencesDisableFollowersEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFollowersEmail
        {
            get { return __UserPreferencesDisableFollowersEmail; }
            set { SetField(ref __UserPreferencesDisableFollowersEmail, value, "UserPreferencesDisableFollowersEmail"); }
        }
        private System.Boolean __UserPreferencesDisableProfilePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableProfilePostEmail
        {
            get { return __UserPreferencesDisableProfilePostEmail; }
            set { SetField(ref __UserPreferencesDisableProfilePostEmail, value, "UserPreferencesDisableProfilePostEmail"); }
        }
        private System.Boolean __UserPreferencesDisableChangeCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableChangeCommentEmail
        {
            get { return __UserPreferencesDisableChangeCommentEmail; }
            set { SetField(ref __UserPreferencesDisableChangeCommentEmail, value, "UserPreferencesDisableChangeCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLaterCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLaterCommentEmail
        {
            get { return __UserPreferencesDisableLaterCommentEmail; }
            set { SetField(ref __UserPreferencesDisableLaterCommentEmail, value, "UserPreferencesDisableLaterCommentEmail"); }
        }
        private System.Boolean __UserPreferencesDisProfPostCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisProfPostCommentEmail
        {
            get { return __UserPreferencesDisProfPostCommentEmail; }
            set { SetField(ref __UserPreferencesDisProfPostCommentEmail, value, "UserPreferencesDisProfPostCommentEmail"); }
        }
        private System.Boolean __UserPreferencesContentNoEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentNoEmail
        {
            get { return __UserPreferencesContentNoEmail; }
            set { SetField(ref __UserPreferencesContentNoEmail, value, "UserPreferencesContentNoEmail"); }
        }
        private System.Boolean __UserPreferencesContentEmailAsAndWhen;
        [EntityField(false)]
        public System.Boolean UserPreferencesContentEmailAsAndWhen
        {
            get { return __UserPreferencesContentEmailAsAndWhen; }
            set { SetField(ref __UserPreferencesContentEmailAsAndWhen, value, "UserPreferencesContentEmailAsAndWhen"); }
        }
        private System.Boolean __UserPreferencesApexPagesDeveloperMode;
        [EntityField(false)]
        public System.Boolean UserPreferencesApexPagesDeveloperMode
        {
            get { return __UserPreferencesApexPagesDeveloperMode; }
            set { SetField(ref __UserPreferencesApexPagesDeveloperMode, value, "UserPreferencesApexPagesDeveloperMode"); }
        }
        private System.Boolean __UserPreferencesHideCSNGetChatterMobileTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNGetChatterMobileTask
        {
            get { return __UserPreferencesHideCSNGetChatterMobileTask; }
            set { SetField(ref __UserPreferencesHideCSNGetChatterMobileTask, value, "UserPreferencesHideCSNGetChatterMobileTask"); }
        }
        private System.Boolean __UserPreferencesDisableMentionsPostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMentionsPostEmail
        {
            get { return __UserPreferencesDisableMentionsPostEmail; }
            set { SetField(ref __UserPreferencesDisableMentionsPostEmail, value, "UserPreferencesDisableMentionsPostEmail"); }
        }
        private System.Boolean __UserPreferencesDisMentionsCommentEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisMentionsCommentEmail
        {
            get { return __UserPreferencesDisMentionsCommentEmail; }
            set { SetField(ref __UserPreferencesDisMentionsCommentEmail, value, "UserPreferencesDisMentionsCommentEmail"); }
        }
        private System.Boolean __UserPreferencesHideCSNDesktopTask;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideCSNDesktopTask
        {
            get { return __UserPreferencesHideCSNDesktopTask; }
            set { SetField(ref __UserPreferencesHideCSNDesktopTask, value, "UserPreferencesHideCSNDesktopTask"); }
        }
        private System.Boolean __UserPreferencesHideChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideChatterOnboardingSplash
        {
            get { return __UserPreferencesHideChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideChatterOnboardingSplash, value, "UserPreferencesHideChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesHideSecondChatterOnboardingSplash;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideSecondChatterOnboardingSplash
        {
            get { return __UserPreferencesHideSecondChatterOnboardingSplash; }
            set { SetField(ref __UserPreferencesHideSecondChatterOnboardingSplash, value, "UserPreferencesHideSecondChatterOnboardingSplash"); }
        }
        private System.Boolean __UserPreferencesDisCommentAfterLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisCommentAfterLikeEmail
        {
            get { return __UserPreferencesDisCommentAfterLikeEmail; }
            set { SetField(ref __UserPreferencesDisCommentAfterLikeEmail, value, "UserPreferencesDisCommentAfterLikeEmail"); }
        }
        private System.Boolean __UserPreferencesDisableLikeEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableLikeEmail
        {
            get { return __UserPreferencesDisableLikeEmail; }
            set { SetField(ref __UserPreferencesDisableLikeEmail, value, "UserPreferencesDisableLikeEmail"); }
        }
        private System.Boolean __UserPreferencesSortFeedByComment;
        [EntityField(false)]
        public System.Boolean UserPreferencesSortFeedByComment
        {
            get { return __UserPreferencesSortFeedByComment; }
            set { SetField(ref __UserPreferencesSortFeedByComment, value, "UserPreferencesSortFeedByComment"); }
        }
        private System.Boolean __UserPreferencesDisableMessageEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableMessageEmail
        {
            get { return __UserPreferencesDisableMessageEmail; }
            set { SetField(ref __UserPreferencesDisableMessageEmail, value, "UserPreferencesDisableMessageEmail"); }
        }
        private System.Boolean __UserPreferencesJigsawListUser;
        [EntityField(false)]
        public System.Boolean UserPreferencesJigsawListUser
        {
            get { return __UserPreferencesJigsawListUser; }
            set { SetField(ref __UserPreferencesJigsawListUser, value, "UserPreferencesJigsawListUser"); }
        }
        private System.Boolean __UserPreferencesDisableBookmarkEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableBookmarkEmail
        {
            get { return __UserPreferencesDisableBookmarkEmail; }
            set { SetField(ref __UserPreferencesDisableBookmarkEmail, value, "UserPreferencesDisableBookmarkEmail"); }
        }
        private System.Boolean __UserPreferencesDisableSharePostEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableSharePostEmail
        {
            get { return __UserPreferencesDisableSharePostEmail; }
            set { SetField(ref __UserPreferencesDisableSharePostEmail, value, "UserPreferencesDisableSharePostEmail"); }
        }
        private System.Boolean __UserPreferencesEnableAutoSubForFeeds;
        [EntityField(false)]
        public System.Boolean UserPreferencesEnableAutoSubForFeeds
        {
            get { return __UserPreferencesEnableAutoSubForFeeds; }
            set { SetField(ref __UserPreferencesEnableAutoSubForFeeds, value, "UserPreferencesEnableAutoSubForFeeds"); }
        }
        private System.Boolean __UserPreferencesDisableFileShareNotificationsForApi;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFileShareNotificationsForApi
        {
            get { return __UserPreferencesDisableFileShareNotificationsForApi; }
            set { SetField(ref __UserPreferencesDisableFileShareNotificationsForApi, value, "UserPreferencesDisableFileShareNotificationsForApi"); }
        }
        private System.Boolean __UserPreferencesShowTitleToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToExternalUsers
        {
            get { return __UserPreferencesShowTitleToExternalUsers; }
            set { SetField(ref __UserPreferencesShowTitleToExternalUsers, value, "UserPreferencesShowTitleToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowManagerToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowManagerToExternalUsers
        {
            get { return __UserPreferencesShowManagerToExternalUsers; }
            set { SetField(ref __UserPreferencesShowManagerToExternalUsers, value, "UserPreferencesShowManagerToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowEmailToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowEmailToExternalUsers
        {
            get { return __UserPreferencesShowEmailToExternalUsers; }
            set { SetField(ref __UserPreferencesShowEmailToExternalUsers, value, "UserPreferencesShowEmailToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowWorkPhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowWorkPhoneToExternalUsers
        {
            get { return __UserPreferencesShowWorkPhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowWorkPhoneToExternalUsers, value, "UserPreferencesShowWorkPhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowMobilePhoneToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowMobilePhoneToExternalUsers
        {
            get { return __UserPreferencesShowMobilePhoneToExternalUsers; }
            set { SetField(ref __UserPreferencesShowMobilePhoneToExternalUsers, value, "UserPreferencesShowMobilePhoneToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowFaxToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowFaxToExternalUsers
        {
            get { return __UserPreferencesShowFaxToExternalUsers; }
            set { SetField(ref __UserPreferencesShowFaxToExternalUsers, value, "UserPreferencesShowFaxToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStreetAddressToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStreetAddressToExternalUsers
        {
            get { return __UserPreferencesShowStreetAddressToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStreetAddressToExternalUsers, value, "UserPreferencesShowStreetAddressToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToExternalUsers
        {
            get { return __UserPreferencesShowCityToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCityToExternalUsers, value, "UserPreferencesShowCityToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToExternalUsers
        {
            get { return __UserPreferencesShowStateToExternalUsers; }
            set { SetField(ref __UserPreferencesShowStateToExternalUsers, value, "UserPreferencesShowStateToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToExternalUsers
        {
            get { return __UserPreferencesShowPostalCodeToExternalUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToExternalUsers, value, "UserPreferencesShowPostalCodeToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToExternalUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToExternalUsers
        {
            get { return __UserPreferencesShowCountryToExternalUsers; }
            set { SetField(ref __UserPreferencesShowCountryToExternalUsers, value, "UserPreferencesShowCountryToExternalUsers"); }
        }
        private System.Boolean __UserPreferencesShowProfilePicToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowProfilePicToGuestUsers
        {
            get { return __UserPreferencesShowProfilePicToGuestUsers; }
            set { SetField(ref __UserPreferencesShowProfilePicToGuestUsers, value, "UserPreferencesShowProfilePicToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowTitleToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowTitleToGuestUsers
        {
            get { return __UserPreferencesShowTitleToGuestUsers; }
            set { SetField(ref __UserPreferencesShowTitleToGuestUsers, value, "UserPreferencesShowTitleToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCityToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCityToGuestUsers
        {
            get { return __UserPreferencesShowCityToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCityToGuestUsers, value, "UserPreferencesShowCityToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowStateToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowStateToGuestUsers
        {
            get { return __UserPreferencesShowStateToGuestUsers; }
            set { SetField(ref __UserPreferencesShowStateToGuestUsers, value, "UserPreferencesShowStateToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowPostalCodeToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowPostalCodeToGuestUsers
        {
            get { return __UserPreferencesShowPostalCodeToGuestUsers; }
            set { SetField(ref __UserPreferencesShowPostalCodeToGuestUsers, value, "UserPreferencesShowPostalCodeToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesShowCountryToGuestUsers;
        [EntityField(false)]
        public System.Boolean UserPreferencesShowCountryToGuestUsers
        {
            get { return __UserPreferencesShowCountryToGuestUsers; }
            set { SetField(ref __UserPreferencesShowCountryToGuestUsers, value, "UserPreferencesShowCountryToGuestUsers"); }
        }
        private System.Boolean __UserPreferencesDisableFeedbackEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableFeedbackEmail
        {
            get { return __UserPreferencesDisableFeedbackEmail; }
            set { SetField(ref __UserPreferencesDisableFeedbackEmail, value, "UserPreferencesDisableFeedbackEmail"); }
        }
        private System.Boolean __UserPreferencesDisableWorkEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableWorkEmail
        {
            get { return __UserPreferencesDisableWorkEmail; }
            set { SetField(ref __UserPreferencesDisableWorkEmail, value, "UserPreferencesDisableWorkEmail"); }
        }
        private System.Boolean __UserPreferencesHideS1BrowserUI;
        [EntityField(false)]
        public System.Boolean UserPreferencesHideS1BrowserUI
        {
            get { return __UserPreferencesHideS1BrowserUI; }
            set { SetField(ref __UserPreferencesHideS1BrowserUI, value, "UserPreferencesHideS1BrowserUI"); }
        }
        private System.Boolean __UserPreferencesDisableEndorsementEmail;
        [EntityField(false)]
        public System.Boolean UserPreferencesDisableEndorsementEmail
        {
            get { return __UserPreferencesDisableEndorsementEmail; }
            set { SetField(ref __UserPreferencesDisableEndorsementEmail, value, "UserPreferencesDisableEndorsementEmail"); }
        }
        private System.Boolean __UserPreferencesLightningExperiencePreferred;
        [EntityField(false)]
        public System.Boolean UserPreferencesLightningExperiencePreferred
        {
            get { return __UserPreferencesLightningExperiencePreferred; }
            set { SetField(ref __UserPreferencesLightningExperiencePreferred, value, "UserPreferencesLightningExperiencePreferred"); }
        }
        private System.String __FullPhotoUrl;
        [EntityField(true)]
        public System.String FullPhotoUrl
        {
            get { return __FullPhotoUrl; }
            set { SetField(ref __FullPhotoUrl, value, "FullPhotoUrl"); }
        }
        private System.String __SmallPhotoUrl;
        [EntityField(true)]
        public System.String SmallPhotoUrl
        {
            get { return __SmallPhotoUrl; }
            set { SetField(ref __SmallPhotoUrl, value, "SmallPhotoUrl"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        [JsonIgnore]
        [ReferencedByField("MemberId")]
        public RelationShip<UserProfile,CollaborationGroupMember> GroupMemberships
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ParentId")]
        public RelationShip<UserProfile,EntitySubscription> FeedSubscriptionsForEntity
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("OwnerId")]
        public RelationShip<UserProfile,OwnedContentDocument> OwnedContentDocuments
        {
            get;set;
        }
        [JsonIgnore]
        [ReferencedByField("ManagerId")]
        public RelationShip<UserProfile,UserProfile> ManagedUsers
        {
            get;set;
        }
    }
    [EntityName("UserRecordAccess")]
    public class UserRecordAccess : ISalesforceEntity
    {
    [JsonConstructor]
        private UserRecordAccess(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserRecordAccess()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private PickUserRecordAccessRecordId __RecordId;
        [EntityField(false)]
        public PickUserRecordAccessRecordId RecordId
        {
            get { return __RecordId; }
            set { SetField(ref __RecordId, value, "RecordId"); }
        }
        private System.Boolean __HasReadAccess;
        [EntityField(false)]
        public System.Boolean HasReadAccess
        {
            get { return __HasReadAccess; }
            set { SetField(ref __HasReadAccess, value, "HasReadAccess"); }
        }
        private System.Boolean __HasEditAccess;
        [EntityField(false)]
        public System.Boolean HasEditAccess
        {
            get { return __HasEditAccess; }
            set { SetField(ref __HasEditAccess, value, "HasEditAccess"); }
        }
        private System.Boolean __HasDeleteAccess;
        [EntityField(false)]
        public System.Boolean HasDeleteAccess
        {
            get { return __HasDeleteAccess; }
            set { SetField(ref __HasDeleteAccess, value, "HasDeleteAccess"); }
        }
        private System.Boolean __HasTransferAccess;
        [EntityField(false)]
        public System.Boolean HasTransferAccess
        {
            get { return __HasTransferAccess; }
            set { SetField(ref __HasTransferAccess, value, "HasTransferAccess"); }
        }
        private System.Boolean __HasAllAccess;
        [EntityField(false)]
        public System.Boolean HasAllAccess
        {
            get { return __HasAllAccess; }
            set { SetField(ref __HasAllAccess, value, "HasAllAccess"); }
        }
        private PickUserRecordAccessMaxAccessLevel __MaxAccessLevel;
        [EntityField(true)]
        public PickUserRecordAccessMaxAccessLevel MaxAccessLevel
        {
            get { return __MaxAccessLevel; }
            set { SetField(ref __MaxAccessLevel, value, "MaxAccessLevel"); }
        }
    }
    [EntityName("UserRole")]
    public class UserRole : ISalesforceEntity
    {
    [JsonConstructor]
        private UserRole(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserRole()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.String __ParentRoleId;
        [EntityField(true)]
        public System.String ParentRoleId
        {
            get { return __ParentRoleId; }
            set { SetField(ref __ParentRoleId, value, "ParentRoleId"); }
        }
        private System.String __RollupDescription;
        [EntityField(true)]
        public System.String RollupDescription
        {
            get { return __RollupDescription; }
            set { SetField(ref __RollupDescription, value, "RollupDescription"); }
        }
        private PickUserRoleOpportunityAccessForAccountOwner __OpportunityAccessForAccountOwner;
        [EntityField(false)]
        public PickUserRoleOpportunityAccessForAccountOwner OpportunityAccessForAccountOwner
        {
            get { return __OpportunityAccessForAccountOwner; }
            set { SetField(ref __OpportunityAccessForAccountOwner, value, "OpportunityAccessForAccountOwner"); }
        }
        private PickUserRoleCaseAccessForAccountOwner __CaseAccessForAccountOwner;
        [EntityField(true)]
        public PickUserRoleCaseAccessForAccountOwner CaseAccessForAccountOwner
        {
            get { return __CaseAccessForAccountOwner; }
            set { SetField(ref __CaseAccessForAccountOwner, value, "CaseAccessForAccountOwner"); }
        }
        private PickUserRoleContactAccessForAccountOwner __ContactAccessForAccountOwner;
        [EntityField(true)]
        public PickUserRoleContactAccessForAccountOwner ContactAccessForAccountOwner
        {
            get { return __ContactAccessForAccountOwner; }
            set { SetField(ref __ContactAccessForAccountOwner, value, "ContactAccessForAccountOwner"); }
        }
        private System.String __ForecastUserId;
        [EntityField(true)]
        public System.String ForecastUserId
        {
            get { return __ForecastUserId; }
            set { SetField(ref __ForecastUserId, value, "ForecastUserId"); }
        }
        private System.Boolean __MayForecastManagerShare;
        [EntityField(false)]
        public System.Boolean MayForecastManagerShare
        {
            get { return __MayForecastManagerShare; }
            set { SetField(ref __MayForecastManagerShare, value, "MayForecastManagerShare"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
        private System.String __DeveloperName;
        [EntityField(true)]
        public System.String DeveloperName
        {
            get { return __DeveloperName; }
            set { SetField(ref __DeveloperName, value, "DeveloperName"); }
        }
        private System.String __PortalAccountId;
        [EntityField(true)]
        public System.String PortalAccountId
        {
            get { return __PortalAccountId; }
            set { SetField(ref __PortalAccountId, value, "PortalAccountId"); }
        }
        private PickUserRolePortalType __PortalType;
        [EntityField(true)]
        public PickUserRolePortalType PortalType
        {
            get { return __PortalType; }
            set { SetField(ref __PortalType, value, "PortalType"); }
        }
        private System.String __PortalAccountOwnerId;
        [EntityField(true)]
        public System.String PortalAccountOwnerId
        {
            get { return __PortalAccountOwnerId; }
            set { SetField(ref __PortalAccountOwnerId, value, "PortalAccountOwnerId"); }
        }
        [JsonIgnore]
        [ReferencedByField("UserRoleId")]
        public RelationShip<UserRole,User> Users
        {
            get;set;
        }
    }
    [EntityName("UserShare")]
    public class UserShare : ISalesforceEntity
    {
    [JsonConstructor]
        private UserShare(string hack)
        {
            trackPropertyUpdates = false;
        }

        public UserShare()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.String __UserId;
        [EntityField(false)]
        public System.String UserId
        {
            get { return __UserId; }
            set { SetField(ref __UserId, value, "UserId"); }
        }
        private System.String __UserOrGroupId;
        [EntityField(false)]
        public System.String UserOrGroupId
        {
            get { return __UserOrGroupId; }
            set { SetField(ref __UserOrGroupId, value, "UserOrGroupId"); }
        }
        private PickUserShareUserAccessLevel __UserAccessLevel;
        [EntityField(false)]
        public PickUserShareUserAccessLevel UserAccessLevel
        {
            get { return __UserAccessLevel; }
            set { SetField(ref __UserAccessLevel, value, "UserAccessLevel"); }
        }
        private PickUserShareRowCause __RowCause;
        [EntityField(true)]
        public PickUserShareRowCause RowCause
        {
            get { return __RowCause; }
            set { SetField(ref __RowCause, value, "RowCause"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.Boolean __IsActive;
        [EntityField(false)]
        public System.Boolean IsActive
        {
            get { return __IsActive; }
            set { SetField(ref __IsActive, value, "IsActive"); }
        }
    }
    [EntityName("Vote")]
    public class Vote : ISalesforceEntity
    {
    [JsonConstructor]
        private Vote(string hack)
        {
            trackPropertyUpdates = false;
        }

        public Vote()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private System.Boolean __IsDeleted;
        [EntityField(false)]
        public System.Boolean IsDeleted
        {
            get { return __IsDeleted; }
            set { SetField(ref __IsDeleted, value, "IsDeleted"); }
        }
        private System.String __ParentId;
        [EntityField(false)]
        public System.String ParentId
        {
            get { return __ParentId; }
            set { SetField(ref __ParentId, value, "ParentId"); }
        }
        private PickVoteType __Type;
        [EntityField(false)]
        public PickVoteType Type
        {
            get { return __Type; }
            set { SetField(ref __Type, value, "Type"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    [EntityName("WebLink")]
    public class WebLink : ISalesforceEntity
    {
    [JsonConstructor]
        private WebLink(string hack)
        {
            trackPropertyUpdates = false;
        }

        public WebLink()
        {
            trackPropertyUpdates = true;
        } 
    
        private IDictionary<string, object> _updatedProperties = new Dictionary<string, object>();
        public IDictionary<string, object> UpdatedProperties => _updatedProperties;
        private bool trackPropertyUpdates = false;

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void TrackPropertyUpdates() => trackPropertyUpdates = true;

        protected bool SetField<T>(ref T field, T value, string serializedName, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value))
                return false;
            field = value;

            if (trackPropertyUpdates && !string.IsNullOrWhiteSpace(serializedName))
            {
              if (_updatedProperties.ContainsKey(serializedName))
                  _updatedProperties[serializedName] = value;
              else
                  _updatedProperties.Add(serializedName, value);
            }

            OnPropertyChanged(propertyName);
            return true;
        }
        private System.String __Id;
        [EntityField(false)]
        public System.String Id
        {
            get { return __Id; }
            set { SetField(ref __Id, value, "Id"); }
        }
        private PickWebLinkPageOrSobjectType __PageOrSobjectType;
        [EntityField(false)]
        public PickWebLinkPageOrSobjectType PageOrSobjectType
        {
            get { return __PageOrSobjectType; }
            set { SetField(ref __PageOrSobjectType, value, "PageOrSobjectType"); }
        }
        private System.String __Name;
        [EntityField(false)]
        public System.String Name
        {
            get { return __Name; }
            set { SetField(ref __Name, value, "Name"); }
        }
        private System.Boolean __IsProtected;
        [EntityField(false)]
        public System.Boolean IsProtected
        {
            get { return __IsProtected; }
            set { SetField(ref __IsProtected, value, "IsProtected"); }
        }
        private System.String __Url;
        [EntityField(true)]
        public System.String Url
        {
            get { return __Url; }
            set { SetField(ref __Url, value, "Url"); }
        }
        private PickWebLinkEncodingKey __EncodingKey;
        [EntityField(false)]
        public PickWebLinkEncodingKey EncodingKey
        {
            get { return __EncodingKey; }
            set { SetField(ref __EncodingKey, value, "EncodingKey"); }
        }
        private PickWebLinkLinkType __LinkType;
        [EntityField(false)]
        public PickWebLinkLinkType LinkType
        {
            get { return __LinkType; }
            set { SetField(ref __LinkType, value, "LinkType"); }
        }
        private PickWebLinkOpenType __OpenType;
        [EntityField(false)]
        public PickWebLinkOpenType OpenType
        {
            get { return __OpenType; }
            set { SetField(ref __OpenType, value, "OpenType"); }
        }
        private System.Int32? __Height;
        [EntityField(true)]
        public System.Int32? Height
        {
            get { return __Height; }
            set { SetField(ref __Height, value, "Height"); }
        }
        private System.Int32? __Width;
        [EntityField(true)]
        public System.Int32? Width
        {
            get { return __Width; }
            set { SetField(ref __Width, value, "Width"); }
        }
        private System.Boolean __ShowsLocation;
        [EntityField(false)]
        public System.Boolean ShowsLocation
        {
            get { return __ShowsLocation; }
            set { SetField(ref __ShowsLocation, value, "ShowsLocation"); }
        }
        private System.Boolean __HasScrollbars;
        [EntityField(false)]
        public System.Boolean HasScrollbars
        {
            get { return __HasScrollbars; }
            set { SetField(ref __HasScrollbars, value, "HasScrollbars"); }
        }
        private System.Boolean __HasToolbar;
        [EntityField(false)]
        public System.Boolean HasToolbar
        {
            get { return __HasToolbar; }
            set { SetField(ref __HasToolbar, value, "HasToolbar"); }
        }
        private System.Boolean __HasMenubar;
        [EntityField(false)]
        public System.Boolean HasMenubar
        {
            get { return __HasMenubar; }
            set { SetField(ref __HasMenubar, value, "HasMenubar"); }
        }
        private System.Boolean __ShowsStatus;
        [EntityField(false)]
        public System.Boolean ShowsStatus
        {
            get { return __ShowsStatus; }
            set { SetField(ref __ShowsStatus, value, "ShowsStatus"); }
        }
        private System.Boolean __IsResizable;
        [EntityField(false)]
        public System.Boolean IsResizable
        {
            get { return __IsResizable; }
            set { SetField(ref __IsResizable, value, "IsResizable"); }
        }
        private PickWebLinkPosition __Position;
        [EntityField(true)]
        public PickWebLinkPosition Position
        {
            get { return __Position; }
            set { SetField(ref __Position, value, "Position"); }
        }
        private System.String __ScontrolId;
        [EntityField(true)]
        public System.String ScontrolId
        {
            get { return __ScontrolId; }
            set { SetField(ref __ScontrolId, value, "ScontrolId"); }
        }
        private System.String __MasterLabel;
        [EntityField(true)]
        public System.String MasterLabel
        {
            get { return __MasterLabel; }
            set { SetField(ref __MasterLabel, value, "MasterLabel"); }
        }
        private System.String __Description;
        [EntityField(true)]
        public System.String Description
        {
            get { return __Description; }
            set { SetField(ref __Description, value, "Description"); }
        }
        private PickWebLinkDisplayType __DisplayType;
        [EntityField(false)]
        public PickWebLinkDisplayType DisplayType
        {
            get { return __DisplayType; }
            set { SetField(ref __DisplayType, value, "DisplayType"); }
        }
        private System.Boolean __RequireRowSelection;
        [EntityField(false)]
        public System.Boolean RequireRowSelection
        {
            get { return __RequireRowSelection; }
            set { SetField(ref __RequireRowSelection, value, "RequireRowSelection"); }
        }
        private System.String __NamespacePrefix;
        [EntityField(true)]
        public System.String NamespacePrefix
        {
            get { return __NamespacePrefix; }
            set { SetField(ref __NamespacePrefix, value, "NamespacePrefix"); }
        }
        private System.DateTime __CreatedDate;
        [EntityField(false)]
        public System.DateTime CreatedDate
        {
            get { return __CreatedDate; }
            set { SetField(ref __CreatedDate, value, "CreatedDate"); }
        }
        private System.String __CreatedById;
        [EntityField(false)]
        public System.String CreatedById
        {
            get { return __CreatedById; }
            set { SetField(ref __CreatedById, value, "CreatedById"); }
        }
        private System.DateTime __LastModifiedDate;
        [EntityField(false)]
        public System.DateTime LastModifiedDate
        {
            get { return __LastModifiedDate; }
            set { SetField(ref __LastModifiedDate, value, "LastModifiedDate"); }
        }
        private System.String __LastModifiedById;
        [EntityField(false)]
        public System.String LastModifiedById
        {
            get { return __LastModifiedById; }
            set { SetField(ref __LastModifiedById, value, "LastModifiedById"); }
        }
        private System.DateTime __SystemModstamp;
        [EntityField(false)]
        public System.DateTime SystemModstamp
        {
            get { return __SystemModstamp; }
            set { SetField(ref __SystemModstamp, value, "SystemModstamp"); }
        }
    }
    public class SalesforceDataContext : SoqlContext
    {
        public SalesforceDataContext(string instanceName, Rest.OAuth.ImpersonationParam authparams) : base(instanceName, authparams) { }
        public IQueryable<AcceptedEventRelation> AcceptedEventRelations => GetTable<AcceptedEventRelation>();
        public IQueryable<Account> Accounts => GetTable<Account>();
        public IQueryable<AccountCleanInfo> AccountCleanInfoes => GetTable<AccountCleanInfo>();
        public IQueryable<AccountContactRole> AccountContactRoles => GetTable<AccountContactRole>();
        public IQueryable<AccountFeed> AccountFeeds => GetTable<AccountFeed>();
        public IQueryable<AccountHistory> AccountHistories => GetTable<AccountHistory>();
        public IQueryable<AccountPartner> AccountPartners => GetTable<AccountPartner>();
        public IQueryable<AccountShare> AccountShares => GetTable<AccountShare>();
        public IQueryable<ActivityHistory> ActivityHistories => GetTable<ActivityHistory>();
        public IQueryable<AdditionalNumber> AdditionalNumbers => GetTable<AdditionalNumber>();
        public IQueryable<AggregateResult> AggregateResults => GetTable<AggregateResult>();
        public IQueryable<Announcement> Announcements => GetTable<Announcement>();
        public IQueryable<ApexClass> ApexClasses => GetTable<ApexClass>();
        public IQueryable<ApexComponent> ApexComponents => GetTable<ApexComponent>();
        public IQueryable<ApexLog> ApexLogs => GetTable<ApexLog>();
        public IQueryable<ApexPage> ApexPages => GetTable<ApexPage>();
        public IQueryable<ApexTestQueueItem> ApexTestQueueItems => GetTable<ApexTestQueueItem>();
        public IQueryable<ApexTestResult> ApexTestResults => GetTable<ApexTestResult>();
        public IQueryable<ApexTrigger> ApexTriggers => GetTable<ApexTrigger>();
        public IQueryable<AppMenuItem> AppMenuItems => GetTable<AppMenuItem>();
        public IQueryable<Asset> Assets => GetTable<Asset>();
        public IQueryable<AssetFeed> AssetFeeds => GetTable<AssetFeed>();
        public IQueryable<AssetHistory> AssetHistories => GetTable<AssetHistory>();
        public IQueryable<AssignmentRule> AssignmentRules => GetTable<AssignmentRule>();
        public IQueryable<AsyncApexJob> AsyncApexJobs => GetTable<AsyncApexJob>();
        public IQueryable<AttachedContentDocument> AttachedContentDocuments => GetTable<AttachedContentDocument>();
        public IQueryable<Attachment> Attachments => GetTable<Attachment>();
        public IQueryable<AuraDefinition> AuraDefinitions => GetTable<AuraDefinition>();
        public IQueryable<AuraDefinitionBundle> AuraDefinitionBundles => GetTable<AuraDefinitionBundle>();
        public IQueryable<AuthProvider> AuthProviders => GetTable<AuthProvider>();
        public IQueryable<AuthSession> AuthSessions => GetTable<AuthSession>();
        public IQueryable<BrandTemplate> BrandTemplates => GetTable<BrandTemplate>();
        public IQueryable<BusinessHours> BusinessHours => GetTable<BusinessHours>();
        public IQueryable<BusinessProcess> BusinessProcesses => GetTable<BusinessProcess>();
        public IQueryable<CallCenter> CallCenters => GetTable<CallCenter>();
        public IQueryable<Campaign> Campaigns => GetTable<Campaign>();
        public IQueryable<CampaignFeed> CampaignFeeds => GetTable<CampaignFeed>();
        public IQueryable<CampaignMember> CampaignMembers => GetTable<CampaignMember>();
        public IQueryable<CampaignMemberStatus> CampaignMemberStatus => GetTable<CampaignMemberStatus>();
        public IQueryable<CampaignShare> CampaignShares => GetTable<CampaignShare>();
        public IQueryable<Case> Cases => GetTable<Case>();
        public IQueryable<CaseComment> CaseComments => GetTable<CaseComment>();
        public IQueryable<CaseContactRole> CaseContactRoles => GetTable<CaseContactRole>();
        public IQueryable<CaseFeed> CaseFeeds => GetTable<CaseFeed>();
        public IQueryable<CaseHistory> CaseHistories => GetTable<CaseHistory>();
        public IQueryable<CaseShare> CaseShares => GetTable<CaseShare>();
        public IQueryable<CaseSolution> CaseSolutions => GetTable<CaseSolution>();
        public IQueryable<CaseStatus> CaseStatus => GetTable<CaseStatus>();
        public IQueryable<CaseTeamMember> CaseTeamMembers => GetTable<CaseTeamMember>();
        public IQueryable<CaseTeamRole> CaseTeamRoles => GetTable<CaseTeamRole>();
        public IQueryable<CaseTeamTemplate> CaseTeamTemplates => GetTable<CaseTeamTemplate>();
        public IQueryable<CaseTeamTemplateMember> CaseTeamTemplateMembers => GetTable<CaseTeamTemplateMember>();
        public IQueryable<CaseTeamTemplateRecord> CaseTeamTemplateRecords => GetTable<CaseTeamTemplateRecord>();
        public IQueryable<CategoryData> CategoryDatas => GetTable<CategoryData>();
        public IQueryable<CategoryNode> CategoryNodes => GetTable<CategoryNode>();
        public IQueryable<ChatterActivity> ChatterActivities => GetTable<ChatterActivity>();
        public IQueryable<ClientBrowser> ClientBrowsers => GetTable<ClientBrowser>();
        public IQueryable<CollaborationGroup> CollaborationGroups => GetTable<CollaborationGroup>();
        public IQueryable<CollaborationGroupFeed> CollaborationGroupFeeds => GetTable<CollaborationGroupFeed>();
        public IQueryable<CollaborationGroupMember> CollaborationGroupMembers => GetTable<CollaborationGroupMember>();
        public IQueryable<CollaborationGroupMemberRequest> CollaborationGroupMemberRequests => GetTable<CollaborationGroupMemberRequest>();
        public IQueryable<CollaborationGroupRecord> CollaborationGroupRecords => GetTable<CollaborationGroupRecord>();
        public IQueryable<CollaborationInvitation> CollaborationInvitations => GetTable<CollaborationInvitation>();
        public IQueryable<CombinedAttachment> CombinedAttachments => GetTable<CombinedAttachment>();
        public IQueryable<Community> Communities => GetTable<Community>();
        public IQueryable<Contact> Contacts => GetTable<Contact>();
        public IQueryable<ContactCleanInfo> ContactCleanInfoes => GetTable<ContactCleanInfo>();
        public IQueryable<ContactFeed> ContactFeeds => GetTable<ContactFeed>();
        public IQueryable<ContactHistory> ContactHistories => GetTable<ContactHistory>();
        public IQueryable<ContactShare> ContactShares => GetTable<ContactShare>();
        public IQueryable<ContentDocument> ContentDocuments => GetTable<ContentDocument>();
        public IQueryable<ContentDocumentFeed> ContentDocumentFeeds => GetTable<ContentDocumentFeed>();
        public IQueryable<ContentDocumentHistory> ContentDocumentHistories => GetTable<ContentDocumentHistory>();
        public IQueryable<ContentDocumentLink> ContentDocumentLinks => GetTable<ContentDocumentLink>();
        public IQueryable<ContentVersion> ContentVersions => GetTable<ContentVersion>();
        public IQueryable<ContentVersionHistory> ContentVersionHistories => GetTable<ContentVersionHistory>();
        public IQueryable<ContentWorkspace> ContentWorkspaces => GetTable<ContentWorkspace>();
        public IQueryable<ContentWorkspaceDoc> ContentWorkspaceDocs => GetTable<ContentWorkspaceDoc>();
        public IQueryable<Contract> Contracts => GetTable<Contract>();
        public IQueryable<ContractContactRole> ContractContactRoles => GetTable<ContractContactRole>();
        public IQueryable<ContractFeed> ContractFeeds => GetTable<ContractFeed>();
        public IQueryable<ContractHistory> ContractHistories => GetTable<ContractHistory>();
        public IQueryable<ContractStatus> ContractStatus => GetTable<ContractStatus>();
        public IQueryable<CronJobDetail> CronJobDetails => GetTable<CronJobDetail>();
        public IQueryable<CronTrigger> CronTriggers => GetTable<CronTrigger>();
        public IQueryable<CustomBrand> CustomBrands => GetTable<CustomBrand>();
        public IQueryable<CustomBrandAsset> CustomBrandAssets => GetTable<CustomBrandAsset>();
        public IQueryable<DandBCompany> DandBCompanies => GetTable<DandBCompany>();
        public IQueryable<Dashboard> Dashboards => GetTable<Dashboard>();
        public IQueryable<DashboardComponent> DashboardComponents => GetTable<DashboardComponent>();
        public IQueryable<DashboardComponentFeed> DashboardComponentFeeds => GetTable<DashboardComponentFeed>();
        public IQueryable<DashboardFeed> DashboardFeeds => GetTable<DashboardFeed>();
        public IQueryable<DatacloudCompany> DatacloudCompanies => GetTable<DatacloudCompany>();
        public IQueryable<DatacloudContact> DatacloudContacts => GetTable<DatacloudContact>();
        public IQueryable<DatacloudDandBCompany> DatacloudDandBCompanies => GetTable<DatacloudDandBCompany>();
        public IQueryable<DatacloudOwnedEntity> DatacloudOwnedEntities => GetTable<DatacloudOwnedEntity>();
        public IQueryable<DatacloudPurchaseUsage> DatacloudPurchaseUsages => GetTable<DatacloudPurchaseUsage>();
        public IQueryable<DeclinedEventRelation> DeclinedEventRelations => GetTable<DeclinedEventRelation>();
        public IQueryable<Document> Documents => GetTable<Document>();
        public IQueryable<DocumentAttachmentMap> DocumentAttachmentMaps => GetTable<DocumentAttachmentMap>();
        public IQueryable<Domain> Domains => GetTable<Domain>();
        public IQueryable<DomainSite> DomainSites => GetTable<DomainSite>();
        public IQueryable<EmailDomainKey> EmailDomainKeys => GetTable<EmailDomainKey>();
        public IQueryable<EmailMessage> EmailMessages => GetTable<EmailMessage>();
        public IQueryable<EmailServicesAddress> EmailServicesAddresses => GetTable<EmailServicesAddress>();
        public IQueryable<EmailServicesFunction> EmailServicesFunctions => GetTable<EmailServicesFunction>();
        public IQueryable<EmailStatus> EmailStatus => GetTable<EmailStatus>();
        public IQueryable<EmailTemplate> EmailTemplates => GetTable<EmailTemplate>();
        public IQueryable<EntitySubscription> EntitySubscriptions => GetTable<EntitySubscription>();
        public IQueryable<Event> Events => GetTable<Event>();
        public IQueryable<EventFeed> EventFeeds => GetTable<EventFeed>();
        public IQueryable<EventLogFile> EventLogFiles => GetTable<EventLogFile>();
        public IQueryable<EventRelation> EventRelations => GetTable<EventRelation>();
        public IQueryable<ExternalDataSource> ExternalDataSources => GetTable<ExternalDataSource>();
        public IQueryable<ExternalDataUserAuth> ExternalDataUserAuths => GetTable<ExternalDataUserAuth>();
        public IQueryable<FeedComment> FeedComments => GetTable<FeedComment>();
        public IQueryable<FeedItem> FeedItems => GetTable<FeedItem>();
        public IQueryable<FeedLike> FeedLikes => GetTable<FeedLike>();
        public IQueryable<FeedPollChoice> FeedPollChoices => GetTable<FeedPollChoice>();
        public IQueryable<FeedPollVote> FeedPollVotes => GetTable<FeedPollVote>();
        public IQueryable<FeedTrackedChange> FeedTrackedChanges => GetTable<FeedTrackedChange>();
        public IQueryable<FieldPermissions> FieldPermissions => GetTable<FieldPermissions>();
        public IQueryable<FiscalYearSettings> FiscalYearSettings => GetTable<FiscalYearSettings>();
        public IQueryable<Folder> Folders => GetTable<Folder>();
        public IQueryable<ForecastShare> ForecastShares => GetTable<ForecastShare>();
        public IQueryable<Group> Groups => GetTable<Group>();
        public IQueryable<GroupMember> GroupMembers => GetTable<GroupMember>();
        public IQueryable<Holiday> Holidays => GetTable<Holiday>();
        public IQueryable<Idea> Ideas => GetTable<Idea>();
        public IQueryable<IdeaComment> IdeaComments => GetTable<IdeaComment>();
        public IQueryable<InstalledMobileApp> InstalledMobileApps => GetTable<InstalledMobileApp>();
        public IQueryable<Lead> Leads => GetTable<Lead>();
        public IQueryable<LeadCleanInfo> LeadCleanInfoes => GetTable<LeadCleanInfo>();
        public IQueryable<LeadFeed> LeadFeeds => GetTable<LeadFeed>();
        public IQueryable<LeadHistory> LeadHistories => GetTable<LeadHistory>();
        public IQueryable<LeadShare> LeadShares => GetTable<LeadShare>();
        public IQueryable<LeadStatus> LeadStatus => GetTable<LeadStatus>();
        public IQueryable<LoginHistory> LoginHistories => GetTable<LoginHistory>();
        public IQueryable<LoginIp> LoginIps => GetTable<LoginIp>();
        public IQueryable<MailmergeTemplate> MailmergeTemplates => GetTable<MailmergeTemplate>();
        public IQueryable<Name> Names => GetTable<Name>();
        public IQueryable<Note> Notes => GetTable<Note>();
        public IQueryable<NoteAndAttachment> NoteAndAttachments => GetTable<NoteAndAttachment>();
        public IQueryable<ObjectPermissions> ObjectPermissions => GetTable<ObjectPermissions>();
        public IQueryable<OpenActivity> OpenActivities => GetTable<OpenActivity>();
        public IQueryable<Opportunity> Opportunities => GetTable<Opportunity>();
        public IQueryable<OpportunityCompetitor> OpportunityCompetitors => GetTable<OpportunityCompetitor>();
        public IQueryable<OpportunityContactRole> OpportunityContactRoles => GetTable<OpportunityContactRole>();
        public IQueryable<OpportunityFeed> OpportunityFeeds => GetTable<OpportunityFeed>();
        public IQueryable<OpportunityFieldHistory> OpportunityFieldHistories => GetTable<OpportunityFieldHistory>();
        public IQueryable<OpportunityHistory> OpportunityHistories => GetTable<OpportunityHistory>();
        public IQueryable<OpportunityLineItem> OpportunityLineItems => GetTable<OpportunityLineItem>();
        public IQueryable<OpportunityPartner> OpportunityPartners => GetTable<OpportunityPartner>();
        public IQueryable<OpportunityShare> OpportunityShares => GetTable<OpportunityShare>();
        public IQueryable<OpportunityStage> OpportunityStages => GetTable<OpportunityStage>();
        public IQueryable<Order> Orders => GetTable<Order>();
        public IQueryable<OrderFeed> OrderFeeds => GetTable<OrderFeed>();
        public IQueryable<OrderHistory> OrderHistories => GetTable<OrderHistory>();
        public IQueryable<OrderItem> OrderItems => GetTable<OrderItem>();
        public IQueryable<OrderItemFeed> OrderItemFeeds => GetTable<OrderItemFeed>();
        public IQueryable<OrderItemHistory> OrderItemHistories => GetTable<OrderItemHistory>();
        public IQueryable<OrgWideEmailAddress> OrgWideEmailAddresses => GetTable<OrgWideEmailAddress>();
        public IQueryable<Organization> Organizations => GetTable<Organization>();
        public IQueryable<OwnedContentDocument> OwnedContentDocuments => GetTable<OwnedContentDocument>();
        public IQueryable<Partner> Partners => GetTable<Partner>();
        public IQueryable<PartnerRole> PartnerRoles => GetTable<PartnerRole>();
        public IQueryable<Period> Periods => GetTable<Period>();
        public IQueryable<PermissionSet> PermissionSets => GetTable<PermissionSet>();
        public IQueryable<PermissionSetAssignment> PermissionSetAssignments => GetTable<PermissionSetAssignment>();
        public IQueryable<PermissionSetLicense> PermissionSetLicenses => GetTable<PermissionSetLicense>();
        public IQueryable<PermissionSetLicenseAssign> PermissionSetLicenseAssigns => GetTable<PermissionSetLicenseAssign>();
        public IQueryable<Pricebook2> Pricebook2 => GetTable<Pricebook2>();
        public IQueryable<Pricebook2History> Pricebook2History => GetTable<Pricebook2History>();
        public IQueryable<PricebookEntry> PricebookEntries => GetTable<PricebookEntry>();
        public IQueryable<ProcessDefinition> ProcessDefinitions => GetTable<ProcessDefinition>();
        public IQueryable<ProcessInstance> ProcessInstances => GetTable<ProcessInstance>();
        public IQueryable<ProcessInstanceHistory> ProcessInstanceHistories => GetTable<ProcessInstanceHistory>();
        public IQueryable<ProcessInstanceStep> ProcessInstanceSteps => GetTable<ProcessInstanceStep>();
        public IQueryable<ProcessInstanceWorkitem> ProcessInstanceWorkitems => GetTable<ProcessInstanceWorkitem>();
        public IQueryable<ProcessNode> ProcessNodes => GetTable<ProcessNode>();
        public IQueryable<Product2> Product2 => GetTable<Product2>();
        public IQueryable<Product2Feed> Product2Feed => GetTable<Product2Feed>();
        public IQueryable<Profile> Profiles => GetTable<Profile>();
        public IQueryable<PushTopic> PushTopics => GetTable<PushTopic>();
        public IQueryable<QueueSobject> QueueSobjects => GetTable<QueueSobject>();
        public IQueryable<RecentlyViewed> RecentlyVieweds => GetTable<RecentlyViewed>();
        public IQueryable<RecordType> RecordTypes => GetTable<RecordType>();
        public IQueryable<Report> Reports => GetTable<Report>();
        public IQueryable<ReportFeed> ReportFeeds => GetTable<ReportFeed>();
        public IQueryable<Scontrol> Scontrols => GetTable<Scontrol>();
        public IQueryable<SecureAgent> SecureAgents => GetTable<SecureAgent>();
        public IQueryable<SecureAgentPlugin> SecureAgentPlugins => GetTable<SecureAgentPlugin>();
        public IQueryable<SecureAgentPluginProperty> SecureAgentPluginProperties => GetTable<SecureAgentPluginProperty>();
        public IQueryable<SetupAuditTrail> SetupAuditTrails => GetTable<SetupAuditTrail>();
        public IQueryable<SetupEntityAccess> SetupEntityAccesses => GetTable<SetupEntityAccess>();
        public IQueryable<Site> Sites => GetTable<Site>();
        public IQueryable<SiteFeed> SiteFeeds => GetTable<SiteFeed>();
        public IQueryable<SiteHistory> SiteHistories => GetTable<SiteHistory>();
        public IQueryable<Solution> Solutions => GetTable<Solution>();
        public IQueryable<SolutionFeed> SolutionFeeds => GetTable<SolutionFeed>();
        public IQueryable<SolutionHistory> SolutionHistories => GetTable<SolutionHistory>();
        public IQueryable<SolutionStatus> SolutionStatus => GetTable<SolutionStatus>();
        public IQueryable<StaticResource> StaticResources => GetTable<StaticResource>();
        public IQueryable<StreamingChannel> StreamingChannels => GetTable<StreamingChannel>();
        public IQueryable<StreamingChannelShare> StreamingChannelShares => GetTable<StreamingChannelShare>();
        public IQueryable<Task> Tasks => GetTable<Task>();
        public IQueryable<TaskFeed> TaskFeeds => GetTable<TaskFeed>();
        public IQueryable<TaskPriority> TaskPriorities => GetTable<TaskPriority>();
        public IQueryable<TaskStatus> TaskStatus => GetTable<TaskStatus>();
        public IQueryable<TenantUsageEntitlement> TenantUsageEntitlements => GetTable<TenantUsageEntitlement>();
        public IQueryable<Topic> Topics => GetTable<Topic>();
        public IQueryable<TopicAssignment> TopicAssignments => GetTable<TopicAssignment>();
        public IQueryable<TopicFeed> TopicFeeds => GetTable<TopicFeed>();
        public IQueryable<UndecidedEventRelation> UndecidedEventRelations => GetTable<UndecidedEventRelation>();
        public IQueryable<User> Users => GetTable<User>();
        public IQueryable<UserFeed> UserFeeds => GetTable<UserFeed>();
        public IQueryable<UserLicense> UserLicenses => GetTable<UserLicense>();
        public IQueryable<UserLogin> UserLogins => GetTable<UserLogin>();
        public IQueryable<UserPreference> UserPreferences => GetTable<UserPreference>();
        public IQueryable<UserProfile> UserProfiles => GetTable<UserProfile>();
        public IQueryable<UserRecordAccess> UserRecordAccesses => GetTable<UserRecordAccess>();
        public IQueryable<UserRole> UserRoles => GetTable<UserRole>();
        public IQueryable<UserShare> UserShares => GetTable<UserShare>();
        public IQueryable<Vote> Votes => GetTable<Vote>();
        public IQueryable<WebLink> WebLinks => GetTable<WebLink>();
    }
}

